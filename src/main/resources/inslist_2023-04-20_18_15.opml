<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0"><head><title>Inspection列表</title></head><body><outline text="Inspections" ><outline text="Java" ><outline text="Abstraction issues" ><outline text="'instanceof' check for 'this'" _note="
Reports usages of  **instanceof**  or  **getClass() == SomeClass.class**  in which a
 **this**  expression is checked.
Such expressions indicate a failure of the object-oriented design, and should be replaced by
  polymorphic constructions.</p>
Example:</p>
<pre> **
class Super {
  void process() {
    if (this instanceof Sub) { // warning
      doSomething();
    } else {
      doSomethingElse();
    }
  }
}
  
class Sub extends Super {}
** </pre>
To fix the problem, use an overriding method:</p>
<pre> **
class Super {
  void process() {
    doSomethingElse();
  }
}
  
class Sub extends Super {
  @Override
  void process() {
    doSomething();
  }
}  
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'Optional' used as field or parameter type" _note="
Reports any cases in which  **java.util.Optional&lt;T&gt;** ,  **java.util.OptionalDouble** ,  **java.util.OptionalInt** ,
 **java.util.OptionalLong** , or  **com.google.common.base.Optional**  are used as types for fields or parameters.
 **Optional**  was designed to provide a limited mechanism for library method return types in which a clear way to represent 'no result'
  was needed.</p>
Using a field with the  **java.util.Optional**  type is also problematic if the class needs to be
   **Serializable** , as  **java.util.Optional**  is not serializable.</p>
Example:</p>
<pre> **
  class MyClass {
    Optional&lt;String&gt; name; // Optional field
    // Optional parameter
    void setName(Optional&lt;String&gt; name) {
      this.name = name;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'public' method not exposed in interface" _note="
Reports  **public**  methods in classes
which are not exposed in an interface.
Exposing all  **public**  methods via an interface is important for
  maintaining loose coupling, and may be necessary for certain component-based programming styles.</p>
Example:</p>
<pre> **
interface Person {
  String getName();
}
class PersonImpl implements Person {
  private String name;
  // ok: method is exposed in interface
  @Override
  public String getName() {
    return name;
  }
  // warning: method is public
  // but not exposed in interface
  public void setName() {
    this.name = name;
  }
}
** </pre>
<!-- tooltip end -->

  Use the  **Ignore if annotated by**  list to specify special annotations. Methods annotated with one of
these annotations will be ignored by this inspection.

  Use the  **Ignore if the containing class does not implement a non-library interface**  option to ignore methods from classes which do not
implement any interface from the project.


" ></outline><outline text="'public' method with 'boolean' parameter" _note="
Reports public methods that accept a  **boolean**  parameter.
It's almost always bad practice to add a  **boolean**  parameter to a public method (part of an API) if that method is not a setter.
When reading code using such a method, it can be difficult to decipher what the  **boolean**  stands for without looking at
the source or documentation.</p>
This problem is also known as <a href='https://ariya.io/2011/08/hall-of-api-shame-boolean-trap'>the boolean trap</a>.
  The  **boolean**  parameter can often be replaced with an  **enum** .</p>
Example:</p>
<pre> **
  // Warning: it's hard to understand what the
  // boolean parameters mean when looking at
  // a call to this method
  public boolean setPermission(File f,
                               int access,
                               boolean enable,
                               boolean ownerOnly) {
    // ...
  }
** </pre>
<!-- tooltip end -->

Use the  **Only report methods with multiple boolean parameters**  option to warn only when a method contains more than one boolean parameter.

" ></outline><outline text="Chain of 'instanceof' checks" _note="
Reports any chains of  **if** - **else**  statements all of whose conditions are  **instanceof**  expressions
or class equality expressions (e.g. comparison with  **String.class** ).
Such constructions usually indicate a failure in object-oriented design which
dictates that such type-based dispatch should be done via polymorphic method calls rather than explicit chains
of type tests.
Example:</p>
<pre> **
  double getArea(Shape shape) {
    // Warning: abstraction failure.
    // It would be better to declare a getArea()
    // abstract method in the shape interface
    // and implement it in every inheritor.
    if (shape instanceof Point) {
      return 0;
    }
    if (shape instanceof Circle) {
      return Math.PI *
        Math.pow(((Circle) shape).radius(), 2);
    }
    if (shape instanceof Rectangle) {
      return ((Rectangle) shape).width() *
        ((Rectangle) shape).height();
    }
    throw new IllegalArgumentException();
  }
** </pre>
<!-- tooltip end -->

  Use the checkbox below to ignore  **instanceof**  expressions on library classes.


" ></outline><outline text="Class references one of its subclasses" _note="
Reports classes which contain references to one of their subclasses.
Such references may be confusing and violate several rules of object-oriented design.
Example:</p>
<pre> **
  class Entity {
    // Warning: the class references its subclass
    void compare(SimpleEntity entity) {
      ...
    }
  }
  class SimpleEntity extends Entity {
    ...
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Collection declared by class, not interface" _note="
Reports declarations of  **Collection**  variables made by using the collection class as a type,
rather than an appropriate interface. The warning is not issued if weakening the variable type 
will cause a compilation error.
Example:</p>
<pre> **
  // Warning: concrete collection class ArrayList used.
  int getTotalLength(ArrayList&lt;String&gt; list) {
    return list.stream().mapToInt(String::length).sum();
  }
  // No warning, as trimToSize() method is not
  // available in the List interface
  void addData(ArrayList&lt;String&gt; data) {
    data.add('Hello');
    data.add('World');
    data.trimToSize();
  }
** </pre>
A quick-fix is suggested to use the appropriate collection interface (e.g.  **Collection** ,  **Set** , or  **List** ).
<!-- tooltip end -->
" ></outline><outline text="Feature envy" _note="
Reports the <em>Feature Envy</em> code smell. The warning is thrown when a method calls methods on another class three
or more times. Calls to library classes, parent classes, contained or containing
classes are not counted by this inspection. Feature
envy is often an indication of the fact that this functionality is located in a wrong class.
Example:</p>
<pre> **
  class JobManager {
    // Warning: this method calls three methods
    // of the Job class
    // It would be better to move this chain of
    // calls to the Job class itself.
    void performJob(Job job) {
      job.beforeStart();
      job.process();
      job.afterProcessing();
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Interface method clashes with method in 'java.lang.Object'" _note="
Reports interface methods that clash with the  **protected**  methods  **clone()**  and  **finalize()**  from the  **java.lang.Object**  class.
In an interface, it is possible to declare these methods with a return type that is incompatible with the  **java.lang.Object**  methods.
  A class that implements such an interface will not be compilable.
  When the interface is functional, it remains possible to create a lambda from it, but this is not recommended.</p>
Example:</p>
<pre> **
  // Warning: this interface cannot be implemented
  // by any class, only by a lambda or method reference
  interface MyInterface {
    double clone();
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Magic number" _note="
Reports 'magic numbers': numeric literals that are not named by a constant declaration.
Using magic numbers can lead to unclear code, as well as errors if a magic
number is changed in one location but remains unchanged not another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0L, 1L, 2L,
  0.0, 1.0, 0.0F and 1.0F are not reported by this inspection.</p>
Example:</p>
<pre> **
  void checkFileSize(long bytes) {
    if (bytes > 1_048_576) {
      throw new IllegalArgumentException('too big');
    }
  }
** </pre>
A quick-fix introduces a new constant:</p>
<pre> **
  static final int MAX_SUPPORTED_FILE_SIZE = 1_048_576;
  void checkFileSize(long bytes) {
    if (bytes > MAX_SUPPORTED_FILE_SIZE) {
      throw new IllegalArgumentException('too big');
    }
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore constants in 'hashCode()' methods**  option to disable this inspection within  **hashCode()**  methods.</li>
  <li>Use the  **Ignore in annotations**  option to ignore magic numbers in annotations.</li>
  <li>Use the  **Ignore initial capacity for StringBuilders and Collections**  option to ignore magic numbers used as initial capacity when constructing
     **Collection** ,  **Map** ,
     **StringBuilder**  or  **StringBuffer**  objects.</li>
</ul>

" ></outline><outline text="Overly strong type cast" _note="
Reports type casts that are overly strong. For instance,
casting an object to  **ArrayList**  when casting it to
 **List**  would do just as well.

   **Note:**  much like the <i>Redundant type cast</i>
  inspection, applying the fix for this inspection may change the semantics of your program if you are
  intentionally using an overly strong cast to cause a  **ClassCastException**  to be generated.
</p>
Example:</p>
<pre> **
  interface Super {
    void doSmth();
  }
  interface Sub extends Super { }
  void use(Object obj) {
    // Warning: ((Super)obj).doSmth() could be used
    ((Sub)obj).doSmth();
  }
** </pre>
<!-- tooltip end -->

  Use the checkbox below to ignore casts when there's a matching  **instanceof**  check in the code.
" ></outline><outline text="Private method only used from inner class" _note="
Reports  **private**  methods which
are only called from an inner class of the class containing the method. Such
methods can be safely moved into that inner class.
Example:</p>
<pre> **
public class Outer {
  public static void main(String[] args) {
    new Inner().run(args[0]);
  }
  static class Inner {
    void run(String arg) {
      // Method isEmpty() is used from Inner class only
      // consider moving it to the Inner class
      if (!isEmpty(arg)) {
        System.out.println('Argument is supplied');
      }
    }
  }
  private static boolean isEmpty(String s) {
    return s != null && s.trim().isEmpty();
  }
}
** </pre>
<!-- tooltip end -->

Use the first checkbox below to ignore  **private** 
methods which are called from an anonymous or local class.

Use the third checkbox to only report  **static**  methods.


" ></outline><outline text="Static member only used from one other class" _note="
Reports  **static**  methods and fields that
are only used from a class other than the containing class. Such members could be moved into the using class.
Factory methods and members accessed from an anonymous class inside the member's class are ignored by this inspection.
Convenience overloads, which call a method with the same name in the same class but have fewer parameters, are also ignored.
<!-- tooltip end -->

Use the first checkbox to supress this inspection when the static member is only used from a test class.

Use the second checkbox below to ignore member usages from inside anonymous, local, or non-static inner classes.

Use the third checkbox below to not warn on members that cannot be moved without problems,
  for example, because a method with an identical signature is already present in the target class,
  or because a field or a method used inside the method will not be accessible when this method is moved.

Use the fourth checkbox to ignore members located in utility classes.
" ></outline><outline text="Type may be weakened" _note="
Reports variable and method return types that can be changed to a more abstract (weaker) type.
This allows making the code more abstract, hence more reusable.
Example:</p>
<pre> **
  // Type of parameter can be weakened to java.util.List
  void processList(ArrayList&lt;String&gt; list) {
    if (list.isEmpty()) return;
    System.out.println('Processing');
    for (String s : list) {
      System.out.println('String: ' + s);
    }
  }
** </pre>
<!-- tooltip end -->

  Enable the  **Use righthand type**  checkbox below
  to prevent weakening the left side of assignments when the right side is not
  a type cast or a new expression. When storing the result of a method call in a variable, it is
  useful to retain the type of the method call result instead of unnecessarily weakening it.
</p>

  Enable the  **Use parameterized type**  checkbox below
  to use the parameterized type of the collection as the weakest type when
  the object evaluated is used as an argument to a collection method with a parameter type of
   **java.lang.Object** .
  Use this option to prevent weakening to  **Object**  when passing an object to the  following collection methods:
   **get()** ,  **remove()** ,
   **contains()** ,  **indexOf()** ,
   **lastIndexOf()** ,  **containsKey()**  and  **containsValue()** .
</p>

  Enable the  **Do not weaken to Object**  checkbox below
  to specify whether a type should be weakened to  **java.lang.Object** .
  Weakening to  **java.lang.Object**  is rarely very useful.
</p>

  Enable the  **Only weaken to an interface**  checkbox below
  to only report a problem when the type can be weakened to an interface type.
</p>

  Enable the  **Do not weaken return type**  checkbox below
  to prevent reporting a problem when the return type may be weakened.
  Only variables will be analyzed.
</p>

  Enable the  **Do not suggest weakening variable declared as 'var'**  checkbox below
  to prevent reporting on local variables declared using the 'var' keyword (Java 10+)
</p>

 **Stop classes**  are intended to prevent weakening to classes
lower than stop classes, even if it is possible.
In some cases, this may improve readability.

" ></outline><outline text="Use of concrete class" _note="
Reports usages of concrete classes, rather than interfaces.
Such declarations may represent a failure of abstraction and may make testing more difficult.

Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
Casts, instanceofs, and local variables are not reported in  **equals()**  method implementations.
Also, casts are not reported in  **clone()**  method implementations.
</p>
Example:</p>
<pre> **
  interface Entity {}
  class EntityImpl implements Entity {}
  void processObject(Object obj) {
    // warning: instanceof of the concrete class
    if (obj instanceof EntityImpl) {
      // warning: cast to the concrete class,
      // rather than the interface
      processEntity((EntityImpl)obj);
    }
  }
  // warning: parameter of concrete class
  void processEntity(EntityImpl obj) {
  }
** </pre>
<!-- tooltip end -->

  Use the  **Ignore abstract class type**  option to ignore casts to abstract classes.</p>
Use the subsequent options to control contexts where the problem is reported.</p>
" ></outline></outline><outline text="Assignment issues" ><outline text="'null' assignment" _note="
Reports variables that are assigned to  **null**  outside a declaration.
The main purpose of  **null**  in Java is to denote uninitialized
  reference variables. In rare cases, assigning a variable explicitly to  **null** 
  is useful to aid garbage collection. However, using  **null**  to denote a missing, not specified, or invalid value or a not
  found element is considered bad practice and may make your code more prone to  **NullPointerExceptions** .
  Instead, consider defining a sentinel object with the intended semantics
  or use library types like  **Optional**  to denote the absence of a value.</p>
 **Example:** </p>
<pre> **
  Integer convert(String s) {
    Integer value;
    try {
      value = Integer.parseInt(s);
    } catch (NumberFormatException e) {
      // Warning: null is used to denote an 'invalid value'
      value = null;
    }
    return value;
  }
** </pre>
<!-- tooltip end -->

Use the  **Ignore assignments to fields**  option to ignore assignments to fields.
</p>

" ></outline><outline text="Assignment can be replaced with operator assignment" _note="
Reports assignment operations which can be replaced by operator-assignment.
Code using operator assignment is shorter and may be clearer.</p>
 **Example:** </p>
<pre> **  x = x + 3;
  x = x / 3;
** </pre>
After the quick fix is applied:</p>
<pre> **  x += 3;
  x /= 3;
** </pre>
<!-- tooltip end -->

Use the  **Ignore conditional operators**  option to ignore  **&amp;&amp;** 
and  **||** . Replacing conditional operators with operator
assignment would change the evaluation from lazy to eager, which may change the semantics of the expression.
</p>

Use the  **Ignore obscure operators**  option to ignore  **^**  and  **%** , which are less known.
</p>
" ></outline><outline text="Assignment to 'for' loop parameter" _note="
Reports assignment to, or modification of a  **for**  loop parameter inside the body of the loop.
Although occasionally intended, this construct may be confusing and is often the result of a typo or a wrong variable being used.</p>
The quick-fix adds a declaration of a new variable.</p>
 **Example:** </p>
<pre> **
  for (String s : list) {
    // Warning: s is changed inside the loop
    s = s.trim();
    System.out.println('String: ' + s);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  for (String s : list) {
    String trimmed = s.trim();
    System.out.println('String: ' + trimmed);
  }
** </pre>
Assignments in basic  **for**  loops without an update statement are not reported.
  In such cases the assignment is probably intended and can't be easily moved to the update part of the  **for**  loop.</p>
 **Example:** </p>
<pre> **
  for (int i = 0; i &lt; list.size(); ) {
    if (element.equals(list.get(i))) {
      list.remove(i);
    } else {
      // modification of for loop parameter is not reported
      // as there's no update statement
      i++;
    }
  }
** </pre>
<!-- tooltip end -->
Use the  **Check enhanced 'for' loop parameters**  option to specify whether modifications of enhanced  **for**  loop parameters
  should be also reported.</p>
" ></outline><outline text="Assignment to catch block parameter" _note="
Reports assignments to,  **catch**  block parameters.
Changing a  **catch**  block parameter is very confusing and should be discouraged.</p>
The quick-fix adds a declaration of a new variable.</p>
 **Example:** </p>
<pre> **
  void processFile(String fileName) throws Exception {
    try {
      doProcessFile(fileName);
    } catch(Exception ex) {
      if (ex instanceof UncheckedIOException) {
        // Warning: catch block parameter reassigned
        ex = ((UncheckedIOException) ex).getCause();
      }
      throw ex;
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void processFile(String fileName) throws Exception {
    try {
      doProcessFile(fileName);
    } catch(Exception ex) {
      Exception unwrapped = ex;
      if (unwrapped instanceof UncheckedIOException) {
        unwrapped = ((UncheckedIOException)
          unwrapped).getCause();
      }
      throw unwrapped;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Assignment to lambda parameter" _note="
Reports assignment to, or modification of lambda parameters.
Although occasionally intended, this construct may be confusing and is often caused by a typo or use of a wrong variable.
The quick-fix adds a declaration of a new variable.</p>
 **Example:** </p>
<pre> **
  list.forEach(s -> {
    s = s.trim();
    System.out.println('String: ' + s);
  });
** </pre>
After the quick-fix is applied:</p>
<pre> **
  list.forEach(s -> {
    String trimmed = s.trim();
    System.out.println('String: ' + trimmed);
  });
** </pre>
<!-- tooltip end -->
Use the  **Ignore if assignment is a transformation of the original parameter**  option to ignore assignments that modify the parameter
  value based on its previous value.</p>
" ></outline><outline text="Assignment to method parameter" _note="
Reports assignment to, or modification of method parameters.
Although occasionally intended, this construct may be confusing
  and is therefore prohibited in some Java projects.</p>
The quick-fix adds a declaration of a new variable.</p>
 **Example:** </p>
<pre> **
  void printTrimmed(String s) {
    s = s.trim();
    System.out.println(s);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void printTrimmed(String s) {
    String trimmed = s.trim();
    System.out.println(trimmed);
  }
** </pre>
<!-- tooltip end -->

  Use the  **Ignore if assignment is a transformation of the original parameter**  option to ignore assignments that modify
  the parameter value based on its previous value.
</p>
" ></outline><outline text="Assignment to static field from instance context" _note="
Reports assignment to, or modification of  **static**  fields from within an instance method.
Although legal, such assignments are tricky to do
  safely and are often a result of marking fields  **static**  inadvertently.</p>
 **Example:** </p>
<pre> **
  class Counter {
    private static int count = 0;
    void increment() {
      // Warning: updating a static field
      // from an instance method
      count++;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Assignment used as condition" _note="
Reports assignments that are used as a condition of an  **if** ,  **while** ,  **for** , or
 **do**  statement, or a conditional expression.
Although occasionally intended, this usage is confusing and may indicate a typo, for example,  **=**  instead of  **==** .</p>
The quick-fix replaces  **=**  with  **==** .</p>
 **Example:** </p>
<pre> **
  void update(String str, boolean empty) {
    // Warning: 'empty' is reassigned,
    // not compared to str.isEmpty()
    if (empty = str.isEmpty()) {
      ...
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void update(String str, boolean empty) {
    if (empty == str.isEmpty()) {
      ...
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Constructor assigns value to field defined in superclass" _note="
Reports assignment to, or modification of fields that are declared in a superclass from within a subclass constructor.
It is considered preferable to initialize the fields of a superclass in its own constructor and
  delegate to that constructor in a subclass. This will also allow declaring a field  **final** 
  if it isn't changed after the construction.</p>
 **Example:** </p>
<pre> **
  class Super {
    int x;
  }
  class Sub extends Super {
    Sub(int _x) {
      // Warning: x is declared in a superclass
      x = _x;
    }
  }
** </pre>
To avoid the problem, declare a superclass constructor:</p>
<pre> **
  class Super {
    final int x;
    Super(int _x) {
      x = _x;
    }
  }
  class Sub extends Super {
    Sub(int _x) {
      super(_x);
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Nested assignment" _note="
Reports assignment expressions that are nested inside other expressions.
Such expressions may be confusing and violate the general design principle, which states that any construct should do precisely one thing.</p>
 **Example:** </p>
<pre> **
  String userName;
  // Warning: result of assignment to 'userName' is used
  String message = 'Hello ' + (userName = 'Alice') + '!'
  System.out.println(message);
  System.out.println('Goodbye ' + userName);
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Result of '++' or '--' used" _note="
Reports increment or decrement expressions that are nested inside other expressions.
Such expressions may be confusing and violate the general design principle, which states that any construct should do precisely one thing.
The quick-fix extracts the increment or decrement operation to a separate expression statement.</p>
 **Example:** </p>
<pre> **
  int i = 10;
  while (i-- > 0) {
    System.out.println(i);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  int i = 10;
  while (i > 0) {
    i--;
    System.out.println(i);
  }
  i--;
** </pre>
<!-- tooltip end -->
" ></outline></outline><outline text="Bitwise operation issues" ><outline text="Incompatible bitwise mask operation" _note="
Reports bitwise mask expressions which are guaranteed to
evaluate to  **true**  or  **false** .

  The inspection checks the expressions of the form  **(var & constant1) == constant2**  or
   **(var | constant1) == constant2** , where  **constant1** 
  and  **constant2**  are incompatible bitmask constants.</p>
 **Example:** </p>
<pre> **  // Incompatible mask: as the mask ends in 00,
  // the result could be 0x1200 but not 0x1234
  if ((mask & 0xFF00) == 0x1234) {...}
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Pointless bitwise expression" _note="
Reports pointless bitwise expressions.

  Such expressions include applying the  **&**  operator to the maximum value for the given type, applying the
   **or**  operator to zero, and shifting by zero. Such expressions may be the result of automated
  refactorings not followed through to completion and are unlikely to be originally intended.</p>
 **Examples:** </p>
<pre> **
  // Warning: operation is pointless and can be replaced with just `flags`
  // 0xFFFF_FFFF is the maximum value for an integer, and both literals are treated
  // as 32 bit integer literals.
  int bits = flags & 0xFFFF_FFFF;
  // Warning: operation is pointless and can be replaced with just `bits`
  // OR-ing with 0 always outputs the other operand.
  int or = bits | 0x0;
  // Warning: operation is pointless, as always results in 0
  int xor = or ^ or;
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Shift operation by inappropriate constant" _note="
Reports shift operations
where the shift value is a constant outside the reasonable range.
Integer shift operations outside the range  **0..31**  and long shift operations outside the
  range  **0..63**  are reported. Shifting by negative or overly large values is almost certainly
  a coding error.
</p>
 **Example:** </p>
<pre> **
  int shiftSize = 32;
  // Warning: shift by 32 bits is equivalent to shift by 0 bits, so there's no shift at all.
  int mask = (1 &lt;&lt; shiftSize) - 1;
** </pre>
<!-- tooltip end -->
" ></outline></outline><outline text="Class metrics" ><outline text="Anonymous inner class with too many methods" _note="
Reports anonymous inner classes whose method count exceeds the specified maximum.
Anonymous classes with numerous methods may be
  difficult to understand and should be promoted to become named inner classes.</p>
<!-- tooltip end -->
Use the  **Method count limit**  field to specify the maximum allowed number of methods in an anonymous inner class.</p>
" ></outline><outline text="Class too deep in inheritance tree" _note="
Reports classes that are too deep in the inheritance hierarchy.
Classes that are too deeply inherited may be confusing and indicate that a refactoring is necessary.</p>
All superclasses from a library are treated as a single superclass, libraries are considered unmodifiable.</p>
<!-- tooltip end -->
Use the  **Inheritance depth limit**  field to specify the maximum inheritance depth for a class.</p>
" ></outline><outline text="Class with too many constructors" _note="
Reports classes whose number of constructors exceeds the specified maximum.
Classes with too many constructors are prone to initialization errors, and often modeling such a class as multiple subclasses is preferable.</p>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Constructor count limit**  field to specify the maximum allowed number of constructors in a class.</li>
  <li>Use the  **Ignore deprecated constructors**  option to avoid adding deprecated constructors to the total count.</li>
</ul>
" ></outline><outline text="Class with too many fields" _note="
Reports classes whose number of fields exceeds the specified maximum.
Classes with a large number of fields are often trying to do too much. Consider splitting such a class into multiple smaller classes.</p>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Field count limit**  field to specify the maximum allowed number of fields in a class.</li>
  <li>Use the  **Include constant fields in count**  option to indicate whether constant fields should be counted.</li>
  <li>By default only immutable  **static final**  objects are counted as constants. Use the  **'static final' fields count as constant**  option
    to count any  **static final**  field as constant.</li>
  <li>Use the  **Include enum constants in count**  option to specify whether  **enum**  constants in  **enum**  classes
    should be counted.</li>
</ul>
" ></outline><outline text="Class with too many methods" _note="
Reports classes whose number of methods exceeds the specified maximum.
Classes with too many methods are often trying to 'do too much'. Consider splitting such a class into multiple smaller classes.</p>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Method count limit**  field to specify the maximum allowed number of methods in a class.</li>
  <li>Use the  **Ignore simple getter and setter methods**  option to ignore simple getters and setters in method count.</li>
  <li>Use the  **Ignore methods overriding/implementing a super method**  to ignore methods that override or implement a method
    from a superclass.</li>
</ul>
" ></outline><outline text="Inner class too deeply nested" _note="
Reports classes whose number of nested inner classes exceeds the specified maximum.
Nesting inner classes inside other inner classes is confusing and indicates that a refactoring may be necessary.</p>
<!-- tooltip end -->
Use the  **Nesting limit**  field to specify the maximum allowed nesting depth for a class.

" ></outline><outline text="Overly complex anonymous class" _note="
Reports anonymous inner classes whose total complexity exceeds the specified maximum.
The total complexity of a class is the sum of cyclomatic complexities of all the methods
  and initializers the class declares. Inherited methods and initializers are not counted
  toward the total complexity.</p>
Anonymous classes should have very low complexity otherwise they are hard to understand and should be promoted to become named inner classes.</p>
<!-- tooltip end -->
Use the  **Cyclomatic complexity limit**  field to specify the maximum allowed complexity for a class.</p>
" ></outline><outline text="Overly complex class" _note="
Reports classes whose total complexity exceeds the specified maximum.
The total complexity of a class is the sum of cyclomatic complexities of all the methods
  and initializers the class declares. Inherited methods and initializers are not counted
  toward the total complexity.</p>
Too high complexity indicates that the class should be refactored into several smaller classes.</p>
<!-- tooltip end -->
Use the  **Cyclomatic complexity limit**  field below to specify the maximum allowed complexity for a class.</p>
" ></outline><outline text="Overly coupled class" _note="
Reports classes that reference too many other classes.
Classes with too high coupling can be very fragile, and should probably be split into smaller classes.</p>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Class coupling limit**  field to specify the maximum allowed coupling for a class.</li>
  <li>Use the  **Include couplings to java system classes**  option to specify whether references to system classes
    (those in the  **java.** or  **javax.**  packages) should be counted.</li>
  <li>Use the  **Include couplings to library classes**  option to specify whether references to any library classes should be counted.</li>
</ul>
" ></outline></outline><outline text="Class structure" ><outline text="'private' method declared 'final'" _note="
Reports methods that are marked with both  **final**  and  **private**  keywords.
Since  **private**  methods cannot be meaningfully overridden because of their visibility, declaring them
 **final**  is redundant.</p>
<!-- tooltip end -->
" ></outline><outline text="'public' constructor can be replaced with factory method" _note="
Reports  **public**  constructors.
Some coding standards discourage the use of  **public**  constructors and recommend
 **static**  factory methods instead.
This way the implementation can be swapped out without affecting the call sites.
 **Example:** </p>
<pre> **
  class Test {
    private String name;
    public Test(String name) {
        this.name = name;
    }
    public void test() {
        System.out.println(name);
    }
    public static void main(String[] args) {
        new Test('str').test();
    }
  }
** </pre>
After quick-fix is applied:</p>
<pre> **
  class Test {
    private String name;
    private Test(String name) {
        this.name = name;
    }
    public static Test getInstance(String name) {
        return new Test(name);
    }
    public void test() {
        System.out.println(name);
    }
    public static void main(String[] args) {
        getInstance('str').test();
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'static' method declared 'final'" _note="
Reports static methods that are marked as  **final** .
Such code might indicate an error or an incorrect assumption about the effect of the  **final**  keyword.
Static methods are not subject to runtime polymorphism, so the only purpose of the  **final**  keyword used with static methods
  is to ensure the method will not be hidden in a subclass.</p>
<!-- tooltip end -->


" ></outline><outline text="'static', non-'final' field" _note="
Reports non- **final**   **static**  fields.
A quick-fix is available to add the  **final**  modifier to a non- **final**   **static**  field.</p>
This inspection doesn't check fields' mutability. For example, adding the  **final**  modifier to a field that has a value
  being set somewhere will cause a compilation error.</p>
<!-- tooltip end -->

  Use the  **Only report 'public' fields**  option so that the inspection reported only  **public**  fields.</p>
" ></outline><outline text="Abstract class may be interface" _note="
Reports  **abstract**  classes that can be converted to interfaces.
Using interfaces instead of classes is preferable as Java doesn't support multiple class inheritance,
  while a class can implement multiple interfaces.</p>
A class may be converted to an interface if it has no superclasses (other
than Object), has only  **public static final**  fields,
   **public abstract**  methods, and  **public**  inner classes.
<!-- tooltip end -->

Example:</p>
<pre> **
abstract class Example {
    public static final int MY_CONST = 42;
    public abstract void foo();
}
class Inheritor extends Example {
    @Override
    public void foo() {
        System.out.println(MY_CONST);
    }
}
** </pre>

After the quick-fix is applied:</p>
<pre> **
interface Example {
    int MY_CONST = 42;
    void foo();
}
class Inheritor implements Example {
    @Override
    public void foo() {
        System.out.println(MY_CONST);
    }
}
** </pre>
Configure the inspection:</p>

  Use the  **Report classes containing non-abstract methods when using Java 8**  option to report only the classes with  **static**  methods and non-abstract methods that can be converted to
   **default**  methods (only applicable to language level of 8 or higher).


" ></outline><outline text="Anonymous inner class can be replaced with inner class" _note="
Reports anonymous inner classes.
In some cases, replacing anonymous inner classes with inner classes can lead to more readable and maintainable code.
  Also, some code standards discourage anonymous inner classes.</p>
<!-- tooltip end -->
" ></outline><outline text="Class is closed to inheritance" _note="
Reports classes that are declared  **final** .
Such classes can't be inherited and may indicate a lack of object-oriented design.
  Some coding standards discourage  **final**  classes.
<!-- tooltip end -->
" ></outline><outline text="Class may extend adapter instead of implementing listener" _note="
Reports classes implementing listeners instead of extending corresponding adapters.
A quick-fix is available to
  remove any redundant empty methods left after replacing a listener implementation with an adapter extension.</p>
<!-- tooltip end -->

  Use the  **Only warn when empty implementing methods are found**  option to configure the inspection to warn even if no empty methods are found.
</p>
" ></outline><outline text="Class name differs from file name" _note="
Reports top-level class names that don't match the name of a file containing them.
While the Java specification allows for naming non- **public**  classes this way,
  files with unmatched names may be confusing and decrease usefulness of various software tools.</p>
<!-- tooltip end -->
" ></outline><outline text="Class with only 'private' constructors should be declared 'final'" _note="
Reports classes with only  **private**  constructors.
A class that only has  **private**  constructors cannot be extended outside a file and should be declared as  **final** .</p>
<!-- tooltip end -->
" ></outline><outline text="Constant declared in abstract class" _note="
Reports constants ( **public static final**  fields) declared in abstract
classes.
Some coding standards require declaring constants in interfaces instead.</p>
<!-- tooltip end -->
" ></outline><outline text="Constant declared in interface" _note="
Reports constants ( **public static final**  fields) declared in interfaces.
Some coding standards require declaring constants in abstract classes instead.</p>
<!-- tooltip end -->
" ></outline><outline text="Field can be local" _note="
Reports redundant class fields that can be replaced with local variables.
If all local usages of a field are preceded by assignments to that field, the
  field can be removed, and its usages can be replaced with local variables.</p>

" ></outline><outline text="Inner class of interface" _note="
Reports inner classes in  **interface**  classes.
Some coding standards
discourage the use of such classes. The inspection doesn't report enumeration and annotation classes.</p>
<!-- tooltip end -->

Use the  **Ignore inner interfaces of interfaces**  option to ignore inner interfaces. For example:
<pre> **
  interface I {
    interface Inner {
    }
  }
** </pre>
" ></outline><outline text="Interface may be annotated as '@FunctionalInterface'" _note="
Reports interfaces that can be annotated with  **@FunctionalInterface**  (available since JDK 1.8).
Annotating an interface with  **@FunctionalInterface**  indicates that the interface
  is functional and cannot have any more  **abstract**  methods.</p>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 8 or higher.</p>
" ></outline><outline text="Local class" _note="
Reports local classes.
A local class is a named nested class declared inside a code block.
Local classes are uncommon and may therefore be confusing.
  In addition, some code standards discourage the use of local classes.</p>
 **Example:** </p>
<pre> **
  void test() {
    class Local { // local class
    }
    new Local();
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Marker interface" _note="
Reports marker interfaces without any methods or fields.
Such interfaces may be confusing and typically indicate a design failure.</p>
The inspection ignores interfaces that extend two or more interfaces and interfaces
  that specify the generic type of their superinterface.</p>
<!-- tooltip end -->
" ></outline><outline text="Method can't be overridden" _note="
Reports methods that are declared  **final** .
Such methods can't be overridden and may indicate a lack of object-oriented design.
  Some coding standards discourage  **final**  methods.
<!-- tooltip end -->
" ></outline><outline text="Method returns per-class constant" _note="
Reports methods that only return a constant, which may differ for various inheritors.
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
<!-- tooltip end -->
" ></outline><outline text="Multiple top level classes in single file" _note="
Reports multiple top-level classes in a single Java file.
Putting multiple
top-level classes in one file may be confusing and degrade the usefulness of various
  software tools.</p>
<!-- tooltip end -->
" ></outline><outline text="No-op method in 'abstract' class" _note="
Reports no-op (for 'no operation') methods in  **abstract**  classes.
It is usually a better
design to make such methods  **abstract**  themselves so that classes inheriting these
  methods provide their implementations.</p>
 **Example:** </p>
<pre> **
  abstract class Test {
    protected void doTest() {
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Non-'static' initializer" _note="
Reports non- **static**  initializers in classes.
Some coding standards prohibit instance initializers and recommend using constructors or field initializers for initialization.
  Also, deleting the  **static**  keyword may accidentally create non- **static**  initializers and result in obscure bugs.
</p>
This inspection doesn't report instance initializers in anonymous classes.
  <!-- tooltip end -->

  Use the  **Only warn when the class has one or more constructors**  option to ignore instance initializers in classes that don't have any constructors.
</p>
" ></outline><outline text="Non-final field in 'enum'" _note="
Reports non-final fields in enumeration types as they are rarely needed and provide a global mutable state.
 **Example:** </p>
<pre> **
  enum Enum {
    FIRST('first'),
    SECOND('second');
    public String str;
    Enum(String str) {
        this.str = str;
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  enum Enum {
    FIRST('first'),
    SECOND('second');
    public final String str;
    Enum(String str) {
        this.str = str;
    }
  }
** </pre>
<!-- tooltip end -->
Configure the `Ignore field if quick-fix is not available` checkbox to only highlight fields that can be made final by the quick-fix.
" ></outline><outline text="Redundant empty class" _note="
Reports empty classes and Java files without any defined classes.
A class is empty if it
doesn't contain any fields, methods, constructors, or initializers. Empty classes often remain
  after significant changes or refactorings.</p>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>
    Use the  **Ignore if annotated by**  option to specify special annotations. The inspection will ignore the classes marked with these
    annotations.
  </li>
  <li>
    Use the  **Ignore class if it is a parametrization of a super type**  option to ignore classes that parameterize a superclass. For example:
  </p>
    <pre> **class MyList extends ArrayList&lt;String&gt; {}** </pre>
  </li>
  <li>
    Use the  **Ignore subclasses of java.lang.Throwable**  to ignore classes that extend  **java.lang.Throwable** .
  </li>
  <li>
    Use the  **Comments count as content**  option to ignore classes that contain comments.
  </li>
</ul>
" ></outline><outline text="Singleton" _note="
Reports singleton classes.
Singleton classes are declared in a way that only one instance of the class can ever be instantiated. Singleton classes complicate testing,
  and their presence may indicate a lack of object-oriented design.</p>
 **Example:** </p>
<pre> **
  class Singleton {
    private static final Singleton ourInstance = new Singleton();
    private Singleton() {
    }
    public Singleton getInstance() {
        return ourInstance;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Utility class" _note="
Reports utility classes.
Utility classes have all fields and methods declared as  **static**  and their
  presence may indicate a lack of object-oriented design.</p>
<!-- tooltip end -->

Use the  **Ignore if annotated by**  option to specify special annotations. The inspection ignores classes annotated with one of
  these annotations.</p>

" ></outline><outline text="Utility class can be 'enum'" _note="
Reports utility classes that can be converted to enums.
Some coding style guidelines declare to implement utility classes as enums
  to avoid code coverage issues in  **private**  constructors.</p>
 **Example:** </p>
<pre> **
  class StringUtils {
    public static final String EMPTY = '';
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  enum StringUtils {
    ;
    public static final String EMPTY = '';
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Utility class is not 'final'" _note="
Reports utility classes that aren't  **final** .
Utility classes have all fields and methods declared as  **static** .
  Making them  **final**  prevents them from being accidentally subclassed.</p>
<!-- tooltip end -->
" ></outline><outline text="Utility class with 'public' constructor" _note="
Reports utility classes with  **public**  constructors.
Utility classes have all fields and methods declared as  **static** . Creating a  **public** 
  constructor in such classes is confusing and may cause accidental class instantiation.</p>
<!-- tooltip end -->
" ></outline><outline text="Utility class without 'private' constructor" _note="
Reports utility classes without  **private**  constructors.
Utility classes have all fields and methods declared as  **static** . Creating  **private** 
constructors in utility classes prevents them from being accidentally instantiated.
<!-- tooltip end -->

  Use the  **Ignore if annotated by**  option to specify special annotations. The inspection ignores classes marked with one of
these annotations.

Use the  **Ignore classes with only a main method**  option to ignore classes with no methods other than the main one.
</p>
" ></outline><outline text="Value passed as parameter never read" _note="
Reports redundant method parameters that can be replaced with local variables.
If all local usages of a parameter are preceded by assignments to that parameter, the
parameter can be removed and its usages replaced with local variables.
It makes no sense to have such a parameter, as values that are passed to it are overwritten.
  Usually, the problem appears as a result of refactoring.</p>
Example:</p>
<pre> **
  void test(int p) {
    p = 1;
    System.out.print(p);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void test() {
    int p = 1;
    System.out.print(p);
  }
** </pre>

" ></outline></outline><outline text="Cloning issues" ><outline text="'clone()' does not declare 'CloneNotSupportedException'" _note="
Reports  **clone()**  methods that do not declare  **throws CloneNotSupportedException** .
If  **throws CloneNotSupportedException**  is not declared, the method's subclasses will not be able to prohibit cloning
in the standard way. This inspection does not report  **clone()**  methods declared  **final** 
and  **clone()**  methods on  **final**  classes.</p>
<!-- tooltip end -->
Configure the inspection:</p>
Use the  **Only warn on 'protected' clone methods**  option to indicate that this inspection should only warn on  **protected clone()**  methods.
The <i>Effective Java</i> book (second and third edition) recommends omitting the  **CloneNotSupportedException** 
declaration on  **public**  methods, because the methods that do not throw checked exceptions are easier to use.
Example:</p>
<pre> **
   **public class**  Example  **implements**  Cloneable {
    // method doesn't declare 'throws CloneNotSupportedException'
     **protected**  Object clone() {
         **try**  {
             **return**   **super** .clone();
        }  **catch**  (CloneNotSupportedException e) {
             **return**  null;
        }
    }
  }
** </pre>

" ></outline><outline text="'clone()' instantiates objects with constructor" _note="
Reports calls to object constructors inside  **clone()**  methods.
It is considered good practice to call  **clone()**  to instantiate objects inside of a  **clone()**  method
  instead of creating them directly to support later subclassing.
This inspection will not report
 **clone()**  methods declared as  **final** 
  or  **clone()**  methods on  **final**  classes.</p>
<!-- tooltip end -->
" ></outline><outline text="'clone()' method in non-Cloneable class" _note="
Reports classes that override the
 **clone()**  method but don't implement the  **Cloneable**  interface.
This usually represents a programming error.
<!-- tooltip end -->

  Use the  **Only warn on 'public' clone methods**  option to ignore methods that aren't  **public** .</p>
For classes designed to be inherited, you may choose to override  **clone()**  and declare it as  **protected** 
without implementing the  **Cloneable**  interface and decide whether to implement the  **Cloneable**  interface in subclasses.
</p>
" ></outline><outline text="'clone()' method not 'public'" _note="
Reports  **clone()**  methods that are  **protected**  and not  **public** .
When overriding the  **clone()**  method from  **java.lang.Object** , it is expected to make the method  **public** ,
  so that it is accessible from non-subclasses outside the package.</p>
<!-- tooltip end -->
" ></outline><outline text="'clone()' should have return type equal to the class it contains" _note="
Reports  **clone()**  methods with return types different from the class they're located in.
Often a  **clone()**  method will have a return type of  **java.lang.Object** , which makes it harder to use by its clients.
<i>Effective Java</i> (the second and third editions) recommends making the return type of the  **clone()**  method the same as the
  class type of the object it returns.</p>
 **Example:** </p>
<pre> **
   **class**  Foo  **implements**  Cloneable {
     **public**  Object clone() {
       **try**  {
         **return**  super.clone();
      }  **catch**  (CloneNotSupportedException e) {
         **throw new**  AssertionError();
      }
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **class**  Foo  **implements**  Cloneable {
     **public**  Foo clone() {
       **try**  {
         **return**  (Foo)super.clone();
      }  **catch**  (CloneNotSupportedException e) {
         **throw new**  AssertionError();
      }
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Cloneable class without 'clone()' method" _note="
Reports classes implementing the  **Cloneable**  interface that don't override the
 **clone()**  method.
Such classes use the default implementation of  **clone()** ,
  which isn't  **public**  but  **protected** , and which does not copy the mutable state of the class.</p>
A quick-fix is available to generate a basic  **clone()**  method,
which can be used as a basis for a properly functioning  **clone()**  method
  expected from a  **Cloneable**  class.</p>
 **Example:** </p>
<pre> **
   **public class**  Data  **implements**  Cloneable {
     **private**  String[] names;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **public class**  Data  **implements**  Cloneable {
     **private**  String[] names;
    @Override
     **public**  Data clone() {
       **try**  {
        Data clone = (Data)  **super** .clone();
        // TODO: copy mutable state here, so the clone can't change the internals of the original
         **return**  clone;
      }  **catch**  (CloneNotSupportedException e) {
         **throw new**  AssertionError();
      }
    }
  }
** </pre>
<!--
Note for translators: the text of the TODO comment in the example code above comes from
community/plugins/InspectionGadgets/InspectionGadgetsAnalysis/resources/messages/InspectionGadgetsBundle.properties
property key: cloneable.class.without.clone.todo.message
-->
<!-- tooltip end -->
Use the  **Ignore classes cloneable due to inheritance**  option to ignore classes that are
   **Cloneable**  because they inherit from the  **Cloneable**  class.</p>
Use the  **Ignore when Cloneable is necessary to call clone() method of super class** 
  option to ignore classes that require implementing  **Cloneable**  because they call the  **clone()**  method from a superclass.</p>
" ></outline><outline text="Use of 'clone()' or 'Cloneable'" _note="
Reports implementations of and calls to the  **clone()**  method and uses of  **java.lang.Cloneable** .
Some coding standards prohibit the use of  **clone()**  and recommend using a copy constructor or
  the  **static**  factory method instead.</p>
The inspection ignores calls to  **clone()**  on arrays because it's a correct and compact way to copy an array.</p>
<!-- tooltip end -->
" ></outline></outline><outline text="Code maturity" ><outline text="'Throwable' printed to 'System.out'" _note="
Reports calls to  **System.out.println()**  with an exception as an argument.
Using print statements for logging exceptions hides the stack trace from you, which can complicate the investigation of the problem.
  It is recommended that you use logger instead.</p>
Calls to  **System.out.print()** ,  **System.err.println()** , and  **System.err.print()**  with an exception argument are also
reported. It is better to use a logger to log exceptions instead.</p>
<!-- tooltip end -->
For example, instead of:</p>
<pre> **
  try {
      foo();
  } catch (Exception e) {
      System.out.println(e);
  }
** </pre>
use the following code:</p>
<pre> **
  try {
      foo();
  } catch (Exception e) {
      logger.warn(e); // logger call may be different
  }
** </pre>

" ></outline><outline text="Call to 'printStackTrace()'" _note="
Reports calls to  **Throwable.printStackTrace()**  without arguments.
Such statements are often used for temporary debugging and should be either removed from the production code
  or replaced with a more robust logging facility.</p>
<!-- tooltip end -->
" ></outline><outline text="Call to 'Thread.dumpStack()'" _note="
Reports usages of  **Thread.dumpStack()** .
Such statements are often used for temporary debugging and should be either removed from the production code
  or replaced with a more robust logging facility.</p>
<!-- tooltip end -->
" ></outline><outline text="Commented out code" _note="
Reports comments that contain Java code.
Usually, code that is commented out gets outdated very quickly and becomes misleading.
As most projects use some kind of version control system,
  it is better to delete commented out code completely and use the VCS history instead.</p>
<!-- tooltip end -->
<small>New in 2020.3</small>
" ></outline><outline text="Deprecated API usage" _note="
Reports usages of deprecated APIs (classes, fields, and methods), for example:  **new Thread().stop();** .
By default, the inspection doesn't produce a warning if it's impossible or hard to avoid it.  For example,
  the following code won't be reported:</p>
<pre> **
  abstract class A { //library code
     @Deprecated
     abstract void m();
  }
  class B extends A { //project code
     @Override
     void m() {
        //doSmth;
     }
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>

  Use the inspection's options to disable this inspection inside deprecated members,
  overrides of abstract deprecated methods, non-static import statements, methods of deprecated classes, or same top-level classes.
</p>

" ></outline><outline text="Deprecated member is still used" _note="
Reports deprecated classes, methods, and fields that are used in your code nonetheless.
Example:</p>
<pre> **
  class MyCode {
    @Deprecated
    void oldMethod() {}// warning: 'Deprecated member is still used'
    void newMethod() {
      oldMethod(); // forgotten usage
    }
  }
** </pre>
Usages within deprecated elements are ignored.</p>
 **NOTE:**  Due to performance reasons, a non-private member is checked only when its name rarely occurs in the project.</p>
" ></outline><outline text="Inspection suppression annotation" _note="
Reports comments or annotations suppressing inspections.
This inspection can be useful when leaving suppressions intentionally for further review.</p>
 **Example:** </p>
<pre> **
    @SuppressWarnings('unused')
    static Stream&lt;String&gt; stringProvider() {
        return Stream.of('foo', 'bar');
    }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Usage of API marked for removal" _note="
Reports usages of deprecated APIs (classes, fields, and methods) that are marked for removal with
   **@Deprecated( **forRemoval** =true)** .
<!-- tooltip end -->

  The code that uses an API marked for removal may cause a runtime error with a future version of the API. That is why
  the recommended severity for this inspection is <i>Error</i>.</p>

  You can change the severity to <i>Warning</i> if you want to use the same code highlighting as in ordinary deprecation.</p>
<small>New in 2017.3</small></p>

" ></outline><outline text="Use of obsolete collection type" _note="
Reports usages of  **java.util.Vector** ,  **java.util.Hashtable**  and  **java.util.Stack** .
Usages of these classes can often be replaced with usages of
 **java.util.ArrayList** ,  **java.util.HashMap**  and  **java.util.ArrayDeque**  respectively.
While still supported,
the former classes were made obsolete by the JDK1.2 collection classes, and should probably
not be used in new development.
<!-- tooltip end -->

Use the  **Ignore obsolete collection types where they are required**  option to ignore any cases where the obsolete collections are used
as method arguments or assigned to a variable that requires the obsolete type.
Enabling this option may consume significant processor resources.</p>
" ></outline><outline text="Use of obsolete date-time API" _note="
Reports usages of  **java.util.Date** ,  **java.util.Calendar** ,  **java.util.GregorianCalendar** ,  **java.util.TimeZone** ,
and  **java.util.SimpleTimeZone** .
While still supported, these classes were made obsolete by the JDK8 Date-Time API and should probably
  not be used in new development.</p>
<!-- tooltip end -->
" ></outline><outline text="Use of System.out or System.err" _note="
Reports usages of  **System.out**  or  **System.err** .
Such statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust
  logging facility.</p>
<!-- tooltip end -->
" ></outline></outline><outline text="Code style issues" ><outline text="'assert' message is not a string" _note="
Reports  **assert**  messages that are not of the  **java.lang.String**  type.
Using a string provides more information to help diagnose the failure
  or the assertion reason.</p>
 **Example:** </p>
<pre> **
  void foo(List&lt;Integer&gt; myList) {
    assert myList.isEmpty() : false;
  }
** </pre>
<!-- tooltip end -->

Use the  **Only warn when the  **assert**  message type is 'boolean' or 'java.lang.Boolean'**  option to only warn when the  **assert**  message type is  **boolean**  or  **java.lang.Boolean** .
A  **boolean**  detail message is unlikely to provide additional information about an assertion failure
  and could result from a mistakenly entered  **:**  instead of  **&** .

" ></outline><outline text="'equals()' called on enum value" _note="
Reports  **equals()**  calls on enum constants.
Such calls can be replaced by an identity comparison ( **==** ) because two
  enum constants are equal only when they have the same identity.</p>
A quick-fix is available to change the call to a comparison.</p>
 **Example:** </p>
<pre> **
  boolean foo(MyEnum value) {
    return value.equals(MyEnum.FOO);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  boolean foo(MyEnum value) {
    return value == MyEnum.FOO;
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'if' statement can be replaced with conditional or boolean expression" _note="
Reports  **if**  statements that can be replaced with conditions using the  **&&** ,  **||** ,
 **==** ,  **!=** , or  **?:**  operator.
The result is usually shorter, but not always clearer, so it's not advised to apply the fix  in every case.</p>
Example:</p>
<pre> **
  if (condition) return true; else return foo;
** </pre>
After the quick-fix is applied:</p>
<pre> **
  return condition || foo;
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
<li>
  Use the  **Don't suggest '?:' operator**  option to disable the warning when the  **?:**  operator is suggested. In this case, only
   **&&** ,  **||** ,  **==** , and  **!=**  suggestions will be highlighted. The
  quick-fix will still be available in the editor.
</li>
<li>
  Use the  **Ignore chained 'if' statements**  option to disable the warning for  **if-else**  chains. The quick-fix will
  still be available in the editor.
</li>
</ul>
<small>New in 2018.2</small></p>
" ></outline><outline text="'List.indexOf()' expression can be replaced with 'contains()'" _note="
Reports any  **List.indexOf()** 
expressions that can be replaced with the 
   **List.contains()**  method.
Example:</p>
<pre> **
  boolean hasEmptyString(List&lt;String&gt; list) {
    // Warning: can be simplified
    return list.indexOf('') &gt;= 0;
  }
** </pre>
The provided quick-fix replaces the  **indexOf**  call with the  **contains**  call:</p>
<pre> **
  boolean hasEmptyString(List&lt;String&gt; list) {
    // Quick-fix is applied
    return list.contains('');
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'Optional' can be replaced with sequence of 'if' statements" _note="
Reports  **Optional**  call chains that can be replaced with a sequence of  **if**  statements.
Example:</p>
<pre> **
  return Optional.ofNullable(name)
    .map(this::extractInitials)
    .map(initials -> initials.toUpperCase(Locale.ENGLISH))
    .orElseGet(this::getDefault);
** </pre>
After the quick-fix is applied:</p>
<pre> **
  if (name != null) {
    String initials = extractInitials(name);
    if (initials != null) return initials.toUpperCase(Locale.ENGLISH);
  }
  return getDefault();
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 8 or higher.</p>
<small>New in 2020.2</small></p>
" ></outline><outline text="'Optional' contains array or collection" _note="
Reports  **java.util.Optional**  or  **com.google.common.base.Optional**  types with an array or collection type parameter.
In such cases, it is more clear to just use an empty array or collection to indicate the absence of result.</p>
 **Example:** </p>
<pre> **
  Optional&lt;List&lt;Integer&gt;&gt; foo() {
    return Optional.empty();
  }
** </pre>
This code could look like:</p>
<pre> **
  List&lt;Integer&gt; foo() {
    return new List&lt;&gt;();
  }
  ** </pre>
<!-- tooltip end -->
" ></outline><outline text="'return' separated from the result computation" _note="
Reports  **return**  statements that return a local variable where the value of the variable is computed
somewhere else within the same method.
The quick-fix inlines the returned variable by moving the return statement to the location in which the value
  of the variable is computed.
  When the returned value can't be inlined into the  **return**  statement, 
  the quick-fix attempts to move the return statement as close to the computation of the returned value as possible.</p>
Example:</p>
<pre> **
  int n = -1;
  for (int i = 0; i &lt; a.length; i++) {
    if (a[i] == b) {
      n = i;
      break;
    }
  }
  return n;
** </pre>
After the quick-fix is applied:</p>
<pre> **
  int n = -1;
  for (int i = 0; i &lt; a.length; i++) {
    if (a[i] == b) {
      return i;
    }
  }
  return n;
** </pre>
" ></outline><outline text="'size() == 0' can be replaced with 'isEmpty()'" _note="
Reports  **.size()**  or  **.length()** 
comparisons with a  **0**  literal that can be replaced with a call to  **.isEmpty()** .
 **Example:** </p>
<pre> **
  boolean emptyList = list.size() == 0;
** </pre>
After the quick-fix is applied:</p>
<pre> **
  boolean emptyList = list.isEmpty();
  ** </pre>
<!-- tooltip end -->

  Use the  **Ignored classes**  table to add classes for which any  **.size()**  or  **.length()**  comparisons should not be replaced.
</p>
Use the  **Ignore expressions which would be replaced with  **!isEmpty()** **  option to ignore any expressions which would be replaced with  **!isEmpty()** .
</p>
" ></outline><outline text="'try' statement with multiple resources can be split" _note="
Reports  **try**  statements with multiple resources that can be automatically split into
  multiple try-with-resources statements.
This conversion can be useful for further refactoring
(for example, for extracting the nested  **try**  statement into a separate method). </p>
Example:</p>
<pre> **
  try (FileInputStream in = new FileInputStream('in.txt');
     FileOutputStream out = new FileOutputStream('out.txt')) {
     /*read and write*/
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  try (FileInputStream in = new FileInputStream('in.txt')) {
    try (FileOutputStream out = new FileOutputStream('out.txt')) {
      /*read and write*/
    }
  }
** </pre>

" ></outline><outline text="Array can be replaced with enum values" _note="
Reports arrays of enum constants that can be replaced with a call to  **EnumType.values()** .
Usually, when updating such an enum, you have to update the array as well. However, if you use  **EnumType.values()** 
 instead, no modifications are required.</p>
Example:</p>
<pre> **
  enum States {
     NOT_RUN, IN_PROGRESS, FINISHED;
  }
  
  handleStates(new States[] {NOT_RUN, IN_PROGRESS, FINISHED});
** </pre>
After the quick-fix is applied:</p>
<pre> **
  handleStates(States.values());
** </pre>
<small>New in 2019.1</small></p>
" ></outline><outline text="Array creation without 'new' expression" _note="
Reports array initializers without  **new**  array expressions and suggests adding them.
Example:</p>
<pre> **
  int[] a = {42}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  int[] a = new int[]{42}
** </pre>

" ></outline><outline text="Assignment can be joined with declaration" _note="
Reports variable assignments that can be joined with a variable declaration.
Example:</p>
<pre> **
  int x;
  x = 1;
** </pre>
The quick-fix converts the assignment into an initializer:</p>
<pre> **
  int x = 1;
** </pre>
<!-- tooltip end -->
<small>New in 2018.3</small></p>
" ></outline><outline text="Block marker comment" _note="
Reports comments which are used as code block markers.
The quick-fix removes such comments.
Example:</p>
<pre> **
  while (i &lt; 10) {
    i++;
  } // end while
** </pre>
After the quick-fix is applied:</p>
<pre> **
  while (i &lt; 10) {
    i++;
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="C-style array declaration" _note="
Reports array declarations written in C-style syntax in which the array indicator brackets
  are placed after the variable name or after the method parameter list.
Example:</p>
<pre> **
   **public**  String process(String value[])[] {
    return value;
  }
** </pre>
Most code styles prefer Java-style array declarations in which the array indicator brackets are attached to the type name, for example:</p>
<pre> **
   **public**  String[] process(String[] value) {
    return value;
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>

Use the  **Ignore C-style declarations in variables**  option to report C-style array declaration of method return types only.

" ></outline><outline text="Call to 'String.concat()' can be replaced with '+'" _note="
Reports calls to  **java.lang.String.concat()** .

  Such calls can be replaced with the  **+**  operator for clarity and possible increased
  performance if the method was invoked on a constant with a constant argument.</p>
 **Example:** </p>
<pre> **
  String foo(String name) {
    return name.concat('foo');
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String foo(String name) {
    return name + 'foo';
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Can use bounded wildcard" _note="
Reports generic method parameters that can make use of <a href='https://en.wikipedia.org/wiki/Wildcard_(Java)'>bounded wildcards</a>.
 **Example:** </p>
<pre> **
  void process(Consumer&lt;Number&gt; consumer);
** </pre>
should be replaced with:</p>
<pre> **
  void process(Consumer&lt;? super Number&gt; consumer);
** </pre>

  This method signature is more flexible because it accepts more types: not only
   **Consumer&lt;Number&gt;** , but also  **Consumer&lt;Object&gt;** .
</p>
Likewise, type parameters in covariant position:</p>
<pre> **
  T produce(Producer&lt;T&gt; p);
** </pre>
should be replaced with:</p>
<pre> **
  T produce(Producer&lt;? extends T&gt; p);
** </pre>
<!-- tooltip end -->

  To quote <a href='https://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java'>Joshua Bloch</a> in <em>Effective Java</em> third Edition:
</p>
<blockquote>
  <h4>Item 31: Use bounded wildcards to increase API flexibility</h4>
  Using wildcard types in your APIs, while tricky, makes the APIs far more flexible.
  If you write a library that will be widely used, the proper use of wildcard types should be considered mandatory.
  Remember the basic rule: producer-extends, consumer-super (PECS).
  Also remember that all Comparables and Comparators are consumers.
</blockquote>

  Use the inspection options to toggle the reporting for:
</p>
<ul>
  <li>
    
      invariant classes. An example of an invariant class is  **java.util.List&lt;T&gt;**  because it both accepts values
      (via the  **List.add(T)**  method)
      and produces values (via the  **T List.get()**  method).
    </p>
    
      On the
      other hand,  **contravariant**  classes only receive values, for example,  **java.util.function.Consumer&lt;T&gt;** 
      with the only method  **accept(T)** . Similarly,  **covariant**  classes
      only produce values, for example,  **java.util.function.Supplier&lt;T&gt;** 
      with the only method  **T get()** .
    </p>
    
      People often use bounded wildcards in covariant/contravariant
      classes but avoid wildcards in invariant classes, for example,  **void process(List&lt;? extends T&gt; l)** .
      Disable this option to ignore such invariant classes and leave them rigidly typed, for example,  **void
      process(List&lt;T&gt; l)** .
    </p>
  </li>
  <li>
    
       **private**  methods, which can be considered as not a part of the public API
    </p>
  </li>
  <li>
    
      instance methods
    </p>
  </li>
</ul>
" ></outline><outline text="Chained equality comparisons" _note="
Reports chained equality comparisons.
Such comparisons may be confusing:  **a == b == c**  means  **(a == b) == c** ,
  but possibly  **a == b && a == c**  is intended.</p>
 **Example:** </p>
<pre> **
  boolean chainedEquality(boolean a, boolean b, boolean c) {
    return a == b == c;
  }
** </pre>
You can use parentheses to make the comparison less confusing:</p>
<pre> **
  boolean chainedEquality(boolean a, boolean b, boolean c) {
    return (a == b) == c;
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Chained method calls" _note="
Reports method calls whose target is another method call.
The quick-fix suggests to introduce a local variable.
 **Example:** </p>
<pre> **
  class X {
    int foo(File f) {
      return f.getName().length();
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class X {
    int foo(File f) {
      final String name = f.getName();
      return name.length();
    }
  }
** </pre>
<!-- tooltip end -->
Use the inspection options to toggle warnings for the following cases:</p>
<ul>
  <li>
    
      chained method calls in field initializers,
      for instance,  **private final int i = new Random().nextInt();** 
    </p>
  </li>
  <li>
    
      chained method calls operating on the same type,
      for instance,  **new StringBuilder().append('x: ').append(new X()).append('y: ').append(new Y()).toString();** .
    </p>
  </li>
</ul>

" ></outline><outline text="Class explicitly extends 'java.lang.Object'" _note="
Reports any classes that are explicitly declared to extend  **java.lang.Object** .
Such declaration is redundant and can be safely removed.</p>
Example:</p>
<pre> **
  class MyClass extends Object {
  }
** </pre>
The quick-fix removes the redundant  **extends Object**  clause:</p>
<pre> **
  class MyClass {
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Code block contains single statement" _note="
Reports control flow statements with a single statement in their code block and
suggests removing the braces from the control flow statement body.
Example:</p>
<pre> **
  if (x > 0) {
    System.out.println('x is positive');
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  if (x > 0) System.out.println('x is positive');
** </pre>

" ></outline><outline text="Conditional can be replaced with Optional" _note="
Reports null-check conditions and suggests replacing them with  **Optional**  chains.
Example:</p>
<pre> **
  return str == null ? '' : str.trim();
** </pre>
After applying the quick-fix:</p>
<pre> **return Optional.ofNullable(str).map(String::trim).orElse('');
** </pre>
While the replacement is not always shorter, it could be helpful for further refactoring
  (for example, for changing the method return value to  **Optional** ).</p>
Note that when a not-null branch of the condition returns null, the corresponding mapping step will
  produce an empty  **Optional**  possibly changing the semantics. If it cannot be statically
  proven that semantics will be preserved, the quick-fix action name will contain the '(may change semantics)'
  notice, and the inspection highlighting will be turned off.</p>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 8 or higher.</p>
<small>New in 2018.1</small></p>
" ></outline><outline text="Confusing octal escape sequence" _note="
Reports string literals containing an octal escape sequence immediately followed by
a digit.
Such strings may be confusing, and are often the result of errors in escape code creation.</p>
 **Example:** </p>
<pre> **
  System.out.println('\1234'); // Octal escape sequence '\123' immediately followed by a digit
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Constant expression can be evaluated" _note="
Reports compile-time constant expressions and suggests replacing them with their
  actual values. For example, you will be prompted to replace '2 + 2' with '4'.
<!-- tooltip end -->
<small>New in 2018.1</small></p>
" ></outline><outline text="Constant on wrong side of comparison" _note="
Reports comparison operations where the constant value is on the wrong side.
Some coding conventions specify that constants should be on a specific side of a comparison, either left or right.</p>
 **Example:** </p>
<pre> **
  boolean compare(int x) {
    return 1 &gt; x; // Constant '1' on the left side of the comparison
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  boolean compare(int x) {
    return x &lt; 1;
  }
** </pre>
<!-- tooltip end -->

  Use the inspection settings to choose the side of constants in comparisons
  and whether to warn if  **null**  literals are on the wrong side.
</p>
<small>New in 2019.2</small></p>
" ></outline><outline text="Control flow statement without braces" _note="
Reports any  **if** ,  **while** , or  **for**  statements without braces.
Braces make the code easier to read and help prevent errors.</p>
Example:</p>
<pre> **
  if (x &gt; 0) System.out.println('x is positive');
** </pre>
The quick-fix wraps the statement body with braces:</p>
<pre> **
  if (x &gt; 0) {
    System.out.println('x is positive');
  }
** </pre>
" ></outline><outline text="Diamond can be replaced with explicit type arguments" _note="
Reports instantiation of generic classes in which the  **&lt;&gt;**  symbol (diamond) is used instead of
  type parameters.

The quick-fix replaces  **&lt;&gt;**  (diamond) with explicit type parameters.
  This action can be useful to make the code compatible with Java 6.</p>
Example:</p>
<pre> **List &lt;String&gt; list = new ArrayList&lt;&gt;()** </pre>
After the quick-fix is applied:</p>
<pre> **List &lt;String&gt; list = new ArrayList&lt;String&gt;()** </pre>
" ></outline><outline text="Field assignment can be moved to initializer" _note="
Suggests replacing initializations of a field via assignment with field initializers.
The code is highlighted only if the field initializer is located in the initializer, and
  joining it with the field declaration is likely to be safe.
  In other cases, the inspection provides a quick-fix without code highlighting, as the fix may change the code semantics.</p>
Example:</p>
<pre> **
  class MyClass {
    static final int intConstant;
    
    static {
      intConstant = 10;
    }
  }
** </pre>
The quick fix moves the assigned value to the field initializer removing the class initializer section if possible:
<pre> **
  class MyClass {
    static final int intConstant = 10;
  }
** </pre>
<!-- tooltip end -->
<small>Since 2017.2</small>
" ></outline><outline text="Field may be 'final'" _note="
Reports any fields that can be safely made  **final** .
Using the  **final**  variable makes code more error-prone. It may also be helpful for compiler optimisations
  that make your program run faster.</p>
A field may be safely made  **final**  only if it has the  **private**  access modifier
  (or it is defined in a local / anonymous class) and:
<ul>
  <li>It is  **static**  and initialized either in its declaration or in one static class initializer.</li>
  <li>It is non-static and initialized either in its declaration or in one non-static class initializer or in all constructors.</li>
</ul>
<!-- tooltip end -->

" ></outline><outline text="Implicit call to 'super()'" _note="
Reports constructors that do not begin with a call to 'super' constructor or
another constructor of the same class.
Such constructors can be thought of as implicitly beginning with a
  call to  **super()** . Some coding standards prefer that such calls to
   **super()**  be made explicitly.</p>
 **Example:** </p>
<pre> **
  class Foo {
    Foo() {}
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    Foo() {
      super();
    }
  }
** </pre>
<!-- tooltip end -->

  Use the inspection settings to ignore classes extending directly from  **Object** .
  For instance:
</p>
<pre> **
  class Foo {
    Foo() {} // Not reported
  }
  class Bar extends Foo {
    Bar() {} // Implicit call to 'super()'
  }
** </pre>
" ></outline><outline text="Instance field access not qualified with 'this'" _note="
Reports field access operations that are not qualified with  **this**  or some other qualifier.

  Some coding styles mandate that all field access operations are qualified to prevent confusion with local
  variable or parameter access.
</p>
 **Example:** </p>
<pre> **
  class Foo {
    int foo;
    void bar() {
      foo += 1;
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    int foo;
    void bar() {
      this.foo += 1;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Instance method call not qualified with 'this'" _note="
Reports calls to non- **static**  methods on the same instance that are not qualified with  **this** .
 **Example:** </p>
<pre> **
  class Foo {
    void bar() {}
    void foo() {
      bar();
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    void bar() {}
    void foo() {
      this.bar();
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Labeled switch rule can have code block" _note="
Reports rules of  **switch**  expressions or enhanced  **switch**  statements with an expression body.
These can be converted to code blocks.
Example:</p>
<pre> **
  String message = switch (errorCode) {
    case 404 -> 'Not found!';
    ...
  };
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String message = switch (errorCode) {
    case 404 -> {
                yield 'Not found!';
            }
    ...
  };
** </pre>
<!-- tooltip end -->
The inspection only reports if the language level of the project or module is 14 or higher.</p>
<small>New in 2019.1</small></p>
" ></outline><outline text="Labeled switch rule has redundant code block" _note="
Reports labeled rules of  **switch**  statements or  **switch**  expressions that have a redundant code block.
Example:</p>
<pre> **
  String s = switch (n) {
    case 1 -> { yield Integer.toString(n); }
    default -> 'default';
  };
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String s = switch (n) {
    case 1 -> Integer.toString(n);
    default -> 'default';
  };
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 14 or higher.</p>
<small>New in 2019.1</small></p>
" ></outline><outline text="Lambda body can be code block" _note="
Reports lambdas whose body is an expression and suggests converting expression bodies to code blocks.
Example:</p>
<pre> **
  n&nbsp;-&gt;&nbsp;n&nbsp;+&nbsp;1
** </pre>
After the quick-fix is applied:</p>
<pre> **n -&gt; {
  return n + 1;
}** </pre>
" ></outline><outline text="Lambda can be replaced with anonymous class" _note="
Reports lambda expressions that can be replaced with anonymous classes.

  Expanding lambda expressions to anonymous classes may be useful if you need to implement other
  methods inside an anonymous class or if you need to downgrade to one of the previous Java versions.
</p>
Example:</p>
<pre> **
  s -> System.out.println(s)
** </pre>
After the quick-fix is applied:</p>
<pre> **new Consumer&lt;String&gt;() {
  @Override
  public void accept(String s) {
    System.out.println(s);
  }
}** </pre>
<!-- tooltip end -->
This inspection is available in Java 8 and later.</p>
" ></outline><outline text="Lambda parameter type can be specified" _note="
Reports lambda parameters that do not have their type specified and suggests
adding the missing type declarations.
Example:</p>
<pre> **
  Function&lt;String, Integer&gt; length = a -&gt; a.length();
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Function&lt;String, Integer&gt; length = (String a) -&gt; a.length();
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 8 or higher.</p>
" ></outline><outline text="Local variable or parameter can be final" _note="
Reports parameters or local variables found in the specified inspection
scope to which the  **final**  modifier can be added.
Example:</p>
<pre> **
  ArrayList&lt;Integer&gt; list = new ArrayList();
  fill(list);
  return list;
** </pre>
After the quick-fix is applied:</p>
<pre> **
  final ArrayList&lt;Integer&gt; list = new ArrayList();
  fill(list);
  return list;
** </pre>
<!-- tooltip end -->

  Use the inspection's options to define whether parameters or local variables should be reported.
</p>

" ></outline><outline text="Method reference can be replaced with lambda" _note="
Reports method references, like  **MyClass::myMethod**  and  **myObject::myMethod** ,
  and suggests replacing them with an equivalent lambda expression.
Lambda expressions can be easier to modify than method references.</p>
Example:</p>
<pre> **
  System.out::println
** </pre>
After the quick-fix is applied: </p>
<pre> **
  s -&gt; System.out.println(s)
** </pre>
<!-- tooltip end -->
By default, this inspection does not highlight the code in the editor, but only provides a quick-fix.</p>
" ></outline><outline text="Missorted modifiers" _note="
Reports declarations whose modifiers are not in the canonical
preferred order (as stated in the Java Language Specification).
 **Example:** </p>
<pre> **
  class Foo {
    native public final void foo();
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    public final native void foo();
  }
** </pre>
<!-- tooltip end -->
Use the inspection settings to:</p>
<ul>
  <li>
    
      toggle the reporting of misplaced annotations:
      (annotations with  **ElementType.TYPE_USE**  <em>not</em> directly
      before the type and after the modifier keywords, or
      other annotations <em>not</em> before the modifier keywords).
      When this option is disabled, any annotation can be positioned before or after the modifier keywords.
      Modifier lists with annotations in between the modifier keywords will always be reported.
    </p>
  </li>
  <li>
    
      specify whether the  **ElementType.TYPE_USE**  annotation should be positioned directly before
      a type, even when the annotation has other targets specified.
    </p>
  </li>
</ul>

" ></outline><outline text="Multi-catch can be split into separate catch blocks" _note="
Reports multi- **catch**  sections and suggests splitting them into separate  **catch**  blocks.
Example:</p>
<pre> **
  try {
    int i = getIndex();
  } catch (NullPointerException|IndexOutOfBoundsException e) {
    e.printStackTrace();
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  try {
    int i = getIndex();
  } catch (NullPointerException e) {
    e.printStackTrace();
  } catch (IndexOutOfBoundsException e) {
    e.printStackTrace();
  }
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 7 or higher.</p>

" ></outline><outline text="Multiple operators with different precedence" _note="
Reports binary, conditional, or  **instanceof**  expressions that consist of different operators
without parentheses. Such expressions can be less readable due to different precedence rules of operators.
Example:</p>
<pre> **
  int n = 3 + 9 * 8 + 1;
** </pre>
After quick-fix is applied:</p>
<pre> **
  int n = 3 + (9 * 8) + 1;
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Multiple variables in one declaration" _note="
Reports multiple variables that are declared in a single declaration and suggest
creating a separate declaration for each variable.
Some coding standards prohibit such declarations.</p>
Example:</p>
<pre> **
  int x = 1, y = 2;
** </pre>
After the quick-fix is applied:</p>
<pre> **
  int x = 1;
  int y = 2;
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
<li>Use the  **Ignore 'for' loop declarations**  option to ignore multiple variables declared in the initialization of a 'for' loop statement, for example:
<pre> **
   **for**  (int i = 0, max = list.size(); i &gt; max; i++) {}
** </pre>
</li>
<li>Use the  **Only warn on different array dimensions in a single declaration**  option to only warn when variables with different array dimensions are declared in a single declaration, for example:
<pre> **
  String s = '', array[];
** </pre>
</li>
</ul>
<small>New in 2019.2</small></p>
" ></outline><outline text="Nested method call" _note="
Reports method calls used as parameters to another method call.
The quick-fix introduces a variable to make the code simpler and easier to debug.</p>
 **Example:** </p>
<pre> **
  public int y() { return 1; }
  public int f(int x) { return 2 * x; }
  public void foo() {
      int x = f(y());
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  public int y() { return 1; }
  public int f(int x) { return 2 * x; }
  public void foo() {
      int y = y();
      int x = f(y);
  }
** </pre>
<!-- tooltip end -->

Use the inspection options to toggle the reporting of:
</p>
<ul>
  <li>method calls in field initializers</li>
  <li>calls to static methods</li>
  <li>calls to simple getters</li>
</ul>

" ></outline><outline text="Non functional style 'Optional.isPresent()' usage" _note="
Reports conditions, like  **if(Optional.isPresent())** , that can be rewritten in the functional style,
as it is shorter and easier to read.
Example:</p>
<pre> **
  if (str.isPresent()) str.get().trim();
** </pre>
After the quick-fix is applied:</p>
<pre> **
  str.ifPresent(String::trim);
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 8 or higher.</p>
" ></outline><outline text="Non-normalized annotation" _note="
Reports annotations in a shorthand form and suggests rewriting them in a normal form with an attribute name.
Example:</p>
<pre> **
  @SuppressWarnings('foo')
** </pre>
After the quick-fix is applied:</p>
<pre> **
  @SuppressWarnings(value = 'foo')
** </pre>

" ></outline><outline text="Null value for Optional type" _note="
Reports  **null**  assigned to  **Optional**  variable or returned from method returning  **Optional** .
It's recommended that you use  **Optional.empty()**  (or  **Optional.absent()**  for Guava) to denote an empty value.</p>
Example:</p>
<pre> **
  Optional&lt;Integer&gt; foo(boolean flag) {
    return flag ? Optional.of(42) : null;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Optional&lt;Integer&gt; foo(boolean flag) {
    return flag ? Optional.of(42) : Optional.empty();
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>

  Use the  **Report comparison of Optional with null**  option to also report comparisons like  **optional == null** . While in rare cases (e.g. lazily initialized
  optional field) this might be correct, optional variable is usually never null, and probably  **optional.isPresent()**  was
  intended.
</p>
This inspection only reports if the language level of the project or module is 8 or higher.</p>
<small>New in 2017.2</small>
" ></outline><outline text="Objects.equals() can be replaced with equals()" _note="
Reports calls to  **Objects.equals(a, b)**  in which the first argument is statically known to be non-null.
Such a call can be safely replaced with  **a.equals(b)**  or  **a == b**  if both arguments are primitives.</p>
Example:</p>
<pre> **
  String defaultName = 'default';
  boolean isDefault = Objects.equals(defaultName, name);
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String defaultName = 'default';
  boolean isDefault = defaultName.equals(name);
** </pre>
<!-- tooltip end -->
<small>New in 2018.3</small></p>
" ></outline><outline text="Record can be converted to class" _note="
Reports record classes and suggests converting them to ordinary classes.
This inspection makes it possible to move a Java record to a codebase using an earlier Java version
  by applying the quick-fix to this record.</p>

  Note that the resulting class is not completely equivalent to the original record:
</p>
<ul>
  <li>The resulting class no longer extends  **java.lang.Record** ,
    so  **instanceof Record**  returns  **false** .</li>
  <li>Reflection methods like  **Class.isRecord()**  and
     **Class.getRecordComponents()**  produce different results.</li>
  <li>The generated  **hashCode()**  implementation may produce a different result
    because the formula to calculate record  **hashCode**  is deliberately not specified.</li>
  <li>Record serialization mechanism differs from that of an ordinary class.
    Refer to <i>Java Object Serialization Specification</i> for details.</li>
</ul>
<!-- tooltip end -->
Example:</p>
<pre> **
  record Point(int x, int y) {}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  final class Point {
    private final int x;
    private final int y;
    Point(int x, int y) {
      this.x = x;
      this.y = y;
    }
    public int x() { return x; }
    public int y() { return y; }
    @Override
    public boolean equals(Object obj) {
      if (obj == this) return true;
      if (obj == null || obj.getClass() != this.getClass()) return false;
      var that = (Point)obj;
      return this.x == that.x &&
             this.y == that.y;
    }
    @Override
    public int hashCode() {
      return Objects.hash(x, y);
    }
    @Override
    public String toString() {
      return 'Point[' +
             'x=' + x + ', ' +
             'y=' + y + ']';
    }
  }
** </pre>
This inspection only reports if the language level of the project or module is 15 preview or higher.</p>
<small>New in 2020.3</small></p>
" ></outline><outline text="Redundant 'new' expression in constant array creation" _note="
Reports constant new array expressions that can be replaced with an array initializer. Array initializers can omit the type because
it is already specified in the left side of the assignment.
 **Example:** </p>
<pre> **
  int[] foo = new int[] {42};
** </pre>
After the quick-fix is applied:</p>
<pre> **
  int[] foo = {42};
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Redundant field initialization" _note="
Reports fields explicitly initialized to their default values.
 **Example:** </p>
<pre> **
  class Foo {
    int foo = 0;
    List bar = null;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    int foo;
    List bar;
  }
** </pre>
<!-- tooltip end -->

  Use the inspection settings to only report explicit  **null**  initialization, for example:
</p>
<pre> **
  class Foo {
    int foo = 0;     // no warning
    List bar = null; // redundant field initialization warning
  }
** </pre>
" ></outline><outline text="Redundant no-arg constructor" _note="
Reports unnecessary constructors.

  A constructor is unnecessary if it is the only constructor of a class, has no parameters,
  has the same access modifier as its containing class,
  and does not perform any initialization except explicitly or implicitly calling the superclass constructor without arguments.
  Such a constructor can be safely removed as it will be generated by the compiler even if not specified.</p>
 **Example:** </p>
<pre> **
  public class Foo {
    public Foo() {}
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  public class Foo {}
** </pre>
<!-- tooltip end -->

Use the inspection settings to ignore unnecessary constructors that have an annotation.


" ></outline><outline text="Return of 'this'" _note="
Reports methods returning  **this** .

  While such a return is valid, it is rarely necessary, and usually indicates that the method is intended to be used
  as part of a chain of similar method calls (for example,  **buffer.append('foo').append('bar').append('baz')** ).
  Such chains are frowned upon by many coding standards.
</p>
 **Example:** </p>
<pre> **
  public Builder append(String str) {
    // [...]
    return this;
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Same file subclasses are missing from permits clause of a sealed class" _note="
Reports sealed classes whose permits clauses do not contain some of the subclasses from the same file.
Example:</p>
<pre> **
  sealed class A {}
  final class B extends A {}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  sealed class A permits B {}
  final class B extends A {}
** </pre>
<!-- tooltip end -->
<small>New in 2020.3</small></p>
" ></outline><outline text="Simplifiable annotation" _note="
Reports annotations that can be simplified to their 'single element'
or 'marker' shorthand form.
Annotations that contain whitespace between the @-sign and the name
  of the annotation are also reported.</p>
 **Example:** </p>
<pre> **
  @interface Foo { String[] value(); }
  @ Foo({'foo'})
  public String name;
** </pre>
After the quick-fix is applied:</p>
<pre> **
  @interface Foo { String[] value(); }
  @Foo('foo')
  public String name;
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Standard 'Charset' object can be used" _note="
Reports methods and constructors in which constant charset  **String**  literal (for example,  **'UTF-8'** ) can be replaced with
the predefined  **StandardCharsets.UTF_8**  code.
The code after the fix may work faster, because the charset lookup becomes unnecessary.
  Also, catching  **UnsupportedEncodingException**  may become unnecessary as well. In this case,
  the catch block will be removed automatically.</p>
Example:</p>
<pre> **
  try {
    byte[] bytes = 'str'.getBytes('UTF-8');
  } catch (UnsupportedEncodingException e) {
  }
** </pre>
After quick-fix is applied:</p>
<pre> **
  byte[] bytes = 'str'.getBytes(StandardCharsets.UTF_8);
** </pre>
<!-- tooltip end -->
The inspection is available in Java 7 and later.</p>
<small>New in 2018.2</small></p>
" ></outline><outline text="Stream API call chain can be replaced with loop" _note="
Reports Stream API chains,  **Iterable.forEach** , and  **Map.forEach**  calls that can be automatically converted into classical loops.
Example:</p>
<pre> **
  String joinNonEmpty(List&lt;String&gt; list) {
    return list.stream() // Stream can be converted to loop
      .filter(s -> !s.isEmpty())
      .map(String::trim)
      .collect(Collectors.joining(', '));
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String joinNonEmpty(List&lt;String&gt; list) {
    StringJoiner joiner = new StringJoiner(', ');
    for (String s : list) {
      if (!s.isEmpty()) {
        String trim = s.trim();
        joiner.add(trim);
      }
    }
    return joiner.toString();
  }
** </pre>

  Note that sometimes this inspection might cause slight semantic changes.
  Special care should be taken when it comes to short-circuiting, as it's not specified how many elements will be actually read when
  the stream short-circuits.
</p>
<!-- tooltip end -->
Configure the inspection:</p>
Use the  **Iterate unknown Stream sources via Stream.iterator()**  option to suggest conversions for streams with unrecognized source.
  In this case, iterator will be created from the stream.
  For example, when checkbox is selected, the conversion will be suggested here:</p>
<pre> **
  List&lt;ProcessHandle&gt; handles = ProcessHandle.allProcesses().collect(Collectors.toList());** </pre>
In this case, the result will be as follows:</p>
<pre> **
  List&lt;ProcessHandle&gt; handles = new ArrayList&lt;&gt;();
  for (Iterator&lt;ProcessHandle&gt; it = ProcessHandle.allProcesses().iterator(); it.hasNext(); ) {
    ProcessHandle allProcess = it.next();
    handles.add(allProcess);
  }
** </pre>
<small>New in 2017.1</small></p>
" ></outline><outline text="String literal may be 'equals()' qualifier" _note="
Reports  **String.equals()**  or  **String.equalsIgnoreCase()**  calls
with a string literal argument.
Some coding standards specify that string literals should be the qualifier of  **equals()** , rather than
  argument, thus minimizing  **NullPointerException** -s.</p>
A quick-fix is available to exchange the literal and the expression.</p>
 **Example:** </p>
<pre> **
  boolean isFoo(String value) {
    return value.equals('foo');
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  boolean isFoo(String value) {
    return 'foo'.equals(value);
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Subsequent steps can be fused into Stream API chain" _note="
Detects transformations outside a Stream API chain that could be incorporated into it.
Example:</p>
<pre> **
  List&lt;String&gt; list = stream.collect(Collectors.toList());
  list.sort(null);
  return list.toArray(new String[list.size()]);
** </pre>
After the conversion:</p>
<pre> **
  return stream.sorted().toArray(String[]::new);
** </pre>

  Note that sometimes the converted stream chain may replace explicit  **ArrayList**  with  **Collectors.toList()**  or explicit
   **HashSet**  with  **Collectors.toSet()** . The current library implementation uses these collections internally. However,
  this approach is not very reliable and might change in the future altering the semantics of your code.</p>
<!-- tooltip end -->
If you are concerned about it, use the  **Do not suggest 'toList()' or 'toSet()' collectors**  option to suggest
   **Collectors.toCollection()**  instead of  **toList**  and  **toSet**  collectors.
This inspection only reports if the language level of the project of module is 8 or higher.</p>
<!--
<small>New in 2017.3</small></p>-->
" ></outline><outline text="Type parameter explicitly extends 'java.lang.Object'" _note="
Reports type parameters and wildcard type arguments that are explicitly declared to extend  **java.lang.Object** .
Such 'extends' clauses are redundant as  **java.lang.Object**  is a supertype for all classes.</p>
 **Example:** </p>
<pre> **  class ClassA&lt;T extends Object&gt; {}
** </pre>
<!-- tooltip end -->

  If you need to preserve the 'extends Object' clause because of annotations, disable the
   **Ignore when java.lang.Object is annotated**  option.
  This might be useful, for example, when you use a nullness analyzer, and the 'extends Object' clause
  holds a  **@Nullable** / **@NotNull**  annotation.
</p>
 **Example:** </p>
<pre> **  class MyClass&lt;T extends @NotNull Object&gt; {}
** </pre>

" ></outline><outline text="Unnecessarily qualified inner class access" _note="
Reports any references to inner classes that are unnecessarily qualified with the name
of the enclosing class.
Such a qualification can be safely removed, which sometimes adds an import for the inner class.</p>
Example:</p>
<pre> **
  class X {
     X.Y foo;
     class Y{}
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class X {
     Y foo;
     class Y{}
  }
** </pre>
<!-- tooltip end -->
Use the  **Ignore references for which an import is needed**  option to ignore references to inner classes, where
  removing the qualification adds an import.

" ></outline><outline text="Unnecessarily qualified static access" _note="
Reports usages of static members qualified with the class name.

  Such qualification is unnecessary and may be safely removed.
</p>
 **Example:** </p>
<pre> **
  class Foo {
    static void foo() {}
    static int x;
    void bar() {
      Foo.foo();
      System.out.println(Foo.x);
    }
    static void baz() { Foo.foo(); }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    static void foo() {}
    static int x;
    void bar() {
      foo();
      System.out.println(x);
    }
    static void baz() { foo(); }
  }
** </pre>
<!-- tooltip end -->

  Use the inspection options to toggle the reporting for:
</p>
<ul>
  <li>
    
Static fields access:
 **void bar() { System.out.println(Foo.x); }** </p>
  </li>
  <li>
    
Calls to static methods:
 **void bar() { Foo.foo(); }** </p>
  </li>
</ul>

  Also, you can configure the inspection to only report static member usage
  in a static context. In this case, only  **static void baz() { Foo.foo(); }**  will be reported.
</p>

" ></outline><outline text="Unnecessarily qualified statically imported element" _note="
Reports usage of statically imported members qualified with
their containing class name.
Such qualification is unnecessary and can be removed
  because statically imported members can be accessed directly by member name.</p>
 **Example:** </p>
<pre> **
  import static foo.Test.WIDTH;
  class Bar {
    void bar() {
      System.out.println(Test.WIDTH);
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  import static foo.Test.WIDTH;
  class Bar {
    void bar() {
      System.out.println(WIDTH);
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unnecessary 'enum' modifier" _note="
Reports any redundant modifier on enumerated classes or its components.
Example:</p>
<pre> **
public enum UnnecessaryEnumModifier {
    Red, Green, Blue;
    static enum Inner {
        A, B, C
    }
}
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Unnecessary 'final' on local variable or parameter" _note="
Reports local variables or parameters unnecessarily declared  **final** .
Some coding standards frown upon variables declared  **final**  for reasons of terseness.</p>
 **Example:** </p>
<pre> **
  class Foo {
    Foo(Object o) {}
    void bar(final Object o) {
      new Foo(o);
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    Foo(Object o) {}
    void bar(Object o) {
      new Foo(o);
    }
  }
** </pre>
<!-- tooltip end -->

  Use the inspection options to toggle the reporting for:
</p>
<ul>
  <li>
    local variables
  </li>
  <li>
    parameters (including
    parameters of  **catch**  blocks and enhanced  **for**  statements)
  </li>
</ul>

  Also, you can configure the inspection to only report  **final**  parameters of  **abstract**  or interface
  methods, which may be considered extra unnecessary as such markings don't
  affect the implementation of these methods.
</p>

" ></outline><outline text="Unnecessary 'null' check before 'equals()' call" _note="
Reports comparisons to  **null**  that are followed by a call to  **equals()**  with a constant argument.

 **Example:** </p>
<pre> **
  if (s != null && s.equals('literal')) {}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  if ('literal'.equals(s)) {}
** </pre>
<!-- tooltip end -->

    Use the inspection settings to report  **equals()**  calls with a non-constant argument
    when the argument to  **equals()**  is proven not to be  **null** .
</p>

" ></outline><outline text="Unnecessary 'record' modifier" _note="
Reports redundant  **final** ,  **static**  modifiers on records.
Example:</p>
<pre> **
final record R() {
}
class Test {
  static record R() {
  }
}
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Unnecessary 'super' qualifier" _note="
Reports unnecessary  **super** 
qualifiers in method calls and field references.

  A  **super**  qualifier is unnecessary
  when the field or method of the superclass is not hidden/overridden in the calling class.
</p>
 **Example:** </p>
<pre> **
  class Foo {
    void foo() {}
  }
  class Bar extends Foo {
    void bar() {
      super.foo();
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    void foo() {}
  }
  class Bar extends Foo {
    void bar() {
      foo();
    }
  }
** </pre>
<!-- tooltip end -->

  Use the inspection settings to ignore qualifiers that help to distinguish superclass members access
  from the identically named members of the outer class.


  See also the following inspections:
</p>
<ul>
  <li><i>Java | Visibility | Access to inherited field looks like access to element from surrounding code</i></li>
  <li><i>Java | Visibility | Call to inherited method looks like call to local method</i></li>
</ul>
" ></outline><outline text="Unnecessary 'this' qualifier" _note="
Reports unnecessary  **this**  qualifier.

  Using  **this**  to disambiguate a code reference is discouraged by many coding styles
  and may easily become unnecessary
  via automatic refactorings.
</p>
 **Example:** </p>
<pre> **
  class Foo {
    int x;
    void foo() {
      this.x = 2;
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    int x;
    void foo() {
      x = 2;
    }
  }
** </pre>
<!-- tooltip end -->

  Use the inspection settings to ignore assignments to fields.
  For instance,  **this.x = 2;**  won't be reported, but  **int y = this.x;**  will be.

" ></outline><outline text="Unnecessary call to 'super()'" _note="
Reports calls to no-arg superclass constructors during object construction.
Such calls are unnecessary and may be removed.</p>
 **Example:** </p>
<pre> **
  class Foo {
    Foo() {
      super();
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    Foo() {
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unnecessary call to 'toString()'" _note="
Reports calls to  **toString()**  that are used in the following cases:
<ul>
  <li>In string concatenations</li>
  <li>In the  **java.lang.StringBuilder#append()**  or  **java.lang.StringBuffer#append()**  methods</li>
  <li>In the methods of  **java.io.PrintWriter**  or  **java.io.PrintStream** </li>
  <li>in the methods  **org.slf4j.Logger** </li>
</ul>
In these cases, conversion to string will be handled by the underlying library methods, and the explicit call to  **toString()**  is not needed.</p>
Example:</p>
<pre> **
  System.out.println(this.toString())
** </pre>
After the quick-fix is applied:</p>
<pre> **
  System.out.println(this)
** </pre>
<!-- tooltip end -->

  Note that without the  **toString()**  call, the code semantics might be different: if the expression is null,
  then the  **null**  string will be used instead of throwing a  **NullPointerException** .</p>
  
Use the  **Report only when qualifier is known to be not-null**  option to avoid warnings for the values that could potentially be null.
</p>
" ></outline><outline text="Unnecessary code block" _note="
Reports code blocks that are redundant to the semantics of the program and can
be replaced with their contents.
The code blocks that are the bodies of  **if** ,  **do** ,
 **while** , or  **for**  statements will not be reported by this
  inspection.</p>
Example:</p>
<pre> **
  void foo() {
    { // unnecessary
      int result = call();
      analyze(result);
    } // unnecessary
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>

Use the  **Ignore branches of 'switch' statements**  option to ignore the code blocks that are used as branches of switch statements.


" ></outline><outline text="Unnecessary conversion to String" _note="
Reports calls to static methods like  **String.valueOf()**  or  **Integer.toString()**  when they are used in
 a string concatenation or as an argument of a library method in which the explicit string conversion is not needed.
Example:</p>
<pre> **
  System.out.println('Number: ' + Integer.toString(count));
** </pre>
After the quick-fix is applied:</p>
<pre> **
  System.out.println('Number: ' + count);
** </pre>
<!-- tooltip end -->
Library methods in which explicit string conversion is considered redundant:</p>
<ul>
  <li>
    Classes  **java.io.PrintWriter** ,  **java.io.PrintStream** 
    <ul><li> **print()** ,  **println()** </li></ul>
  </li>
  <li>
    Classes  **java.lang.StringBuilder** ,  **java.lang.StringBuffer** 
    <ul><li> **append()** </li></ul>
  </li>
  <li>
    Class  **org.slf4j.Logger** 
    <ul>
      <li> **trace()** ,  **debug()** ,  **info()** ,  **warn()** ,  **error()** </li>
    </ul>
  </li>
</ul>
" ></outline><outline text="Unnecessary fully qualified name" _note="
Reports fully qualified class names that can be shortened.
The quick-fix shortens fully qualified names and adds import statements if necessary.</p>
Example:</p>
<pre> **
  class ListWrapper {
    java.util.List&lt;Integer&gt; l;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  import java.util.List;
  class ListWrapper {
    List&lt;Integer&gt; l;
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>

  Use the  **Ignore in Java 9 module statements**  option to ignore fully qualified names inside the Java 9
   **provides**  and  **uses**  module statements.

  In <a href='settings://preferences.sourceCode.Java?JavaDoc%20Inner'>Settings | Editor | Code Style | Java | Imports</a>,
  use the following options to configure the inspection:</p>
<ul>
  <li>Use the  **Insert imports for inner classes**  option if references to inner classes should be qualified with the outer class.</li>
  <li>Use the  **Use fully qualified class names in JavaDoc**  option to allow fully qualified names in Javadocs.</li>
</ul>
" ></outline><outline text="Unnecessary interface modifier" _note="
Reports any redundant modifiers on interfaces or interface components and suggests removing them.
For example, the  **abstract**  and  **public**  modifiers are
redundant and will be reported by the inspection:</p>
<pre> **
  abstract interface Printer {
    public int size();
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Unnecessary parentheses" _note="
Reports any instance of unnecessary parentheses.
Parentheses are considered unnecessary if the evaluation order of an expression remains
  unchanged after you remove the parentheses.</p>
Example:</p>
<pre> **
  int n = 3 + (9 * 8);
** </pre>
After quick-fix is applied:</p>
<pre> **
  int n = 3 + 9 * 8;
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore clarifying parentheses**  option to ignore parentheses that help clarify a binary
    expression. Parentheses are clarifying if the parenthesized expression is an
     **instanceof**  expression that is a part of a larger expression or has a different operator than the parent expression.</li>
  <li>Use the  **Ignore parentheses around the condition of conditional expressions**  option to ignore any
    parentheses around the condition of conditional expressions. Some coding standards specify that all such
    conditions must be surrounded by parentheses.</li>
  <li>
    Use the  **Ignore parentheses around single no formal type lambda parameter**  option to ignore parentheses
    around a single lambda parameter within a lambda expression.
  </li>
</ul>

" ></outline><outline text="Unnecessary qualifier for 'this' or 'super'" _note="
Reports unnecessary qualification of  **this**  or  **super** .

  Using a qualifier on  **this**  or  **super**  to
  disambiguate a code reference may easily become unnecessary via automatic refactorings and should be deleted for clarity.</p>
 **Example:** </p>
<pre> **
  class Foo {
    void foo() {}
  }
  class Bar extends Foo {
    void bar() {
      Bar.super.foo();
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    void foo() {}
  }
  class Bar extends Foo {
    void bar() {
      super.foo();
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unnecessary semicolon" _note="
Reports any unnecessary semicolons, including semicolons that are used between class members, inside block statements, or after
class definitions.
Even though these semicolons are valid in Java, they are redundant and may be removed.</p>
Example:</p>
<pre> **
  class C {
    ;
    void m() throws Exception {
        try (AutoCloseable r1 = createAutoCloseable();) {
          ;
        }
    }
    ;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class C {
    void m() throws Exception {
      try (AutoCloseable r1 = createAutoCloseable()) {
      }
    }
  }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Unqualified inner class access" _note="
Reports references to inner classes that are not qualified with the name
of the enclosing class.
 **Example:** </p>
<pre> **
  import foo.Foo.Bar;
  class Foo {
    class Bar {}
  }
  class Baz {
    void f(Bar bar) {}
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    class Bar {}
  }
  class Baz {
    void f(Foo.Bar bar) {}
  }
** </pre>
<!-- tooltip end -->

  Use the inspection settings to ignore references to inner classes within the same class,
  which therefore do not require an import.

" ></outline><outline text="Unqualified static access" _note="
Reports usage of static members that is not qualified
with the class name.

This is legal if the static member is in
the same class, but may be confusing.
</p>
 **Example:** </p>
<pre> **
  class Foo {
    static void foo() {}
    static int x;
    void bar() {
      foo();
      System.out.println(x);
    }
    static void baz() { foo(); }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    static void foo() {}
    static int x;
    void bar() {
      Foo.foo();
      System.out.println(Foo.x);
    }
    static void baz() { Foo.foo(); }
  }
** </pre>
<!-- tooltip end -->
Use the inspection settings to toggle the reporting for the following items:</p>
<ul>
  <li>
    
      static fields access
       **void bar() { System.out.println(x); }** 
    </p>
  </li>
  <li>
    
      calls to static methods
       **void bar() { foo(); }** 
       **static void baz() { foo(); }** 
    </p>
  </li>
</ul>

  You can also configure the inspection to only report static member usage from a non-static context.
  In the above example,  **static void baz() { foo(); }**  will not be reported.
</p>
" ></outline></outline><outline text="Compiler issues" ><outline text="Javac quirks" _note="
Reports known Javac issues, performance problems, and incompatibilities.
For example, type inference may be slow when it has to process many nested calls.
The following code triggers a warning, as vararg method call has 50+ poly arguments:</p>
<pre> **
  Arrays.asList(
      Arrays.asList('a', 'b'),
      ...
      Arrays.asList('a100', 'b100'));
** </pre>
The quick-fix adds explicit type arguments, which makes compilation and IDE processing much faster:</p>
<pre> **
  //noinspection RedundantTypeArguments
  Arrays.&lt;List&lt;String&gt;&gt;asList(
      Arrays.asList('a', 'b'),
      ...
      Arrays.asList('a100', 'b100'));
** </pre>
" ></outline><outline text="Preview Feature warning" _note="
Reports usages of the Preview Feature API: a set of elements that are annotated with  **@PreviewFeature** .

  A preview feature is a new feature of the Java language, Java Virtual Machine, or Java SE API that is fully specified, fully implemented,
  and is yet impermanent. The notion of a preview feature is defined in <a href='https://openjdk.java.net/jeps/12'>JEP 12</a>.
</p>

  If a piece of code depends on a preview feature, it might stop compiling in future JDK versions in case the feature gets no positive
  feedback and gets removed or changed.
</p>
<!-- tooltip end -->
The inspection is enabled only if the language level of the current project is  **Preview** .</p>
<small>New in 2021.1</small></p>
" ></outline><outline text="Unchecked warning" _note="
Reports code on which an unchecked warning will be issued by the javac compiler.
Every unchecked warning may potentially trigger  **ClassCastException**  at runtime.
Example:</p>
<pre> **
  List items = Arrays.asList('string', 'string');
  List&lt;Integer&gt; numbers = Collections.unmodifiableList(items); // unchecked assignment
** </pre>
The quick-fix tries to generify the containing file,
  which may expose any problems in the editor and during compilation that previously only appeared at runtime:</p>
<pre> **
  List&lt;String&gt; items = Arrays.asList('string', 'string');
  List&lt;Integer&gt; numbers = Collections.unmodifiableList(items); // incompatible types
** </pre>
" ></outline><outline text="Value-based warnings" _note="
Reports attempts to synchronize on an instance of a value-based class that produce compile-time warnings and raise
run-time exceptions starting from Java 16.

  For example,  **java.lang.Double**  is annotated with  **jdk.internal.ValueBased** , so the following code will
  produce a compile-time warning:
</p>
<pre> **
Double d = 20.0;
synchronized (d) { ... } // javac warning
** </pre>
<!-- tooltip end -->
<small>New in 2021.1</small></p>
" ></outline></outline><outline text="Concurrency annotation issues" ><outline text="Instance member guarded by static field" _note="
Reports  **@GuardedBy**  annotations on instance fields or methods
in which the guard is a  **static**  field. Guarding a non-static by a static may result in excessive lock contention,
as access to each locked field in any object instance will prevent simultaneous access to that field in every object instance.
Example:</p>
<pre> **
    private static ReadWriteLock lock = new ReentrantReadWriteLock(); //static guarding field
    private Object state;
    @GuardedBy('lock')
    public void bar() {
        state = new Object();
    }
** </pre>
<!-- tooltip end -->
Supported  **@GuardedBy**  annotations are:</p>
<ul>
  <li> **net.jcip.annotations.GuardedBy** </li>
  <li> **javax.annotation.concurrent.GuardedBy** </li>
  <li> **org.apache.http.annotation.GuardedBy** </li>
  <li> **com.android.annotations.concurrency.GuardedBy** </li>
  <li> **androidx.annotation.GuardedBy** </li>
  <li> **com.google.errorprone.annotations.concurrent.GuardedBy** </li>
</ul>
" ></outline><outline text="Non-final @GuardedBy field" _note="
Reports  **@GuardedBy**  annotations in which the guarding field
is not  **final** .
Guarding on a non-final field may result in unexpected race conditions, as locks will
  be held on the value of the field (which may change), rather than the field itself.</p>
Example:</p>
<pre> **
    private ReadWriteLock lock = new ReentrantReadWriteLock(); //not final guarding field
    private Object state;
    @GuardedBy('lock')
    public void bar() {
        state = new Object();
    }
** </pre>
<!-- tooltip end -->
Supported  **@GuardedBy**  annotations are:</p>
<ul>
  <li> **net.jcip.annotations.GuardedBy** </li>
  <li> **javax.annotation.concurrent.GuardedBy** </li>
  <li> **org.apache.http.annotation.GuardedBy** </li>
  <li> **com.android.annotations.concurrency.GuardedBy** </li>
  <li> **androidx.annotation.GuardedBy** </li>
  <li> **com.google.errorprone.annotations.concurrent.GuardedBy** </li>
</ul>
" ></outline><outline text="Non-final field in @Immutable class" _note="
Reports any non-final field in a class with the  **@Immutable**  annotation.
This violates the contract of the  **@Immutable**  annotation.
Example:</p>
<pre> **
  import javax.annotation.concurrent.Immutable;
  @Immutable
  class Foo {
    String bar = 'foo';
  }
** </pre>
<!-- tooltip end -->
Supported  **@GuardedBy**  annotations are:</p>
<ul>
  <li> **net.jcip.annotations.GuardedBy** </li>
  <li> **javax.annotation.concurrent.GuardedBy** </li>
  <li> **org.apache.http.annotation.GuardedBy** </li>
  <li> **com.android.annotations.concurrency.GuardedBy** </li>
  <li> **androidx.annotation.GuardedBy** </li>
  <li> **com.google.errorprone.annotations.concurrent.GuardedBy** </li>
</ul>
" ></outline><outline text="Static member guarded by instance field or this" _note="
Reports  **@GuardedBy**  annotations on  **static**  fields or methods in which the guard is either a non-static field or
 **this** .
Guarding a static element with a non-static element may result in
  excessive concurrency, multiple threads may be able to access the guarded field simultaneously by locking in different object contexts.</p>
Example:</p>
<pre> **
    private ReadWriteLock lock = new ReentrantReadWriteLock();
    @GuardedBy('lock')
    public static void bar() {
        // ...
    }
** </pre>
<!-- tooltip end -->
Supported  **@GuardedBy**  annotations are:</p>
<ul>
  <li> **net.jcip.annotations.GuardedBy** </li>
  <li> **javax.annotation.concurrent.GuardedBy** </li>
  <li> **org.apache.http.annotation.GuardedBy** </li>
  <li> **com.android.annotations.concurrency.GuardedBy** </li>
  <li> **androidx.annotation.GuardedBy** </li>
  <li> **com.google.errorprone.annotations.concurrent.GuardedBy** </li>
</ul>
" ></outline><outline text="Unguarded field access or method call" _note="
Reports accesses of fields declared as  **@GuardedBy**  that are not guarded by an appropriate synchronization structure.
Example:</p>
<pre> **
    @GuardedBy('this')
    void x() {
        notify();
    }
    void y() {
        x(); // unguarded method call
    }
** </pre>
<!-- tooltip end -->
Supported  **@GuardedBy**  annotations are:</p>
<ul>
  <li> **net.jcip.annotations.GuardedBy** </li>
  <li> **javax.annotation.concurrent.GuardedBy** </li>
  <li> **org.apache.http.annotation.GuardedBy** </li>
  <li> **com.android.annotations.concurrency.GuardedBy** </li>
  <li> **androidx.annotation.GuardedBy** </li>
  <li> **com.google.errorprone.annotations.concurrent.GuardedBy** </li>
</ul>
" ></outline><outline text="Unknown @GuardedBy field" _note="
Reports  **@GuardedBy**  annotations in which the specified guarding field is unknown.
Example:</p>
<pre> **
    private Object state;
    @GuardedBy('lock') //unknown guard reference
    public void bar() {
        state = new Object();
    }
** </pre>
<!-- tooltip end -->
Supported  **@GuardedBy**  annotations are:</p>
<ul>
  <li> **net.jcip.annotations.GuardedBy** </li>
  <li> **javax.annotation.concurrent.GuardedBy** </li>
  <li> **org.apache.http.annotation.GuardedBy** </li>
  <li> **com.android.annotations.concurrency.GuardedBy** </li>
  <li> **androidx.annotation.GuardedBy** </li>
  <li> **com.google.errorprone.annotations.concurrent.GuardedBy** </li>
</ul>
" ></outline></outline><outline text="Control flow issues" ><outline text="'break' statement" _note="
Reports  **break**  statements that are used in places
other than at the end of a  **switch**  statement branch.
 **break**  statements complicate refactoring and can be confusing.</p>
Example:</p>
<pre> **
void foo(List&lt;String&gt; strs) {
  for (String str : strs) {
    if (str.contains('stop')) break;
    handleStr(str);
  }
}
** </pre>
<!-- tooltip end -->


" ></outline><outline text="'break' statement with label" _note="
Reports  **break**  statements with labels.
Labeled  **break**  statements complicate refactoring and can be confusing.</p>
Example:</p>
<pre> **
  void handle(List&lt;String&gt; strs) {
    outer:
    for (String s: strs) {
      for (char ch : s.toCharArray()) {
        if ('s' == ch) break outer;
        handleChar(ch);
      }
    }
  }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="'continue' statement" _note="
Reports  **continue**  statements.
 **continue**  statements complicate refactoring and can be confusing.</p>
Example:</p>
<pre> **
  void foo(List&lt;String&gt; strs) {
    for (String str : strs) {
      if (str.contains('skip')) continue;
      handleStr(str);
    }
  }
** </pre>
" ></outline><outline text="'continue' statement with label" _note="
Reports  **continue**  statements with labels.
Labeled  **continue**  statements complicate refactoring and can be confusing.</p>
Example:</p>
<pre> **
  void handle(List&lt;String&gt; strs) {
    outer:
    for (String s: strs) {
      for (char ch : s.toCharArray()) {
        if ('s' == ch) continue outer;
        handleChar(ch);
      }
    }
  }
** </pre>
" ></outline><outline text="'default' not last case in 'switch'" _note="
Reports  **switch**  statements or expressions in which the  **default**  case
comes before another case.
This construct is unnecessarily confusing.
There is a quick-fix that moves the  **default**  case to the last position.
  The fix is available only when a given branch has  **break** / **yield**  at the end.</p>
Example:</p>
<pre> **
  switch (n) {
      default:
          System.out.println();
          break;
      case 1:
          break;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  switch (n) {
    case 1:
        break;
    default:
        System.out.println();
        break;
  }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="'for' loop may be replaced by 'while' loop" _note="
Reports  **for**  loops that contain neither initialization nor update components, and suggests converting them to  **while** 
loops. This makes the code easier to read.
Example:</p>
<pre> **
  for(; exitCondition(); ) {
    process();
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  while(exitCondition()) {
    process();
  }
** </pre>
The quick-fix is also available for other  **for**  loops, so you can replace any  **for**  loop with a
   **while**  loop.</p>
<!-- tooltip end -->
Use the  **Ignore 'infinite' for loops without conditions**  option if you want to ignore  **for** 
  loops with trivial or non-existent conditions.

" ></outline><outline text="'for' loop with missing components" _note="
Reports  **for**  loops
that lack initialization, condition, or update clauses. Some coding styles prohibit such loops.
Example:</p>
<pre> **
  for (int i = 0;;i++) {
    // body
  }
** </pre>
<!-- tooltip end -->

Use the  **Ignore collection iterations**  option to ignore loops which use an iterator.
This is a standard way to iterate over a collection in which the  **for**  loop does not have an update clause.


" ></outline><outline text="'if' statement with identical branches" _note="
Reports  **if**  statements in which common parts can be extracted from the branches.
These common parts are independent from the condition and make  **if**  statements harder to understand.</p>
Example:</p>
<pre> **
  if (x &gt; 12) {
    doSomethingBefore();
    doSomethingDifferent1();
    doSomethingAfter();
  } else {
    doSomethingBefore();
    doSomethingDifferent2();
    doSomethingAfter();
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  doSomethingBefore();
  if (x &gt; 12) {
    doSomethingDifferent1();
  } else {
    doSomethingDifferent2();
  }
  doSomethingAfter();
** </pre>
<!-- tooltip end -->
<small>Updated in 2018.1</small></p>

" ></outline><outline text="'if' statement with negated condition" _note="
Reports  **if**  statements
that contain  **else**  branches and whose conditions are negated.
Flipping the order of the  **if**  and  **else** 
  branches usually increases the clarity of such statements.</p>
There is a fix that inverts the current  **if**  statement.</p>
Example:</p>
<pre> **
    void m(Object o1, Object o2) {
        if (o1 != o2) {
            System.out.println(1);
        }
        else {
            System.out.println(2);
        }
    }
** </pre>
After applying the quick-fix:</p>
<pre> **
    void m(Object o1, Object o2) {
        if (o1 == o2) {
            System.out.println(2);
        } else {
            System.out.println(1);
        }
    }
** </pre>
<!-- tooltip end -->
Use the  **Ignore '!= null' comparisons**  option to ignore comparisons of the  **!= null**  form.</p>
Use the  **Ignore '!= 0' comparisons**  option to ignore comparisons of the  **!= 0**  form.</p>

" ></outline><outline text="'if' statement with too many branches" _note="
Reports  **if**  statements with too many branches.
Such statements may be confusing and are often a sign of inadequate levels of design
  abstraction.</p>
<!-- tooltip end -->

  Use the  **Maximum number of branches**  field to specify the maximum number of branches an  **if**  statement is allowed to have.


" ></outline><outline text="'switch' statement" _note="
Reports  **switch**  statements.
 **switch**  statements often (but not always) indicate a poor object-oriented design.</p>
Example:</p>
<pre> **
  switch (i) {
    // code
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="'switch' statement with too low of a branch density" _note="
Reports  **switch**  statements or expressions
with a too low ratio of switch labels to executable statements.
Such  **switch**  statements
may be confusing and should probably be refactored.</p>

Example:</p>
<pre> **
    switch (i) { // one case and 5 executable statements -> 20% density
        case 1:
            System.out.println('1');
            System.out.println('2');
            System.out.println('3');
            System.out.println('4');
            System.out.println('5');
            break;
    }
** </pre>
<!-- tooltip end -->

Use the  **Minimum density of branches**  field to specify the allowed ratio of the switch labels to executable statements.</p>
" ></outline><outline text="'switch' statement without 'default' branch" _note="
Reports  **switch**  statements that do not contain  **default**  labels.
Adding the  **default**  label guarantees that all possible scenarios are covered, and it becomes
easier to make assumptions about the current state of the program.</p>

<!-- tooltip end -->
  Note that by default, the inspection does not report  **switch**  statements if all cases for enums or  **sealed**  classes are covered.
  Use the  **Ignore exhaustive switch statements**  option if you want to change this behavior.


" ></outline><outline text="Assertion can be replaced with 'if' statement" _note="
Reports  **assert**  statements and suggests replacing them with
 **if**  statements that throw  **java.lang.AssertionError** .
Example:</p>
<pre> **
  assert param != null;
** </pre>
After the quick-fix is applied:</p>
<pre> **
  if (param == null) throw new AssertionError();
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Boolean expression could be replaced with conditional expression" _note="
Reports any  **boolean**  expressions which can be formulated in a more compact and, arguably, clear way than by using a conditional expression.
Use the quick-fix to replace the  **boolean**  expression by a conditional expression.</p>
 **Example:** </p>
<pre> **
  a &amp;&amp; b || !a &amp;&amp; c;
** </pre>
After the quick-fix is applied:</p>
<pre> **
  a ? b : c;
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Conditional break inside infinite loop" _note="
Reports conditional breaks at the beginning or at the end of a loop and suggests using a loop condition instead to shorten the code.
Example:</p>
<pre> **
   **while**  (true) {
     **if**  (i  == 23)  **break** ;
    i++;
  }
** </pre>
After the quick fix is applied:</p>
<pre> **
   **while**  (i != 23) {
    i++;
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Conditional can be pushed inside branch expression" _note="
Reports conditional expressions with  **then**  and <c>else</c> branches that are similar enough so that the expression can be moved
inside. This action shortens the code.
Example:</p>
<pre> **
  double g(int a, int b) {
    return a == b ? Math.cos(0) : Math.cos(1);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  double g(int a, int b) {
    return Math.cos(a == b ? 0 : 1);
  }
** </pre>
<!-- tooltip end -->
<small>New in 2017.2</small></p>
" ></outline><outline text="Conditional expression" _note="
Reports usages of the ternary condition operator and suggests converting them to  **if** / **else**  statements.
Some code standards prohibit the use of the condition operator.</p>
Example:</p>
<pre> **
  Object result = (condition) ? foo() : bar();
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Object result;
  if (condition) {
    comp = foo();
  }
  else {
    comp = bar();
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
Use the  **Ignore for simple assignments and returns **  option to ignore simple assignments and returns and allow the following constructs:</p>
<pre> **
  String s = (foo == null) ? '' : foo.toString();
** </pre>

  Use the  **Ignore places where an if statement is not possible **  option to ignore conditional expressions in contexts in which automatic
  replacement with an if statement is not possible (for example, when the conditional expression is used as an argument to a
   **super()**  constructor call).
</p>
" ></outline><outline text="Conditional expression with identical branches" _note="
Reports conditional expressions with identical  **then**  and  **else**  branches.
Such expressions almost certainly indicate bugs. The inspection provides a fix that collapses conditional expressions.</p>
Example:</p>
<pre> **
  int y = x == 10 ? 4 : 4;
** </pre>
After the quick-fix is applied:</p>
<pre> **
  int y = 4;
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Conditional expression with negated condition" _note="
Reports conditional expressions whose conditions are negated.
Flipping the order of the conditional expression branches usually increases the clarity of such statements.</p>
<!-- tooltip end -->

  Use the  **Ignore '!= null' comparisons**  and  **Ignore '!= 0' comparisons**  options to ignore comparisons of the form
   **obj != null**  or  **num != 0** .
  Since  **obj != null**  effectively means 'obj exists',
  the meaning of the whole expression does not involve any negation
  and is therefore easy to understand.

  The same reasoning applies to  **num != 0**  expressions, especially when using bit masks.

  These forms have the added benefit of mentioning the interesting case first.
  In most cases, the value for the  **== null**  branch is  **null**  itself,
  like in the following examples:
<pre> **
    static String getName(Person p) {
        return p != null ? p.getName() : null;
    }
    static String getExecutableString(int fileMode) {
        return (fileMode & 0b001001001) != 0 ? 'executable' : 'non-executable';
    }
** </pre>

" ></outline><outline text="Constant conditional expression" _note="
Reports conditional expressions in which the condition is either a  **true**  or  **false**  constant.
These expressions sometimes occur as a result of automatic refactorings and may be simplified.
Example:</p>
<pre> **
  return true ? 'Yes' : 'No';
** </pre>
After quick-fix is applied:</p>
<pre> **
  return 'Yes';
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Double negation" _note="
Reports double negations that can be simplified.
Example:</p>
<pre> **
  if (!!functionCall()) {}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  if (functionCall()) {}
** </pre>
Example:</p>
<pre> **
  if (!(a != b)) {}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  if (a == b) {}
** </pre>
  <!-- tooltip end -->


" ></outline><outline text="Duplicate condition" _note="
Reports duplicate conditions in &amp;&amp; and || expressions
and branches of if statements.
While sometimes these duplicate conditions are intended, in most cases they are used due to oversight.
Example:</p>
<pre> **
  boolean result = digit1 != digit2 || digit1 != digit2;
** </pre>
<!-- tooltip end -->

  To ignore conditions that may produce side effects, use the  **Ignore conditions with side effects**  option.
Disabling this option may lead to false-positives, for example, when the same method returns different values on subsequent invocations.
</p>
Example:</p>
<pre> **
  if (iterator.next() != null || iterator.next() != null)
    System.out.println('Got it');
  }
** </pre>
Due to possible side effects of  **iterator.next()**  (on the example), the warning will only be
  triggered if the  **Ignore conditions with side effects**  option is disabled.</p>

" ></outline><outline text="Enum 'switch' statement that misses case" _note="
Reports  **switch**  statements over enumerated types that are not exhaustive.
 **Example:** </p>
<pre> **
   **enum**  AlphaBetaGamma {
    A, B, C;
     **void**  x(AlphaBetaGamma e) {
       **switch**  (e) {
      }
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **enum**  AlphaBetaGamma {
    A, B, C;
     **void**  x(AlphaBetaGamma e) {
       **switch**  (e) {
         **case**  A -> {}
         **case**  B -> {}
         **case**  C -> {}
      }
    }
  }
** </pre>
<!-- tooltip end -->

Use the  **Ignore switch statements with a default branch **  option to ignore  **switch** 
  statements that have a  **default**  branch.


" ></outline><outline text="Expression can be factorized" _note="<!-- Copyright 2000-2021 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. -->

Reports expressions that can be factorized, i.e. reorganized to pull out a common factor.
This reduces redundancy and could improve the readability of your code.
 **Example:** </p>
<pre> **
  a &amp;&amp; b || a &amp;&amp; c
** </pre>
After the quick-fix is applied:</p>
<pre> **
  a &amp;&amp; (b || c)
** </pre>
<!-- tooltip end -->
<small>New in 2021.3</small></p>

" ></outline><outline text="Fallthrough in 'switch' statement" _note="
Reports 'fall-through' in a  **switch**  statement.
Fall-through occurs when a series of executable statements after a  **case**  label is not guaranteed
to transfer control before the next  **case**  label. For example, this can happen if the branch is missing a  **break**  statement.
In that case, control falls through to the statements after
that  **switch**  label, even though the  **switch**  expression is not equal to
  the value of the fallen-through label. While occasionally intended, this construction is confusing and is often the result of a typo.</p>

This inspection ignores any fall-through commented with a text matching the regex pattern  **(?i)falls?\s*thro?u** .
</p>
There is a fix that adds a  **break**  to the branch that can fall through to the next branch.</p>
Example:</p>
<pre> **
    switch(x) {
      case (4):
          if (condition) {
              System.out.println('3');
              // no break here
          } else {
              break;
          }
      case (6):
          System.out.println('4');
    }
** </pre>
After the quick-fix is applied:</p>
<pre> **
    switch(x) {
        case (4):
            if (condition) {
                System.out.println('3');
            } else {
                break;
            }
            break;
        case (6):
            System.out.println('4');
    }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Idempotent loop body" _note="
Reports loops whose second and all subsequent iterations do not produce any additional side effects other
than the one produced by the first iteration, which can indicate a programming error.
Such loops may iterate only zero, one, or infinite number of times.
If the infinite number of times case is unreachable, such a loop can be replaced with an  **if**  statement.
  Otherwise, there's a possibility that the program can get stuck.</p>
Example:</p>
<pre> **
    public void foo(String baseName, String names) {
        int suffix = 1;
        String name = baseName;
        while (names.contains(name)) {
            // error: suffix is not updated making loop body idempotent
            name = baseName + suffix;
        }
    }
** </pre>
<!-- tooltip end -->
<small>New in 2018.1</small></p>
" ></outline><outline text="Infinite loop statement" _note="
Reports  **for** ,  **while** ,
or  **do**  statements that
can only exit by throwing an exception. While such statements may be correct, they
often happen due to coding errors.
Example:</p>
<pre> **
  for (;;) {
  }
** </pre>
<!-- tooltip end -->

Use the  **Ignore when placed in Thread.run**  option to ignore the
  infinite loop statements inside  **Thread.run** .
It may be useful for the daemon threads.
Example:</p>
<pre> **
  new Thread(() -&gt; {
    while (true) {
    }
  }).start();
** </pre>

" ></outline><outline text="Labeled statement" _note="
Reports labeled statements that can complicate refactorings and control flow of the method.
Example:</p>
<pre> **
  label:
  while (true) {
      // code
  }
** </pre>
" ></outline><outline text="Local variable used and declared in different 'switch' branches" _note="
Reports local variables declared in one branch of a  **switch**  statement
and used in another branch. Such declarations can be extremely confusing.
Example:</p>
<pre> **
    switch(i) {
      case 2:
          int x = 0;
          break;
      case 3:
          x = 3;
          System.out.println(x);
          break;
    }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Loop statement that does not loop" _note="
Reports any instance of  **for** ,
 **while** , and  **do**  statements whose
bodies will be executed once at most. Normally, this is an indication of a bug.
<!-- tooltip end -->

Use the  **Ignore enhanced for loops**  option to ignore the foreach loops.
They are sometimes used to perform an action only on the first item of an iterable in a compact way.
</p>
Example:</p>
<pre> **
   **for**  (String s : stringIterable) {
    doSomethingOnFirstString(s);
     **break** ;
  }
** </pre>
" ></outline><outline text="Loop variable not updated inside loop" _note="
Reports any variables and parameters that are used in a loop condition
and are not updated inside the loop.
Such variables and parameters are usually used by mistake as they
  may cause an infinite loop if they are executed.</p>
Example:</p>
<pre> **
  void loopDoesNotLoop(boolean b) {
    while (b) {
      System.out.println();
      break;
    }
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>

  Use the  **Ignore possible non-local changes**  option to disable this inspection
  if the condition can be updated indirectly (e.g. via the called method or concurrently from another thread).
</p>

" ></outline><outline text="Loop with implicit termination condition" _note="
Reports any  **while** ,
 **do-while** , and  **for** 
loops that have the  **true**  constant as their
only condition. At the same time, such loops can be still terminated by a containing
 **if**  statement which can break out of the loop.
Such an  **if**  statement must be the first or the only statement
in a  **while**  or  **for** 
loop and the last or the only statement in a  **do-while**  loop.</p>

Removing the  **if**  statement and making its condition an explicit
  loop condition simplifies the loop.</p>
<!-- tooltip end -->


" ></outline><outline text="Maximum 'switch' branches" _note="
Reports  **switch**  statements or expressions with too many  **case**  labels.
Such a long switch statement may be confusing and should probably be refactored.
  Sometimes, it is not a problem (for example, a domain is very complicated and has enums with a lot of constants).</p>
Example:</p>
<pre> **
    switch (x) {
        case 1 -> {}
        case 2 -> {}
        case 3 -> {}
        case 4 -> {}
        case 5 -> {}
        case 6 -> {}
        case 7 -> {}
        case 8 -> {}
        case 9 -> {}
        case 10 -> {}
        case 11,12,13 -> {}
        default -> {}
    }
** </pre>
<!-- tooltip end -->
Use the  **Maximum number of branches**  field to specify the maximum number of  **case**  labels expected.

" ></outline><outline text="Minimum 'switch' branches" _note="
Reports  **switch**  statements and expressions with too few  **case**  labels, and suggests rewriting them as  **if** 
and
 **else if**  statements.
Example (minimum branches == 3):</p>
<pre> **
  switch (expression) {
    case 'foo' -&gt; foo();
    case 'bar' -&gt; bar();
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  if ('foo'.equals(expression)) {
    foo();
  } else if ('bar'.equals(expression)) {
    bar();
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
Use the  **Minimum number of branches**  field to specify the minimum expected number of  **case**  labels.</p>
" ></outline><outline text="Negated conditional expression" _note="
Reports conditional expressions which are negated with a prefix expression, as
such constructions may be confusing.
There is a fix that propagates the outer negation to both branches.</p>
Example:</p>
<pre> **
  !(i == 1 ? a : b)
** </pre>
After the quick-fix is applied:</p>
<pre> **
  i == 1 ? !a : !b
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Negated equality expression" _note="
Reports equality expressions which are negated by a prefix expression.
Such expressions can be simplified using the  **!=**  operator.</p>
Example:</p>
<pre> **
  !(i == 1)
** </pre>
After the quick-fix is applied:</p>
<pre> **
  i != 1
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Nested 'switch' statement" _note="
Reports nested  **switch**  statements or expressions.
Nested  **switch**  statements
may result in extremely confusing code. These statements may be extracted to a separate method.</p>
Example:</p>
<pre> **
  int res = switch (i) {
            case 0 -> 0;
            default -> switch (i) {
                case 100 -> 0;
                default -> i;
            };
        };
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Nested conditional expression" _note="
Reports nested conditional expressions as they
may result in extremely confusing code.
Example:</p>
<pre> **
  int y = a == 10 ? b == 20 ? 10 : a : b;
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Overly complex boolean expression" _note="
Reports boolean expressions with too many terms. Such expressions may be confusing and bug-prone.
Example:</p>
<pre> **
  cond(x1) &amp;&amp; cond(x2) ^ cond(x3) &amp;&amp; cond(x4);
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Maximum number of terms**  field to specify the maximum number of terms allowed in a boolean expression.</li>
  <li>Use the  **Ignore pure conjunctions and disjunctions**  option to ignore boolean expressions which use only a single boolean operator repeatedly.</li>
</ul>
" ></outline><outline text="Pointless 'indexOf()' comparison" _note="
Reports unnecessary comparisons with
 **.indexOf()**  expressions. An example of such an expression
is comparing the result of  **.indexOf()**  with numbers smaller than -1.
<!-- tooltip end -->
" ></outline><outline text="Pointless statement or boolean expression" _note="
Reports unnecessary or overly complicated boolean expressions.
Such expressions include  **&&** -ing with  **true** ,
 **||** -ing with  **false** ,
  equality comparison with a boolean literal, or negation of a boolean literal. Such expressions can be simplified.</p>
Example:
<pre> **
   **boolean**  a = !(x &&  **false** );
   **boolean**  b =  **false**  || x;
   **boolean**  c = x !=  **true** ;
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **boolean**  a =  **true** ;
   **boolean**  b = x;
   **boolean**  c = !x;
** </pre>
<!-- tooltip end -->

Configure the inspection:</p>
Use the  **Ignore named constants in determining pointless expressions **  option to ignore named constants when determining if an expression is pointless.


" ></outline><outline text="Redundant 'else'" _note="
Reports redundant  **else**  keywords in  **if** &mdash; **else**  statements and statement chains.

The  **else**  keyword is redundant when it cannot be reached because the code in previous branches ends with the
 **return** ,  **throw** ,  **break** , or  **continue**  statement. In this case,
the statements from the  **else**  branch can be placed after the  **if**  statement, and the
 **else**  keyword can be removed.
</p>
Example:</p>
<pre> **
  if (name == null) {
      throw new IllegalArgumentException();
  } else {
      System.out.println(name);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  if (name == null) {
      throw new IllegalArgumentException();
  }
  System.out.println(name);
** </pre>
<!-- tooltip end -->
Disable the  **Report when there are no more statements after the 'if' statement**  option to ignore the cases in which the  **if** &mdash; **else**  statement is the last statement in a code block.</p>

" ></outline><outline text="Redundant 'if' statement" _note="
Reports  **if**  statements that can be simplified to a single assignment,
 **return** , or  **assert**  statement.
Example:</p>
<pre> **
  if (foo()) {
    return true;
  } else {
    return false;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  return foo();
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
Use the  **Ignore chained 'if' statements **  option if want to hide a warning for chained  **if**  statements.</p>
For example, in the following code the warning will be hidden, but the quick-fix will still be available:</p>
<pre> **
  if (condition1) return true;
  if (condition2) return false;
  return true;
** </pre>
Use the  **Ignore 'assert' statements **  option if want to hide a warning for  **if**  statements
  containing only  **assert**  statement in their bodies.</p>
For example, in the following code the warning will be hidden:</p>
<pre> **
  if (isTrue()) assert false;
** </pre>
" ></outline><outline text="Simplifiable boolean expression" _note="
Reports boolean expressions that can be simplified.
Example:</p>
<pre> **
  void f(boolean foo, boolean bar) {
    boolean b = !(foo ^ bar);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void f(boolean foo, boolean bar) {
    boolean b = foo == bar;
  }
** </pre>

Example:</p>
<pre> **
  void f(boolean foo, boolean bar) {
    boolean b = (foo && bar) || !foo;
  }
  ** </pre>
After the quick-fix is applied:</p>
<pre> **
  void f(boolean foo, boolean bar) {
    boolean b = !foo || bar;
  }
  ** </pre>
<!-- tooltip end -->
" ></outline><outline text="Simplifiable conditional expression" _note="
Reports conditional expressions and suggests simplifying them.
Examples:</p>
<pre> **condition ? true : foo &rarr; condition || foo** </pre>
<pre> **condition ? false : foo &rarr; !condition && foo** </pre>
<pre> **condition ? foo : !foo &rarr; condition == foo** </pre>
<pre> **condition ? true : false &rarr; condition** </pre>
<pre> **a == b ? b : a &rarr; a** </pre>
<pre> **result != null ? result : null &rarr; result** </pre>
" ></outline><outline text="Statement can be replaced with 'assert' or 'Objects.requireNonNull'" _note="
Reports  **if**  statements that throw only  **java.lang.Throwable**  from a  **then**  branch
and do not have an  **else**  branch. Such statements can be converted to more compact  **assert**  statements.

The inspection also reports Guava's  **Preconditions.checkNotNull()** .
  They can be replaced with a  **Objects.requireNonNull()**  call for which a library may not be needed.</p>
Example:</p>
<pre> **
   **if**  (x == 2)  **throw new**  RuntimeException('fail');
   **if**  (y == null)  **throw new**  AssertionError();
  Preconditions.checkNotNull(z, 'z');
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **assert**  x != 2 : 'fail';
  Objects.requireNonNull(y);
  Objects.requireNonNull(z, 'z');
** </pre>
<!-- tooltip end -->
By default, this inspection provides a quick-fix in the editor without code highlighting.</p>

" ></outline><outline text="Unnecessary 'null' check before method call" _note="
Reports null checks followed by a method call that will definitely return
 **false**  when  **null**  is passed (e.g.  **Class.isInstance** ).
Such a check seems excessive as the method call will always return  **false**  in this case.</p>
Example: </p>
<pre> **
  if (x != null && myClass.isInstance(x)) { ... }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  if (myClass.isInstance(x)) { ... }
** </pre>
<!-- tooltip end -->


" ></outline></outline><outline text="Data flow" ><outline text="Boolean method is always inverted" _note="
Reports methods with a  **boolean**  return type that are used only in a negated context.
The quick-fix makes it possible to rename and invert the method.
  Due to performance reasons, some methods might not be highlighted in the editor.</p>
Example:</p>
<pre> **
  class C {
    boolean alwaysTrue() {
      return true;
    }
    void f() {
      if (!alwaysTrue()) {
        return;
      }
    }
    boolean member = !alwaysTrue();
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class C {
    boolean alwaysFalse() {
      return false;
    }
    void f() {
      if (alwaysFalse()) {
        return;
      }
    }
    boolean member = alwaysFalse();
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Boolean variable is always inverted" _note="
Reports boolean variables or fields which are always negated
when their value is used.
<!-- tooltip end -->
Example:</p>
<pre> **
      void m() {
        boolean b = true; //boolean variable 'b' is always inverted
        System.out.println(!b);
      }
** </pre>

" ></outline><outline text="Method call violates Law of Demeter" _note="
Reports <a href='https://en.wikipedia.org/wiki/Law_of_Demeter'>Law of Demeter</a> violations.
The Law of Demeter specifies a style guideline: never call a method on an object you got from another call.
The code that follows this guideline is easier to maintain, adapt, and refactor, has less coupling between methods, less duplication,
  and better information hiding. On the other hand, you might need to write many wrapper methods to meet this guideline.</p>
<!-- tooltip end -->

" ></outline><outline text="Negatively named boolean variable" _note="
Reports negatively named variables, for example:  **disabled** ,  **hidden** , or  **isNotChanged** .
Usually, inverting the  **boolean**  value and removing the negation from the name makes the code easier to understand.</p>
Example:</p>
<pre> **
    boolean disabled = false;
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Redundant local variable" _note="
Reports unnecessary local variables that add nothing to the comprehensibility of a method, including:
<ul>
  <li>Local variables that are immediately returned.</li>
  <li>Local variables that are immediately assigned to another variable and then not used.</li>
  <li>Local variables that always have the same value as another local variable or parameter.</li>
</ul>
 **Example:** </p>
<pre> **
  boolean yes() {
    boolean b = true;
    return b;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  boolean yes() {
    return true;
  }
  ** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore immediately returned or thrown variables**  option to ignore immediately returned or thrown variables.
    Some coding styles suggest using such variables for clarity and ease of debugging.</li>
  <li>Use the  **Ignore variables which have an annotation**  option to ignore annotated variables.</li>
</ul>
" ></outline><outline text="Reuse of local variable" _note="
Reports local variables that are 'reused' overwriting their
values with new values unrelated to their original use.
Such a local variable reuse may be confusing,
as the intended semantics of the local variable may vary with each use. It may also be
prone to bugs if due to the code changes, the values that have been considered overwritten actually
appear to be alive. It is a good practice to keep variable lifetimes as short as possible, and not
  to reuse local variables for the sake of brevity.</p>
<!-- tooltip end -->
Example:</p>
<pre> **
    void x() {
        String s = 'one';
        System.out.println('s = ' + s);
        s = 'two'; //reuse of local variable 's'
        System.out.println('s = ' + s);
    }
** </pre>

" ></outline><outline text="Scope of variable is too broad" _note="
Reports any variable declarations that can be moved to a smaller scope.
This inspection is especially
useful for <i>Pascal style</i> declarations at the beginning of a method. Moreover, variables with a too broad
  scope also often remain after refactorings.</p>
Example of  **sb**  movement:</p>
<pre> **
  StringBuilder sb = new StringBuilder();
  System.out.println();
  sb.append(1);
** </pre>
After quick-fix is applied:</p>
<pre> **
  System.out.println();
  StringBuilder sb = new StringBuilder();
  sb.append(1);
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Only report variables that can be moved into inner blocks**  option to report only those variables that can be moved inside deeper code blocks.
    For example, when the option is enabled, the movement will be suggested for  **sb**  variable, but not for the following code:
<pre> **
  StringBuilder sb = new StringBuilder(a);
  if (flag) {
    sb.append(1);
  }
** </pre></li>
  <li>Use the  **Report variables with a new expression as initializer
    (potentially unsafe)**  option to report variables that are initialized with a new expression. This makes the inspection potentially
    unsafe when the constructor has non-local side-effects. For example, when the option is enabled, the movement will be
    suggested for the  **foo**  variable:
  <pre> **
  class Foo {
    static List&lt;Foo&gt; fooList = new ArrayList&lt;&gt;();
    String bar;
    Foo(String bar) {
        this.bar = bar;
        fooList.add(this);
    }
    public static void main(String[] args) {
      Foo foo = new Foo('bar'); // the movement is possible even though is unsafe
      System.out.println(fooList.size());
      System.out.println(foo.bar);
    }
  }
** </pre></li>
</ul>
" ></outline><outline text="Use of variable whose value is known to be constant" _note="
Reports any usages of variables which are known to be constant.
This is the case if the (read) use of the variable is surrounded by an
 **if** ,  **while** , or  **for** 
statement with an  **==**  condition which compares the variable with a constant.
  In this case, the use of a variable which is known to be constant can be replaced with
  an actual constant.</p>
Example:</p>
<pre> **
    private static void foo(double number) {
        if (number == 1.0) {
            f(number);
        }
    }
    private static void f(double number) {}
** </pre>
After the quick-fix is applied:</p>
<pre> **
    private static void foo(double number) {
        if (number == 1.0) {
            f(1.0);
        }
    }
    private static void f(double number) {}
** </pre>
<!-- tooltip end -->

" ></outline></outline><outline text="Declaration redundancy" ><outline text="'final' method in 'final' class" _note="
Reports  **final**  methods in  **final**  classes.
Since  **final**  classes cannot be inherited, marking a method as  **final** 
  may be unnecessary and confusing.</p>
 **Example:** </p>
<pre> **record Bar(int a, int b) {
  public final int sum() { 
     return a + b;
  }
}
** 
</pre>
After the quick-fix is applied:</p>
<pre> **record Bar(int a, int b) {
  public int sum() { 
     return a + b;
  }
}
** </pre>

As shown in the example, a class can be marked as  **final**  explicitly or implicitly.</p>
<!-- tooltip end -->

" ></outline><outline text="'protected' member in 'final' class" _note="
Reports  **protected**  members in  **final** classes.
Since  **final**  classes cannot be inherited, marking the method as  **protected** 
  may be confusing. It is better to declare such members as  **private**  or package-visible instead.</p>
 **Example:** </p>
<pre> **record Bar(int a, int b) {
  protected int sum() { 
     return a + b;
  }
}
** 
</pre>
After the quick-fix is applied:</p>
<pre> **record Bar(int a, int b) {
  int sum() { 
     return a + b;
  }
}
** </pre>

As shown in the example, a class can be marked as  **final**  explicitly or implicitly.</p>
<!-- tooltip end -->

" ></outline><outline text="Access static member via instance reference" _note="
Reports references to  **static**  methods and fields via a class instance rather than the class itself.
Even though referring to static members via instance variables is allowed by The Java Language Specification,
  this makes the code confusing as the reader may think that the result of the method depends on the instance.</p>
The quick-fix replaces the instance variable with the class name.</p>
Example:</p>
<pre> **
  String s1 = s.valueOf(0);
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String s = String.valueOf(0);
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Actual method parameter is the same constant" _note="
Reports methods in which a parameter appears to always be the same constant.

Example:</p>
<pre> **
  static void printPoint(int x, int y) { // x is always 0
    System.out.println(x + ', ' + y);
  }
  public static void main(String[] args) {
    printPoint(0, 1);
    printPoint(0, 2);
  }
** </pre>
The quick-fix inlines the constant value. This may simplify the method implementation.</p>
<!-- tooltip end -->

  Use the  **Ignore when inline parameter initializer would not succeed**  option to suppress the inspections when:
</p>
<ul>
  <li>the parameter is modified inside the method.</li>
  <li>the parameter value that is being passed is a reference to an inaccessible field (only in Java).</li>
  <li>the parameter is a vararg (only in Java).</li>
</ul>

  Use the  **Maximal reported method visibility**  option to control the maximum visibility of methods to be reported.
</p>

  Use the  **Minimal reported method usage count**  field to specify the minimal number of method usages with the same parameter value.
</p>

" ></outline><outline text="Declaration access can be weaker" _note="
Reports all fields, methods or classes, found in the specified inspection
scope that may have their access modifier narrowed down.
Example:</p>
<pre> **
  class Sample {
    void foo() {
        bar('foo', 'foo');
    }
    void bar(String x, String y) { } // can be private
  }
** </pre>
<!-- tooltip end -->
Use the inspection's options to define the rules for the modifier change suggestions.</p>

" ></outline><outline text="Declaration can have final modifier" _note="
Reports all fields, methods, or classes found in the specified inspection scope that may have the  **final**  modifier added to their
declarations.
Final classes can't be extended, final methods can't be overridden, and final fields can't be reassigned.</p>
<!-- tooltip end -->
Use the  **Report classes**  and  **Report methods**  options to define which declarations are to be reported.</p>

" ></outline><outline text="Default annotation parameter value" _note="
Reports annotation parameters that are assigned to their  **default**  value.
Example:</p>
<pre> **
  @interface Test {
      Class&lt;?> expected() default Throwable.class;
  }
  @Test(expected = Throwable.class)
  void testSmth() {}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  @Test()
  void testSmth() {}
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Duplicate throws" _note="
Reports duplicate exceptions in a method  **throws**  list.
Example:</p>
<pre> **
  void f() throws Exception, Exception {}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void f() throws Exception {}
** </pre>
<!-- tooltip end -->

  Use the  **Ignore exceptions subclassing others **  option to ignore exceptions subclassing other exceptions.
</p>

" ></outline><outline text="Empty class initializer" _note="
Reports empty class initializer blocks.
<!-- tooltip end -->


" ></outline><outline text="Empty method" _note="
Reports empty methods that can be removed.
Methods are considered empty if they are empty themselves and if they are overridden or
 implemented by empty methods only. Note that methods containing only comments and the  **super()**  call with own parameters are
  also considered empty.</p>
The inspection ignores methods with special annotations, for example, the  **javax.ejb.Init**  and  **javax.ejb.Remove**  EJB annotations .</p>
The quick-fix safely removes unnecessary methods.</p>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Comments and javadoc count as content**  option to select whether methods with comments should be treated as non-empty.</li>
  <li>Use the  **Additional special annotations**  option to configure additional annotations that should be ignored by this inspection.</li>
</ul>
" ></outline><outline text="Functional expression can be folded" _note="
Reports method references or lambda expressions that point to a method of their own functional interface type and hence can be
replaced with their qualifiers removing unnecessary object allocation.

Example:</p>
<pre> **
  SwingUtilities.invokeLater(r::run);
  SwingUtilities.invokeAndWait(() -> r.run());
** </pre>
After the quick-fix is applied:</p>
<pre> **
  SwingUtilities.invokeLater(r);
  SwingUtilities.invokeAndWait(r);
** </pre>
<!-- tooltip end -->
Reports only if the language level of the project or module is 8 or higher.</p>
" ></outline><outline text="Method can be void" _note="
Reports methods whose return values are never used when called.
The return type of such methods can be made  **void** .
Methods annotated with Error Prone's or AssertJ's  **@CanIgnoreReturnValue**  annotation will not be reported.
  The quick-fix updates the method signature and removes  **return**  statements from inside the method.</p>
 **Example:** </p>
<pre> **
  // reported if visibility setting is Protected or Public
  protected String myToUpperCase(String s) {
    return s.toUpperCase();
  }
  // simple setter, reporting depends on setting
  public String setStr(String str) {
    myStr = str;
    return myStr;
  }
  void test() {
    setStr('value');          // return value is unused
    myToUpperCase('result');  // return value is unused
  }
** </pre>
After the quick-fix is applied to both methods:</p>
<pre> **
    protected void myToUpperCase(String s) {
      // 'return' removed completely
      // as 's.toUpperCase()' has no side effect
    }
    public void setStr(String str) {
      myStr = str;
      // 'return' removed
    }
  ...
** </pre>

   **NOTE:**  Some methods might not be reported during in-editor highlighting due to performance reasons.
  To see all results, run the inspection using  **Code | Inspect Code**  or  **Code | Analyze Code | Run Inspection by Name** >
</p>
<!-- tooltip end -->
Use the  **Ignore simple setters**  option to ignore unused return values from simple setter calls.</p>
Use the  **Maximal reported method visibility**  option to control the maximum visibility of methods to be reported.</p>

" ></outline><outline text="Method returns the same value" _note="
Reports methods and method hierarchies in which the return value always appears to
be the same constant.

" ></outline><outline text="Redundant 'close()'" _note="
Reports unnecessary calls to  **close()**  at the end of a try-with-resources block and suggests removing them.
 **Example** :</p>
<pre> **
  try(MyAutoCloseable ac = new MyAutoCloseable()) {
    foo();
    ac.close();
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  try(MyAutoCloseable ac = new MyAutoCloseable()) {
    foo();
  }
** </pre>
<!-- tooltip end -->
<small>New in 2018.1</small></p>
" ></outline><outline text="Redundant 'requires' statement in module-info" _note="
Reports situations in which a Java 9 module  **A**  requires a Java 9 module  **B** ,
but  **A**  doesn't use any package from  **B** .
Also, the directive that requires the  **java.base**  module is redundant.
<!-- tooltip end -->

  The fix deletes the  **requires**  directive for such redundant dependencies.
  If the deleted dependency re-exported the modules that are actually used, the fix adds a  **requires**  directive for these modules.
</p>
<small>New in 2017.1</small>
" ></outline><outline text="Redundant 'throws' clause" _note="
Reports exceptions that are declared in a method's signature but never thrown by the method itself or its implementations and derivatives.
The inspection ignores methods related to the serialization, for example methods  **readObject()**  or  **writeObject()** .</p>
 **Example:** </p>
<pre> **
  void method() throws InterruptedException {
    System.out.println();
  }
** </pre>
The quick-fix removes unnecessary exceptions from the declaration and normalizes the redundant  **try** - **catch**  statements:</p>
<pre> **
  void method() {
    System.out.println();
  }
** </pre>

   **Note:**  Some exceptions might not be reported during in-editor highlighting.
  For performance reasons, a non-private method is checked only when its name rarely occurs in the project.
  To see all results, run the inspection by selecting   **Code | Inspect Code**  or  **Code | Analyze Code | Run Inspection by Name**  from the main menu.
</p>
<!-- tooltip end -->
Use the  **Ignore exceptions thrown by entry points methods**  option to ignore exceptions thrown by entry points methods.
  Entry points methods are configured the following inspection:  **Editor | Inspections | Java | Declaration redundancy | Unused declaration** .</p>
" ></outline><outline text="Redundant interface declaration" _note="
Reports classes declaring that they implement or extend an interface, when
that interface is already declared as  **implemented**  by a superclass or extended by another interface
of that class. Such declarations are unnecessary and may be safely removed.
<!-- tooltip end -->


" ></outline><outline text="Redundant lambda parameter types" _note="
Reports lambda formal parameter types that are redundant because they can be inferred from the context.
 **Example:** </p>
<pre> **
  Map&lt;String, Integer&gt; map = ...
  map.forEach((String s, Integer i) -> log.info(s + '=' + i));
** </pre>
The quick-fix removes the parameter types from the lambda.</p>
<pre> **
  Map&lt;String, Integer&gt; map = ...
  map.forEach((s, i) -> log.info(s + '=' + i));
** </pre>
" ></outline><outline text="Redundant record constructor" _note="
Reports redundant constructors declared inside Java records.
 **Example 1:** </p>
<pre> **
  record Point(int x, int y) {
    public Point {} // could be removed
  }
  
  record Point(int x, int y) {
    public Point(int x, int y) { // could be removed
      this.x = x;
      this.y = y;
    }
  }
** </pre>
The quick-fix removes the redundant constructors.</p>
 **Example 2:** </p>
<pre> **
   // could be converted to compact constructor
  record Range(int from, int to) {
    public Range(int from, int to) {
      if (from > to) throw new IllegalArgumentException();
      this.from = from;
      this.to = to;
    }
  }
** </pre>
The quick-fix converts this code into a compact constructor.</p>
<!-- tooltip end -->
This inspection only reports if the configured language level is 14 Preview or 15 Preview.</p>
<small>New in 2020.1</small></p>
" ></outline><outline text="Trivial usage of functional expression" _note="
Reports functional interface methods calls that are directly invoked on the definition of the lambda, method reference, or anonymous class.
Such method calls can be replaced with the body of the functional interface implementation.
 **Example:** </p>
<pre> **
  boolean contains(List&lt;String&gt; names, String name) {
    return ((Predicate&lt;String&gt;)x -> {
      return names.contains(x);
    }).test(name);
  }
** </pre>
When the quick-fix is applied, the method call changes to:</p>
<pre> **
  boolean contains(List&lt;String&gt; names, String name) {
    return names.contains(name);
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unnecessary module dependency" _note="
Reports dependencies on modules that are not used. The quick-fix safely removes such unused dependencies.
" ></outline><outline text="Unused declaration" _note="
Reports classes, methods, or fields in the specified inspection scope that are not used or unreachable from entry points.
 An entry point can be the main method, tests, classes mentioned outside the specified scope, classes accessible from
   **module-info.java** , and so on. You can also configure custom entry points by using name patterns or annotations.
 **Example:** </p>
<pre> **
  public class Department {
    private Organization myOrganization;
  }
** </pre>
In this example,  **Department**  explicitly references  **Organization**  but if  **Department**  class itself is unused, then inspection will report both classes. </p>

  The inspection also reports parameters that are not used by their methods and all method implementations and overriders, as well as local
  variables that are declared but not used.
</p>

   **Note:**  Some unused members may not be reported during in-editor code highlighting. For performance reasons, a non-private member is
  checked only when its name rarely occurs in the project.
  To see all results, run the inspection by selecting  **Code | Inspect Code**  or  **Code | Analyze Code | Run Inspection by Name**  from the main menu.
</p>
<!-- tooltip end -->
Use the visibility settings below to configure members to be reported. For example, configuring report  **private**  methods only means
  that  **public**  methods of  **private**  inner class will be reported but  **protected**  methods of top level class
  will be ignored.</p>

  Use the  **entry points**  tab to configure entry points to be considered during the inspection run.</p>
 You can add entry points manually when inspection results are ready.</p>
 If your code uses unsupported frameworks, there are several options:</p>
<ul>
  <li>If the framework relies on annotations, use the  **Annotations...**  button to configure the framework's annotations.</li>
  <li>If the framework doesn't rely on annotations, try to configure class name patterns that are expected by the framework.</li>
</ul>
This way the annotated code accessible by the framework internals will be treated as used.</p>
" ></outline><outline text="Unused label" _note="
Reports labels that are not targets of any  **break**  or  **continue**  statements.
 **Example:** </p>
<pre> **
  label:  **for**  (int i = 0; i &lt; 10; i++) {
     **if**  (i == 3) {
       **break** ;
    }
  }
** </pre>
After the quick-fix is applied, the label is removed:</p>
<pre> **
   **for**  (int i = 0; i &lt; 10; i++) {
     **if**  (i == 3) {
       **break** ;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unused library" _note="
Reports libraries attached to the specified inspection scope that
are not used directly in code.
<!-- tooltip end -->


" ></outline><outline text="Variable is assigned to itself" _note="
Reports assignments of a variable to itself.
 **Example:** </p>
<pre> **
  a = a;
** </pre>
The quick-fix removes the assigment.</p>
" ></outline></outline><outline text="Dependency issues" ><outline text="Class with too many dependencies" _note="
Reports classes that are directly dependent on too many other classes in the project.
Modifications to any dependency of such classes may require changing the class, thus making it prone to instability.</p>
Only top-level classes are reported.</p>
<!-- tooltip end -->
Use the  **Maximum number of dependencies**  field to specify the maximum allowed number of dependencies for a class.</p>
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
" ></outline><outline text="Class with too many dependents" _note="
Reports a class on which too many other classes are directly dependent.
Any modification to such a class may require changing many other classes, which may be expensive.</p>
Only top-level classes are reported.</p>
<!-- tooltip end -->
Use the field below to specify the maximum allowed number of dependents for a class.</p>
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
" ></outline><outline text="Class with too many transitive dependencies" _note="
Reports classes that are directly or indirectly dependent on too many other classes.
Modifications to any dependency of such a class may require changing the class thus making it prone to instability.</p>
Only top-level classes are reported.</p>
<!-- tooltip end -->
Use the  **Maximum number of transitive dependencies**  field to specify the maximum allowed number of direct or indirect dependencies
  for a class.</p>
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
" ></outline><outline text="Class with too many transitive dependents" _note="
Reports a class on which too many other classes are directly or indirectly dependent.
Any modification to such a class may require changing many other classes, which may be expensive.</p>
Only top-level classes are reported.</p>
<!-- tooltip end -->
Use the  **Maximum number of transitive dependents**  field to specify the maximum allowed number of direct or indirect dependents
  for a class.</p>
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>

" ></outline><outline text="Cyclic class dependency" _note="
Reports classes that are mutually or cyclically dependent on other classes.
Such cyclic dependencies make code fragile and hard to maintain.</p>
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
" ></outline><outline text="Cyclic package dependency" _note="
Reports packages that are mutually or cyclically dependent on other packages.
Such cyclic dependencies make code fragile and hard to maintain.</p>
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
" ></outline><outline text="Suspicious package-private access" _note="
Reports usages of package-private members declared in the same package but in a different module.
If the declaring classes are loaded by different loaders, the code that accesses a package-private member will fail with
   **IllegalAccessError**  at runtime.</p>
If a method overrides a package-private method from a class that is loaded by a different loader, it won't be invoked when the super
  method is called on an instance of the implementing class.</p>
If a method implements an abstract package-private method from a class that is loaded by a different loader,
  calling the super method on an instance of the implementing class will fail with  **AbstractMethodError** .</p>
" ></outline></outline><outline text="Encapsulation" ><outline text="'public' field" _note="
Reports  **public**  fields.
Constants (fields marked with  **static**  and  **final** ) are not reported.
 **Example:** </p>
<pre> **
  class Main {
    public String name;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Main {
    private String name;
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore If Annotated By**  list to specify annotations to ignore. The inspection will ignore fields with
    any of these annotations.</li>
  <li>Use the  **Ignore 'public final' fields of an enum**  option to ignore  **public final**  fields
    of the  **enum**  type.</li>
</ul>
" ></outline><outline text="'public' nested class" _note="
Reports  **public**  nested classes.
 **Example:** </p>
<pre> **
  public class Outer {
    public static class Nested {} // warning
    public class Inner {}         // warning
    public enum Mode {}           // warning depends on the setting
    public interface I {}         // warning depends on the setting
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore 'public' inner enums**  option to ignore  **public**  inner enums.</li>
  <li>Use the  **Ignore 'public' inner interfaces**  option to ignore  **public**  inner interfaces.</li>
</ul>
" ></outline><outline text="Accessing a non-public field of another object" _note="
Reports accesses to  **private**  or  **protected**  fields of another object.
Java allows access to such fields for objects of the same class as the current object but
  some coding styles discourage this use. Additionally, such direct access to  **private**  fields
  may fail in component-oriented architectures, such as Spring or Hibernate, that expect all access
  to other objects to be through method calls so the framework can mediate access
  using proxies.
 **Example:** </p>
<pre> **
  public class Base {
    protected int bar;
    void increment(Base base) {
      bar++;
      base.bar++; // warning: direct access to another object's non-public field
    }
  }
** </pre>
A quick-fix to encapsulate the field is available.
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore accesses from the same class**  option to ignore access from the same class and only report access
    from inner or outer classes.
    
To ignore access from inner classes as well, use the nested  **Ignore accesses from inner classes** .</p>
  </li>
  <li>Use the  **Ignore accesses from 'equals()' method**  to ignore access from an  **equals()**  method.</li>
</ul>
" ></outline><outline text="Assignment or return of field with mutable type" _note="
Reports return of, or assignment from a method parameter to an array or a mutable type like
 **Collection** ,  **Date** ,  **Map** ,  **Calendar** , etc.
Because such types are mutable, this construct may
  result in unexpected modifications of an object's state from outside the owning class. Although this construct may be useful for
  performance reasons, it is inherently prone to bugs.</p>
The following mutable types are reported:</p>
<ul>
  <li> **java.util.Date** </li>
  <li> **java.util.Calendar** </li>
  <li> **java.util.Collection** </li>
  <li> **java.util.Map** </li>
  <li> **com.google.common.collect.Multimap** </li>
  <li> **com.google.common.collect.Table** </li>
</ul>
The quick-fix adds a call to the field's  **.clone()**  method.</p>
 **Example:** </p>
<pre> **
  class Log {
    String[] messages;
    ...
    String[] getMessages() {
      return messages; // warning: Return of String[] field 'messages'
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Log {
    String[] messages;
    ...
    String[] getMessages() {
      return messages.clone();
    }
  }
** </pre>
<!-- tooltip end -->
Use the  **Ignore assignments in and returns from private methods**  option to ignore assignments and returns in  **private**  methods.
  <!--
<small>New in 2017.3</small>-->
" ></outline><outline text="Package-visible field" _note="
Reports fields that are declared without any access modifier (also known as package-private).
Constants (that is, fields marked  **static**  and  **final** ) are not reported.</p>
 **Example:** </p>
<pre> **
  public class A {
    Object object;             // warning
    final static int MODE = 0; // constant, no warning
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Package-visible nested class" _note="
Reports nested classes that are declared without any access modifier (also known as package-private).
 **Example:** </p>
<pre> **
  public class Outer {
    static class Nested {}  // warning
    class Inner {}          // warning
    enum Mode {}            // warning depends on the setting
    interface I {}          // warning depends on the setting
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore package-visible inner enums**  option to ignore package-private inner enums.</li>
  <li>Use the  **Ignore package-visible inner interfaces**  option to ignore package-private inner interfaces.</li>
</ul>
" ></outline><outline text="Protected field" _note="
Reports  **protected**  fields.
Constants (that is, variables marked  **static**  or  **final** ) are not reported.</p>
 **Example:** </p>
<pre> **
  public class A {
    protected Object object;              // warning
    protected final static int MODE = 0;  // constant, no warning
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Protected nested class" _note="
Reports  **protected**  nested classes.
 **Example:** </p>
<pre> **
  public class Outer {
    protected static class Nested {} // warning
    protected class Inner {}         // warning
    protected enum Mode {}           // warning depends on the setting
    protected interface I {}         // warning depends on the setting
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore 'protected' inner enums**  option to ignore  **protected**  inner enums.</li>
  <li>Use the  **Ignore 'protected' inner interfaces**  option to ignore  **protected**  inner interfaces.</li>
</ul>
" ></outline></outline><outline text="Error handling" ><outline text="'continue' or 'break' inside 'finally' block" _note="
Reports  **break**  or  **continue**  statements inside of  **finally**  blocks.
While occasionally intended, such statements are very confusing, may mask thrown exceptions, and complicate debugging.</p>
 **Example:** </p>
<pre> **
    while (true) {
        try {
          throwingMethod();
        } finally {
            continue;
        }
    }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'finally' block which can not complete normally" _note="
Reports  **return** ,  **throw** ,  **break** ,  **continue** , and  **yield**  statements that are used inside  **finally**  blocks.
These cause the  **finally**  block to not complete normally but to complete abruptly.
Any exceptions thrown from the  **try**  and  **catch**  blocks of the same  **try** - **catch**  statement will be suppressed.
 **Example:** </p>
<pre> **
  void x() {
     **try**  {
      throw new RuntimeException();
    }  **finally**  {
      // if bar() returns true, the RuntimeException will be suppressed
       **if**  (bar())  **return** ;
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="'instanceof' on 'catch' parameter" _note="
Reports cases in which an  **instanceof**  expression is used for testing the type of a parameter in a  **catch**  block.
Testing the type of  **catch**  parameters is usually better done by having separate
   **catch**  blocks instead of using  **instanceof** .</p>
 **Example:** </p>
<pre> **
  void foo(Runnable runnable) {
    try {
        runnable.run();
    } catch (Throwable throwable) {
        if (throwable instanceof NoClassDefFoundError) { // warning: 'instanceof' on 'catch' parameter 'throwable'
            System.out.println('Class not found!');
        }
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'java.lang.Error' not rethrown" _note="
Reports  **try**  statements that catch
 **java.lang.Error**  or any of its subclasses and do not rethrow the error.
Statements that catch  **java.lang.ThreadDeath**  are not
  reported.</p>
 **Example:** </p>
<pre> **
  try {
    executeTests(request);
  }
  catch (OutOfMemoryError ex) { // warning: Error 'ex' not rethrown
    return false;
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'java.lang.ThreadDeath' not rethrown" _note="
Reports  **try**  statements that catch
 **java.lang.ThreadDeath**  and do not rethrow the exception.
 **Example:** </p>
<pre> **
  try {
    executeInParallel(request);
  } catch (ThreadDeath ex) { // warning: ThreadDeath 'ex' not rethrown
    return false;
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'null' thrown" _note="
Reports  **null**  literals that are used as the argument of a  **throw**  statement.
Such constructs produce a  **java.lang.NullPointerException**  that usually should not be thrown programmatically.</p>
<!-- tooltip end -->
" ></outline><outline text="'return' inside 'finally' block" _note="
Reports  **return**  statements inside of  **finally**  blocks.
While occasionally intended, such  **return**  statements may mask thrown exceptions
and complicate debugging.</p>
<!-- tooltip end -->
 **Example:** </p>
<pre> **
  try {
    foo();
  } finally {
    if (bar()) return;
  }
** </pre>
" ></outline><outline text="'throw' caught by containing 'try' statement" _note="
Reports  **throw**  statements whose exceptions are always
caught by containing  **try**  statements.
Using  **throw** 
  statements as a 'goto' to change the local flow of control is confusing and results in poor performance.
 **Example:** </p>
<pre> **
  try {
    if (!Files.isDirectory(PROJECTS)) {
        throw new IllegalStateException('Directory not found.'); // warning: 'throw' caught by containing 'try' statement
    }
    ...
  } catch (Exception e) {
      LOG.error('run failed');
  }
** </pre>
<!-- tooltip end -->
Use the  **Ignore rethrown exceptions**  option to ignore exceptions that are rethrown.</p>
" ></outline><outline text="'throw' inside 'catch' block which ignores the caught exception" _note="
Reports exceptions that are thrown from inside  **catch**  blocks but do not 'wrap' the caught exception.
When an exception is thrown in response to an exception, wrapping the initial exception prevents losing valuable context information,
  such as stack frames and line numbers.</p>
 **Example:** </p>
<pre> **
  ...
  catch (IOException e) {
    closeAllConnections();
    throw new ConnectException('Connection problem.'); // warning: 'throw' inside 'catch' block ignores the caught exception 'e'
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore if result of exception method call is used**  option to indicate whether the inspection should ignore exceptions whose
    argument is the result of a method
    call on the original exception, such as  **getMessage()** .</li>
  <li>Use the  **Ignore if thrown exception cannot wrap an exception**  option to ignore  **throw**  statements that throw exceptions without a
    constructor that accepts a  **Throwable**  cause.</li>
</ul>
" ></outline><outline text="'throw' inside 'finally' block" _note="
Reports  **throw**  statements inside  **finally** 
blocks.
While occasionally intended, such  **throw**  statements may conceal exceptions thrown from  **try** - **catch**  and thus
  tremendously complicate the debugging process.</p>
<!-- tooltip end -->


" ></outline><outline text="Catch block may ignore exception" _note="
Reports  **catch**  blocks that are empty or may ignore an exception.
While occasionally intended, empty  **catch**  blocks may complicate debugging.
Also, ignoring a  **catch**  parameter might be wrong.
  Finally, the static code analyzer reports if it detects that a  **catch**  block may silently ignore important VM
  exceptions like  **NullPointerException** . Ignoring such an exception
(without logging or rethrowing it) may hide a bug.</p>

  The inspection won't report any  **catch**  parameters named  **ignore**  or  **ignored** .
  Conversely, the inspection will warn you about any  **catch**  parameters named  **ignore**  or  **ignored**  that are actually in use.
  Additionally, the inspection won't report  **catch**  parameters inside test sources named  **expected**  or  **ok** .
</p>

  You can use a quick-fix to change the exception name to  **ignored** .
  For empty  **catch**  blocks, an additional quick-fix to generate the  **catch**  body is suggested.
  You can modify the 'Catch Statement Body' template on the Code tab in
  <a href='settings://fileTemplates'>Settings | Editor | File and Code Templates</a>.
</p>
 **Example:** </p>
<pre> **
  try {
    throwingMethod();
  } catch (IOException ex) {
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  try {
    System.out.println(System.in.read());
  } catch (IOException ignored) {
  }
** </pre>
  <!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>
    Use the  **Do not warn when 'catch' block contains a comment**  option to ignore  **catch**  blocks with comments.
  </li>
  <li>
    Use the  **Do not warn when 'catch' block is not empty**  option to ignore  **catch**  blocks that contain
    statements or comments inside, while the variable itself is not used.
  </li>
  <li>
    Use the  **Do not warn when exception named 'ignore(d)' is not actually ignored**  option to ignore
    variables named  **ignored**  if they are in use.
  </li>
</ul>

<small>New in 2018.1</small></p>
" ></outline><outline text="Caught exception is immediately rethrown" _note="
Reports  **catch**  blocks that immediately rethrow
the caught exception without performing any action on it.
Such  **catch**  blocks are unnecessary and have no error
handling.
<!-- tooltip end -->
 **Example:** </p>
<pre> **
        try {
            new FileInputStream('');
        } catch (FileNotFoundException e) {
            throw e;
        }
** </pre>

" ></outline><outline text="Checked exception class" _note="
Reports checked exception classes (that is, subclasses of  **java.lang.Exception**  that are
not subclasses of  **java.lang.RuntimeException** ).
Some coding standards suppress checked user-defined exception classes.</p>
 **Example:** </p>
<pre> **
  class IllegalMoveException extends Exception {}
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Class directly extends 'java.lang.Throwable'" _note="
Reports classes that directly extend  **java.lang.Throwable** .
Extending  **java.lang.Throwable**  directly is generally considered bad practice.
  It is usually enough to extend  **java.lang.RuntimeException** ,  **java.lang.Exception** , or - in special
  cases -  **java.lang.Error** .</p>
 **Example:** </p>
<pre> **
  class EnigmaThrowable extends Throwable {} // warning: Class 'EnigmaThrowable' directly extends 'java.lang.Throwable'
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Empty 'finally' block" _note="
Reports empty  **finally**  blocks.
Empty  **finally**  blocks usually indicate coding errors. They may also remain after code refactoring and can safely be removed.</p>
This inspection doesn't report empty  **finally**  blocks found in JSP files.</p>
 **Example:** </p>
<pre> **
  try {
    Files.readString(Paths.get('in.txt'));
  } catch (IOException e) {
    throw new RuntimeException(e);
  } finally {
  }
** </pre>
After the quick-fix is applied:
<pre> **
  try {
    Files.readString(Paths.get('in.txt'));
  } catch (IOException e) {
    throw new RuntimeException(e);
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Empty 'try' block" _note="
Reports empty  **try**  blocks, including try-with-resources statements.
 **try**  blocks with comments are considered empty.</p>
<!-- tooltip end -->

This inspection doesn't report empty  **try**  blocks found in JSP files.</p>
" ></outline><outline text="Exception constructor called without arguments" _note="
Reports creation of a exception instance without any arguments specified.
When an exception is constructed without any arguments, it contains no information about the problem that occurred, which makes
  debugging needlessly hard.</p>
 **Example:** </p>
<pre> **
  throw new IOException(); // warning: exception without arguments
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Nested 'try' statement" _note="
Reports nested  **try**  statements.
Nested  **try**  statements
  may result in unclear code and should probably have their  **catch**  and  **finally**  sections
  merged.
  <!-- tooltip end -->
" ></outline><outline text="Non-final field of exception class" _note="
Reports fields in subclasses of  **java.lang.Exception**  that are not declared  **final** .
Data on exception objects should not be modified
  because this may result in losing the error context for later debugging and logging.</p>
 **Example:** </p>
<pre> **
  public class EditorException extends Exception {
    private String message; // warning: Non-final field 'message' of exception class
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Overly broad 'catch' block" _note="
Reports  **catch**  blocks with parameters that are more generic than the
exception thrown by the corresponding  **try**  block.
 **Example:** </p>
<pre> **
  try  {
    File file = new File(pathToFile);
    return file.getAbsolutePath();
  } catch (Exception ex) { // warning: 'catch' of 'Exception' is too broad, masking exceptions 'RuntimeException'
    return defaultFilePath;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  try  {
    File file = new File(pathToFile);
    return file.getAbsolutePath();
  } catch (RuntimeException ex) {
    return defaultFilePath;
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Only warn on RuntimeException, Exception, Error or Throwable**  option to have this inspection warn only on the most generic exceptions.</li>
  <li>Use the  **Ignore exceptions which hide others but are themselves thrown**  option to ignore any exceptions that hide other exceptions but
    still may be thrown and thus are technically not overly broad.</li>
</ul>
" ></outline><outline text="Overly broad 'throws' clause" _note="
Reports  **throws**  clauses with exceptions that are more generic than the
exceptions that the method actually throws.
 **Example:** </p>
<pre> **
  public void createFile() throws Exception { // warning: 'throws Exception' is too broad, masking exception 'IOException'
    File file = new File('pathToFile');
    file.createNewFile();
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  public void createFile() throws IOException {
    File file = new File('pathToFile');
    file.createNewFile();
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Only warn on RuntimeException, Exception, Error or Throwable**  option to have this inspection warn only on the most generic
    exceptions.</li>
  <li>Use the  **Ignore exceptions declared on methods overriding a library method**  option to ignore overly broad  **throws**  clauses
    in methods that override a library method.</li>
  <li>Use the  **Ignore exceptions which hide others but are themselves thrown**  option to ignore any exceptions that hide other exceptions
    but still may be thrown from the method body and thus
    are technically not overly broad.</li>
</ul>
" ></outline><outline text="Prohibited exception caught" _note="
Reports  **catch**  clauses that catch an inappropriate exception.
Some exceptions, for example
   **java.lang.NullPointerException**  or
   **java.lang.IllegalMonitorStateException** , represent programming errors
  and therefore almost certainly should not be caught in production code.
 **Example:** </p>
<pre> **
  try {
    return component.getMousePosition(true) != null;
  } catch (NullPointerException e) { // warning: Prohibited exception 'NullPointerException' caught
    return false;
  }
** </pre>
<!-- tooltip end -->
Use the  **Prohibited exceptions**  list to specify which exceptions should be reported.

" ></outline><outline text="Prohibited exception declared" _note="
Reports methods that declare an inappropriate exception in their  **throws**  clause.
For example an exception can be inappropriate because it is overly generic,
such as  **java.lang.Exception**  or  **java.lang.Throwable** .
 **Example:** </p>
<pre> **
  void describeModule(String module) throws Exception {} // warning: Prohibited exception 'Exception' declared
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Prohibited exceptions**  list to specify which exceptions should be reported.</li>
  <li>Use the  **Ignore exceptions declared on methods overriding a library method**  option to ignore exceptions declared by methods
    that override a library method.</li>
</ul>
" ></outline><outline text="Prohibited exception thrown" _note="
Reports  **throw**  statements that throw an inappropriate exception.
For example an exception can be inappropriate because it is overly generic,
such as  **java.lang.Exception**  or  **java.io.IOException** .
 **Example:** </p>
<pre> **
  void setup(Mode mode) {
      if (mode == null)
          throw new RuntimeException('Problem during setup'); // warning: Prohibited exception 'RuntimeException' thrown
      ...
  }
** </pre>
<!-- tooltip end -->
Use the  **Prohibited exceptions**  list to specify which exceptions should be reported.

" ></outline><outline text="Unchecked exception class" _note="
Reports subclasses of  **java.lang.RuntimeException** .
Some coding standards require that all user-defined exception classes are checked.</p>
 **Example:** </p>
<pre> **
  class EnigmaException extends RuntimeException {} // warning: Unchecked exception class 'EnigmaException'
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unchecked exception declared in 'throws' clause" _note="
Reports declaration of an unchecked exception ( **java.lang.RuntimeException**  or one of its subclasses) in the  **throws** 
clause of a method.
Declarations of unchecked exceptions are not required and may be deleted or moved to a Javadoc  **@throws**  tag.</p>
 **Example:** </p>
<pre> **
  public class InvalidDataException extends RuntimeException {}
  class TextEditor {
    void readSettings() throws InvalidDataException {} // warning: Unchecked exception 'InvalidDataException' declared in 'throws' clause
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unnecessary call to 'Throwable.initCause()'" _note="
Reports calls to  **Throwable.initCause()**  where an exception constructor also takes a  **Throwable cause**  argument.
In this case, the  **initCause()**  call can be removed and its argument can be added to the call to the exception's constructor.</p>
 **Example:** </p>
<pre> **
  try {
      process();
  }
  catch (RuntimeException ex) {
    RuntimeException wrapper = new RuntimeException('Error while processing');
    wrapper.initCause(ex); // Unnecessary call to 'Throwable.initCause()'
    throw wrapper;
  }
** </pre>
A quick-fix is available to pass the cause argument to the constructor. After the quick-fix is applied:</p>
<pre> **
  try {
      process();
  }
  catch (RuntimeException ex) {
    RuntimeException wrapper = new RuntimeException('Error while processing', ex);
    throw wrapper;
  }
  ** </pre>
<!-- tooltip end -->
" ></outline></outline><outline text="Finalization" ><outline text="'finalize()' called explicitly" _note="
Reports calls to  **Object.finalize()** .
Calling  **Object.finalize()**  explicitly may result in objects being placed in an
inconsistent state.
  The garbage collector automatically calls this method on an object when it determines that there are no references to this object.</p>
The inspection doesn't report calls to  **super.finalize()**  from within implementations of  **finalize()**  as
  they're benign.</p>
 **Example:** </p>
<pre> **
  MyObject m = new MyObject();
  m.finalize();
  System.gc()
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'finalize()' should be protected, not public" _note="
Reports any implementations of the  **Object.finalize()**  method that are
declared  **public** .

  According to the contract of the  **Object.finalize()** , only the garbage
  collector calls this method. Making this method public may be confusing, because it
  means that the method can be used by users.
</p>

  The quick-fix makes the method protected to prevent it from being explicitly invoked
  by other classes.
</p>
<!-- tooltip end -->
 **Example:** </p>
<pre> **
   **class**  X {
     **public void**  finalize() {
      /* ... */
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **class**  X {
     **protected void**  finalize() {
      /* ... */
    }
  }
** </pre>
" ></outline><outline text="'finalize()' should not be overridden" _note="
Reports overriding the  **Object.finalize()**  method.
According to the  **Object.finalize()**  documentation:</p>
<blockquote>
  
    The finalization mechanism is inherently problematic. Finalization can lead
    to performance issues, deadlocks, and hangs. Errors in finalizers can lead
    to resource leaks; there is no way to cancel finalization if it is no longer
    necessary; and no ordering is specified among calls to  **finalize** 
    methods of different objects. Furthermore, there are no guarantees regarding
    the timing of finalization. The  **finalize**  method might be called
    on a finalizable object only after an indefinite delay, if at all.
  </p>
</blockquote>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>
    Use the  **Ignore for trivial 'finalize()' implementations**  option to ignore
     **finalize()**  implementations with an empty method body or a body
    containing only  **if**  statements that have a condition which evaluates
    to  **false**  and is a compile-time constant. For performance reasons it
    can be beneficial to override a non-trivial  **finalize()**  with an empty
    implementation in a subclass. An empty final  **finalize()**  implementation
    can also be used to prevent subclasses from overriding.
  </li>
</ul>
" ></outline></outline><outline text="Imports" ><outline text="'*' import" _note="
Reports any  **import**  statements that cover entire packages ('* imports').
Some coding standards prohibit such  **import**  statements.</p>

  You can configure IntelliJ IDEA to detect and fix such statements with its  **Optimize Imports** 
  command. Go to <a href='settings://preferences.sourceCode.Java?Use%20single%20class%20import'>Settings | Editor | Code Style | Java | Imports</a>,
  make sure that the  **Use single class import**  option is enabled, and specify values in the
   **Class count to use import with '*'**  and  **Names count to use static import with '*'**  fields.
  Thus this inspection is mostly useful for offline reporting on code bases that you don't
  intend to change.
</p>
<!-- tooltip end -->

" ></outline><outline text="Single class import" _note="
Reports  **import**  statements that import single classes (as opposed to entire packages).
Some coding standards prohibit such  **import**  statements.</p>

  You can configure IntelliJ IDEA to detect and fix such statements with its  **Optimize Imports**  command. Go to
  <a href='settings://preferences.sourceCode.Java?Use%20single%20class%20import'>Settings | Editor | Code Style | Java | Imports</a>
  and clear the  **Use single class import**  checkbox. Thus this inspection is mostly useful for
  offline reporting on code bases that you don't intend to change.
</p>
<!-- tooltip end -->
" ></outline><outline text="Static import" _note="
Reports  **import static**  statements.
Such  **import**  statements are not supported under Java 1.4 or earlier JVMs.</p>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the table below to specify the classes that will be ignored by the inspection when used in an  **import static** 
    statement.</li>
  <li>Use the  **Ignore single field static imports**  checkbox to ignore single-field  **import static**  statements.</li>
  <li>Use the  **Ignore single method static imports**  checkbox to ignore single-method  **import static**  statements.</li>
</ul>
" ></outline><outline text="Unnecessary import from the 'java.lang' package" _note="
Reports  **import**  statements that refer to the  **java.lang**  package.

   **java.lang**  classes are always implicitly imported, so such import statements are
  redundant and confusing.
</p>

  Since IntelliJ IDEA can automatically detect and fix such statements with its  **Optimize Imports**  command, this inspection is mostly useful for offline reporting on code bases that you don't intend to change.
</p>
<!-- tooltip end -->
" ></outline><outline text="Unnecessary import from the same package" _note="
Reports  **import**  statements that refer to the same package as the
containing file.

  Same-package files are always implicitly imported, so such  **import** 
  statements are redundant and confusing.
</p>

  Since IntelliJ IDEA can automatically detect and fix such statements with its  **Optimize Imports** 
  command, this inspection is mostly useful for offline reporting on code bases that you
  don't intend to change.
</p>
<!-- tooltip end -->
" ></outline><outline text="Unused import" _note="
Reports redundant  **import**  statements.
Regular  **import**  statements are unnecessary when not using imported classes and packages in the source file.
The same applies to imported  **static**  fields and methods that aren't used in the source file.</p>
 **Example:** </p>
<pre> **
  import java.util.ArrayList;
  public class Example {
    public static void main(String[] args) {
      System.out.println('Hello World!');
    }
  }
** </pre>
After the quick fix is applied:
<pre> **
  public class Example {
    public static void main(String[] args) {
      System.out.println('Hello World!');
    }
  }
** </pre>
" ></outline></outline><outline text="Inheritance issues" ><outline text="Abstract class extends concrete class" _note="
Reports  **abstract**  classes that extend concrete classes.
<!-- tooltip end -->
" ></outline><outline text="Abstract class which has no concrete subclass" _note="
Reports  **abstract**  classes that have no concrete subclasses.
<!-- tooltip end -->

" ></outline><outline text="Abstract class without abstract methods" _note="
Reports  **abstract**  classes that have no  **abstract**  methods.
<!-- tooltip end -->

" ></outline><outline text="Abstract method overrides abstract method" _note="
Reports  **abstract**  methods that override  **abstract**  methods.
Such methods don't make sense because any concrete child class will have to implement the abstract method anyway.</p>

  Methods whose return types, exception declarations, annotations, or modifiers differ from the overridden method are not reported by this inspection.
</p>
<!-- tooltip end -->

  Configure the inspection:
</p>
<ul>
  <li>
    Use the  **Ignore methods with different Javadoc than their super methods**  option to ignore any abstract methods whose JavaDoc comment differs from their super method.
  </li>
</ul>
" ></outline><outline text="Abstract method overrides concrete method" _note="
Reports  **abstract**  methods that override concrete super methods.
Methods overridden from  **java.lang.Object**  are not reported by this inspection.</p>
<!-- tooltip end -->

" ></outline><outline text="Abstract method with missing implementations" _note="
Reports  **abstract**  methods that are not implemented in every concrete subclass.

  This results in a compile-time error on the subclasses;
  the inspection reports the problem at the point of the abstract method, allowing faster detection of the problem.
</p>
<!-- tooltip end -->

" ></outline><outline text="Class explicitly extends a 'Collection' class" _note="
Reports classes that extend concrete subclasses of the  **java.util.Collection**  or  **java.util.Map**  classes.

  Subclassing concrete collection types is a common yet poor practice. It is considerably more brittle than delegating collection calls.
</p>
<!-- tooltip end -->
" ></outline><outline text="Class extends annotation interface" _note="
Reports classes declared as an implementation or extension of an annotation
interface.
While it is legal to extend an annotation interface, it is often done by accident,
  and the result can't be used as an annotation.</p>
<!-- tooltip end -->
" ></outline><outline text="Class extends utility class" _note="
Reports classes that extend a utility class.

A utility class is a non-empty class in which all fields and methods are static.
  Extending a utility class also allows for inadvertent object instantiation of the
  utility class, because the constructor cannot be made private in order to allow extension.
</p>
<!-- tooltip end -->

  Configure the inspection:
</p>
<ul>
  <li>
    Use the  **Ignore if overriding class is a utility class**  option to ignore any classes that override a utility class but are
    also utility classes themselves.
  </li>
</ul>

" ></outline><outline text="Class may extend a commonly used base class" _note="
Reports classes or interfaces that can be replaced with an implementation or extension of a more specific commonly used class or interface.
For this inspection to work, a superclass needs to be in project source files and the project needs to use the IntelliJ IDEA build system.</p>
 **Example:** </p>
<pre> **
  class MyInheritor implements A {} // B suggested on the A reference
  interface A {}
  abstract class B implements A {}
  abstract class C1 extends B {}
  abstract class C2 extends B {}
  abstract class C3 extends B {}
  abstract class C4 extends B {}
  abstract class C5 extends B {}
** </pre>
<!-- tooltip end -->
By default, this inspection doesn't highlight issues in the editor but only provides a quick-fix.</p>
<small>New in 2017.2</small>
" ></outline><outline text="Final declaration can't be overridden at runtime" _note="
Reports cases when your code prevents a class from being subclassed by some framework
(for example, Spring or Hibernate) at runtime.
<!-- tooltip end -->
Typical examples of necessary but impossible subclassing:</p>
<ul>
  <li> **final**  classes marked with framework-specific annotations (for example, Spring  **@Configuration** )</li>
  <li> **final** ,  **static**  or  **private**  methods
    marked with framework-specific annotations (for example, Spring  **@Transactional** )</li>
  <li>methods marked with framework-specific annotations inside  **final**  classes</li>
</ul>

The list of reported cases depends on the frameworks used.</p>
" ></outline><outline text="Interface which has no concrete subclass" _note="
Reports interfaces that have no concrete subclasses.
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>
    Use the list below to add annotations. Interfaces declared with
    one of these annotations will be ignored by the inspection.
  </li>
  <li>
    Use the checkbox below to ignore interfaces that only declare constant fields.
    Such interfaces may still be usable even without implementations.
  </li>
</ul>
" ></outline><outline text="Method does not call super method" _note="
Reports methods that override a particular method without calling  **super** .
This is also known as a <i>refused bequest</i>. Such methods
  may represent a failure of abstraction and cause hard-to-trace bugs.</p>
  
The inspection doesn't report default methods and methods overridden
from  **java.lang.Object** , except for  **clone()** .
  The  **clone()**  method is expected to call its  **super** , which will automatically return an object of the correct type.</p>
 **Examples:** </p>
<ul>
  <li><pre> **
  class A {
    @Override
    public Object clone() { // reported, because it does not call 'super.clone()'
      return new A();
    }
  }
  ** </pre> </li>
  <li><pre> **
  interface I {
    default void foo() {}
  }
  class A implements I {
    // warning on method when 'Ignore 'default' super methods' and 'Ignore annotated' options are disabled
    @Override
    public void foo(){}
  }
    ** </pre></li>
</ul>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>
    Use the  **Only report when super method is annotated by**  option to ignore  **super**  methods marked with the annotations
    from the provided list. You can manually add annotations to the list.
  </li>
  <li>
    Use the  **Ignore empty super methods**  option to ignore  **super**  methods that are either empty or only throw an exception.
  </li>
  <li>
    Use the  **Ignore 'default' super methods**  option to ignore  **super**  methods with the  **default**  keyword.
  </li>
</ul>
" ></outline><outline text="Method is identical to its super method" _note="
Reports methods that are identical to their super methods. Such methods have the same signature
as their super method and either have an identical body or only their body consists only of a call to the super method.
These methods are redundant and can be removed.
<!-- tooltip end -->

  Use the checkbox below to run the inspection for the methods that override library methods.
  Checking library methods may slow down the inspection.
" ></outline><outline text="Missing '@Override' annotation" _note="
  Reports methods overriding superclass methods without the
   **@java.lang.Override**  annotation.

  Annotating methods improves code readability since it shows the intent. In addition, the compiler emits an error when a signature
  of the overridden method doesn't match the superclass method.
</p>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>
    Use the  **Ignore 'equals()', 'hashCode()' and 'toString()'**  option to ignore these
     **java.lang.Object**  methods:  **equals()** ,  **hashCode()** , and
     **toString()** . The risk that these methods will disappear and
    your code won't be compiling anymore due to the  **@Override** 
    annotation is relatively small.
  </li>
  <li>
    Use the  **Ignore methods in anonymous classes**  option to ignore methods
    in anonymous classes.
  </li>
</ul>
This inspection is only applicable if the language level of the project or module is 5 or higher.</p>

" ></outline><outline text="Non-varargs method overrides varargs method" _note="
Reports methods that override a variable arity (a.k.a. varargs) method but replace the variable arity parameter with an array parameter.
Though this code is valid, it may be confusing and should be avoided.
<!-- tooltip end -->

" ></outline><outline text="Parameter type prevents overriding" _note="
Reports parameter types of a subclass method that have the same name as
the parameter type of the corresponding super method but belong to a different package.
In these cases, the subclass method cannot override the super method.
 **Example:** </p>
<pre> **
 **public class**  A {
  **public void**  method(Object o) {}
}
 **public class**  B  **extends**  A {
  **public void**  method(Object o) {} // warning on parameter type
  **class**  Object {}
}
** </pre>
After the quick-fix is applied:</p>
<pre> **
 **public class**  A {
  **public void**  method(Object o) {}
}
 **public class**  B  **extends**  A {
  **public void**  method(java.lang.Object o) {} // new parameter type
  **class**  Object {}
}
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Public constructor in abstract class" _note="
Reports  **public**  constructors of  **abstract**  classes.

  Constructors of  **abstract**  classes can only be called from the constructors of
  their subclasses, declaring them  **public**  may be confusing.
</p>
The quick-fix makes such constructors protected.</p>
 **Example:** </p>
<pre> **
   **public abstract class**  Foo {
     **public**  Foo () { // warning: has 'public' modifier
        /* ... */
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **public abstract class**  Foo {
     **protected**  Foo () {
        /* ... */
    }
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
Use the option below to ignore non-public classes.</p>
" ></outline><outline text="Static inheritance" _note="
Reports interfaces that are implemented only to provide access to constants.
This kind of inheritance is often confusing and may hide important dependency information.
<!-- tooltip end -->


" ></outline><outline text="Type parameter extends final class" _note="
Reports type parameters declared to extend a  **final**  class.
Suggests replacing the type parameter with the type of the specified **final**  class since
   **final**  classes cannot be extended.</p>
 **Example:** </p>
<pre> **
   **void**  foo() {
    List&lt;?  **extends**  Integer&gt; list; // Warning: the Integer class is a final class
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **void**  foo() {
    List&lt;Integer&gt; list;
  }
** </pre>
<!-- tooltip end -->

" ></outline></outline><outline text="Initialization" ><outline text="'this' reference escaped in object construction" _note="
Reports possible escapes of  **this**  during the object initialization. The escapes occur when  **this**  is used as a method argument
or an object of assignment in a constructor or initializer. Such escapes may result in subtle bugs, as the object is now available in the
context where it is not guaranteed to be initialized.
 **Example:** </p>
<pre> **
  class Foo {
    {
      System.out.println(this);
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Abstract method called during object construction" _note="
Reports calls to  **abstract**  methods of the current class during object construction.
A method is called during object construction if it is inside a:
<ul>
  <li>Constructor</li>
  <li>Non-static instance initializer</li>
  <li>Non-static field initializer</li>
  <li> **clone()**  method</li>
  <li> **readObject()**  method</li>
  <li> **readObjectNoData()**  method</li>
</ul>
Such calls may result in subtle bugs, as object initialization may happen before the method call.</p>
 **Example:** </p>
<pre> **
  abstract class Parent {
    abstract void abstractMethod();
  }
  class Child extends Parent {
    Child() {
      abstractMethod();
    }
  }
** </pre>
<!-- tooltip end -->
This inspection shares the functionality with the following inspections:</p>
<ul>
  <li>Overridable method called during object construction</li>
  <li>Overridden method called during object construction</li>
</ul>
Only one inspection should be enabled at once to prevent warning duplication.</p>
" ></outline><outline text="Double brace initialization" _note="
Reports <a href='https://www.c2.com/cgi/wiki?DoubleBraceInitialization'>Double Brace Initialization</a>.
Double brace initialization may cause memory leaks when used in a non-static context because it creates an anonymous class
  that will reference the surrounding object.</p>
Compared to regular initialization, double brace initialization provides worse performance since it requires loading an
  additional class.</p>
It may also cause failure of  **equals()**  comparisons if the  **equals()**  method doesn't accept subclasses as
  parameters.</p>
In addition, before Java 9, double brace initialization couldn't be combined with the diamond operator since it was incompatible
  with anonymous classes.
</p>
 **Example:** </p>
<pre> **
  List&lt;Integer&gt; list = new ArrayList&lt;&gt;() {{
    add(1);
    add(2);
  }};
** </pre>
After the quick-fix is applied:</p>
<pre> **
  List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
  list.add(1);
  list.add(2);
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Instance field may not be initialized" _note="
Reports instance variables that may be uninitialized upon object initialization.
 **Example:** </p>
<pre> **
  class Foo {
    public int bar;
    static { }
  }
** </pre>
Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report instance variables as uninitialized. Variables
  reported as initialized will always be initialized.</p>
<!-- tooltip end -->
Use the  **Ignore primitive fields**  option to ignore uninitialized primitive fields.</p>
" ></outline><outline text="Instance field used before initialization" _note="
Reports instance variables that are read before initialization.
The inspection ignores equality checks with  **null** .</p>
 **Example:** </p>
<pre> **
  class Foo {
    int bar;
    Foo() {
      System.out.println(bar);
    }
  }
** </pre>
Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report instance variables as uninitialized. Variables
  reported as initialized will always be initialized.
<!-- tooltip end -->
Use the  **Ignore if annotated by**  option to specify special annotations. The inspection will ignore fields
  annotated with one of these annotations.</p>
Use the  **Ignore primitive fields**  option to ignore uninitialized primitive fields.</p>

" ></outline><outline text="Non-final static field is used during class initialization" _note="
Reports the use of non- **final**   **static**  variables during class initialization.
In such cases, the code semantics may become dependent on the class creation order. Additionally, such cases may lead to the use of
  variables before their initialization, and generally cause difficult and confusing bugs.</p>
 **Example:** </p>
<pre> **
  class Foo {
    public static int bar = 0;
    static {
      System.out.println(bar);
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Overridable method called during object construction" _note="
Reports calls to overridable methods of the current class during object construction.
A method is called during object construction if it is inside a:
<ul>
  <li>Constructor</li>
  <li>Non-static instance initializer</li>
  <li>Non-static field initializer</li>
  <li> **clone()**  method</li>
  <li> **readObject()**  method</li>
  <li> **readObjectNoData()**  method</li>
Methods are overridable if they are not declared as  **final** ,  **static** , or  **private** .
  Package-local methods are considered safe, even though they are overridable. Such calls may result in subtle bugs,
  as object initialization may happen before the method call.</p>
 **Example:** </p>
<pre> **
  class Parent {
    void someMethod() { }
  }
  class Child extends Parent {
    Child() {
      someMethod();
    }
  }
** </pre>
<!-- tooltip end -->
  
This inspection shares the functionality with the following inspections:</p>
<ul>
  <li>Abstract method called during object construction</li>
  <li>Overridden method called during object construction</li>
</ul>
  
Only one inspection should be enabled at once to prevent warning duplication.</p>
" ></outline><outline text="Overridden method called during object construction" _note="
Reports any calls to overridden methods of the current class during object construction.
This happens if an object construction is inside:
<ul>
  <li>A constructor</li>
  <li>A non-static instance initializer</li>
  <li>A non-static field initializer</li>
  <li> **clone()** </li>
  <li> **readObject()** </li>
  <li> **readObjectNoData()** </li>
</ul>
Such calls may result in subtle bugs, as the object is not guaranteed to be initialized before the method call occurs.</p>
Example:</p>
<pre> **
  abstract class Parent {
    void someMethod() { }
  }
  class Child extends Parent {
    Child() {
      someMethod();
    }
    @Override
    void someMethod() { }
  }
** </pre>
<!-- tooltip end -->
This inspection shares its functionality with:</p>
<ul>
  <li>The  **Abstract method called during object construction**  inspection</li>
  <li>The  **Overridable method called during object construction**  inspection</li>
</ul>
Only one inspection should be enabled at the same time to prevent duplicate warnings.</p>
" ></outline><outline text="Static field may not be initialized" _note="
Reports  **static**  variables that may be uninitialized upon class initialization.
 **Example:** </p>
<pre> **
  class Foo {
    public static int bar;
    static { }
  }
** </pre>
Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report  **static**  variables as uninitialized. Variables
  reported as initialized will always be initialized.</p>
<!-- tooltip end -->
Use the  **Ignore primitive fields**  option to ignore uninitialized primitive fields.</p>
" ></outline><outline text="Static field used before initialization" _note="
Reports  **static**  variables that are read before initialization.
The inspection ignores equality checks with  **null** .</p>
 **Example:** </p>
<pre> **
  class Foo {
    public static int bar;
    public static void main(String[] args) {
      System.out.println(bar);
    }
  }
** </pre>
Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report  **static**  variables as uninitialized. Variables
  reported as initialized will always be initialized.</p>
<!-- tooltip end -->
Use the  **Ignore primitive fields**  option to ignore uninitialized primitive fields.</p>

" ></outline><outline text="Unsafe lazy initialization of 'static' field" _note="
Reports  **static**  variables that are lazily initialized in a non-thread-safe manner.
Lazy initialization of  **static**  variables should be done with an appropriate synchronization construct
  to prevent different threads from performing conflicting initialization.</p>
When applicable, a quick-fix, which introduces the
<a href='https://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom'>lazy initialization holder class idiom</a>, is suggested.
  This idiom makes use of the fact that the JVM guarantees that a class will not be initialized until it is used.
 **Example:** </p>
<pre> **
  class X {
    private static List&lt;String&gt; list;
    public List&lt;String&gt; getList() {
      if (list == null) {
        list = List.of('one', 'two', 'tree');
      }
      return list;
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class X {
    private static final class ListHolder {
      static final List&lt;String&gt; list = List.of('one', 'two', 'tree');
    }
    public List&lt;String&gt; getList() {
      return ListHolder.list;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline></outline><outline text="Internationalization" ><outline text="'SimpleDateFormat' without locale" _note="
Reports instantiations of  **java.util.SimpleDateFormat**  that do not specify  **java.util.Locale** .
These calls might be incorrect in an internationalized environment.
 **Example:** </p>
<pre> **new SimpleDateFormat('yyyy');** </pre>
<!-- tooltip end -->
" ></outline><outline text="Absolute alignment in AWT/Swing code" _note="
Reports usages of absolute alignment constants from AWT and Swing. Internationalized applications use relative alignment because it respects the locale component orientation settings.
 **Example:** </p>
<pre> **
  JPanel panel = new JPanel(new BorderLayout(2, 2));
  JLabel label = new JLabel('Hello World');
  panel.add(label, BorderLayout.NORTH);
** </pre>
After the quick-fix is applied:</p>
<pre> **
  JPanel panel = new JPanel(new BorderLayout(2, 2));
  JLabel label = new JLabel('Hello World');
  panel.add(label, BorderLayout.PAGE_START);
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Call to 'Date.toString()'" _note="
Reports  **toString()**  calls on  **java.util.Date**  objects. Such calls are usually incorrect in an internationalized
environment.
<!-- tooltip end -->
" ></outline><outline text="Call to 'String.toUpperCase()' or 'toLowerCase()' without locale" _note="
Reports  **toUpperCase()**  or  **toLowerCase()**  calls on  **String**  objects that do not specify a
 **java.util.Locale** . In these cases the default system locale is used, which can cause problems in an internationalized
environment.

  For example the code  **'i'.toUpperCase().equals('I')**  returns  **false**  in the Turkish and Azerbaijani locales, where
  the dotted and dotless 'i' are separate letters. Calling  **toUpperCase()**  on an English string containing an 'i', when running
  in a Turkish locale, will return incorrect results. Alternatively, when dealing with strings that should be treated as locale-independent,
  like HTML tags, this can lead to errors.
</p>
<!-- tooltip end -->
" ></outline><outline text="Call to 'Time.toString()'" _note="
Reports  **toString()**  calls on  **java.sql.Time**  objects. Such calls are usually incorrect in an internationalized
environment.
<!-- tooltip end -->
" ></outline><outline text="Call to Numeric 'toString()'" _note="
Reports  **toString()**  calls on numeric objects. Such calls are usually incorrect in an internationalized environment.
<!-- tooltip end -->
" ></outline><outline text="Call to suspicious String method" _note="
Reports calls of:
<ul>
  <li> **equals()** </li>
  <li> **equalsIgnoreCase()** </li>
  <li> **compareTo()** </li>
  <li> **compareToIgnoreCase()** </li>
</ul>

  on  **String**  objects. Such calls are usually incorrect in an internationalized environment.
</p>
<!-- tooltip end -->
" ></outline><outline text="Character comparison" _note="
Reports ordinal comparisons of  **char**  values. In an internationalized environment, such comparisons are rarely correct.
<!-- tooltip end -->
" ></outline><outline text="Duplicate string literal" _note="
Reports all string literals that are replicated unchanged throughout the project.
Example:</p>
<pre> **
  class C1 { String CONST1 = 'duplicate string'; }
  class C2 { String CONST2 = 'duplicate string'; }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Min string length**  field to set the minimal string length required to detect duplicates.</li>
  <li>Use the  **Ignore @PropertyKey expressions**  option to ignore strings passed as arguments to methods annotated with
     **org.jetbrains.annotations.PropertyKey** .</li>
</ul>
" ></outline><outline text="Hardcoded strings" _note="
Reports any instances of hardcoded  **String**  literals.
Hardcoded  **String**  literals are probably errors in an
internationalized environment. This inspection won't report empty strings and strings consisting only of whitespaces. A quick-fix is available
to transform a string literal into a  **java.util.ResourceBundle.getString()**  method call.</p>
<!-- tooltip end -->
Use inspection's options to further specialize whether this inspection should report strings in:</p>
<ul>
  <li>Assert statements like in  **assert str.equals('message')** </li>
  <li>Exception constructor calls like in  **new Exception('message')** </li>
  <li>JUnit assert calls like in  **assertEquals(str, 'message')** </li>
  <li>The only argument to a method returning String like in  **getStringByKey('key')** </li>
  <li>Literals with value of legal and existing class name like  **Class.forName('java.lang.Object')** </li>
  <li>Literals with value of legal and existing property key  **bundle.getString('authentication.failed')** </li>
</ul>
" ></outline><outline text="Implicit platform default charset" _note="
Reports method and constructor calls that implicitly use the platform default charset. These calls can produce different results on
systems that use different default charsets. It might result in unexpected behaviour.
 **Example:** </p>
<pre> **void foo(byte[] bytes) {
  String s = new String(bytes);
}** 
</pre>
You can use a quick-fix that specifies the explicit UTF-8 charset if the corresponding overloaded method is available.
  After the quick-fix is applied:</p>
<pre> **void foo(byte[] bytes) {
  String s = new String(bytes, StandardCharsets.UTF_8);
}** 
</pre>
<!-- tooltip end -->
" ></outline><outline text="Incorrect string capitalization" _note="
Reports strings in method parameters and return values annotated with  **@Nls**  and having the capitalization parameter
to conform to capitalization rules existing in most platform UI guidelines.
 **Example:** </p>
<pre> **
  void setTitle(@NlsContexts.DialogTitle String title) {}
  setTitle('This is sentence capitalization but should be title'); 
** </pre>
After the quick-fix is applied:</p>
<pre> **
  setTitle('This Is Sentence Capitalization but Should Be Title'); 
** </pre>
" ></outline><outline text="Magic character" _note="
Reports character literals that are used without constant declaration. These characters might result in
bad code readability. Also, there might be errors if a character is changed only in one location
but not everywhere in code.
 **Example:** </p>
<pre> **char c = 'c';** </pre>
<!-- tooltip end -->
" ></outline><outline text="Non-Basic Latin character" _note="
Reports non-Basic Latin characters in literals and suggests replacing them with unicode entities.
Example:</p>
<pre> **
  // © 2021
  char c = '©';
  String s = 'Áî';
** 
</pre>
After the quick-fix is applied:</p>
<pre> **
  // &amp;copy; 2021
  char c = '\u00a9';
  String s = '\u00c1\u00ee';
** </pre>
" ></outline><outline text="String concatenation" _note="
Reports  **String**  concatenations. Concatenation might be incorrect in an internationalized environment
and could be replaced by usages of  **java.text.MessageFormat**  or similar classes.
<!-- tooltip end -->
" ></outline><outline text="Unnecessary unicode escape sequence" _note="
Reports unnecessary unicode escape sequences. For example, when the file encoding can handle the character without escaping it.
Unicode control characters are not reported by this inspection (except for a line feed and a tab).
 **Example:** </p>
<pre> **String s = '\u0062';** </pre>
<!-- tooltip end -->
" ></outline><outline text="Use of StringTokenizer" _note="
Reports usages of the  **StringTokenizer**  class. Excessive use of  **StringTokenizer**  is incorrect
in an internationalized environment.
<!-- tooltip end -->
" ></outline></outline><outline text="Java language level issues" ><outline text="'assert' statement" _note="
Reports  **assert**  statements. By default,  **assert**  statements are disabled during execution in the production
environment. Consider using logger or exceptions instead.
The  **assert**  statements are not supported in Java 1.3 and earlier JVM.</p>
<!-- tooltip end -->


" ></outline><outline text="Annotation" _note="
Reports annotations.
Annotations are not supported in Java 1.4 and earlier JVM.
<!-- tooltip end -->


" ></outline><outline text="Annotation class" _note="
Reports annotation interfaces.
Such interfaces are not supported in Java 1.4 and earlier JVM.
<!-- tooltip end -->


" ></outline><outline text="Enhanced 'for' statement" _note="
Reports enhanced  **for**  statements.
Such  **for**  statements are not supported by Java of version 1.4 and older.
Example:</p>
<pre> **
  for (int x: Arrays.asList(1, 2, 3)) {
    System.out.println(x);
  }
** </pre>
After the quick-fix is applied: </p>
<pre> **
  for (Iterator&lt;Integer&gt; iterator = Arrays.asList(1, 2, 3).iterator(); iterator.hasNext(); ) {
    final int x = iterator.next();
    System.out.println(x);
  }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Enumerated class" _note="
Reports  **enum**  classes.
Such statements are not supported in Java 1.4 and earlier JVM.
<!-- tooltip end -->


" ></outline><outline text="Forward compatibility" _note="
Reports Java code constructs that may fail to compile in future Java versions.
The following problems are reported:</p>
<ul>
  <li>Use of  **assert** >,  **enum**  or ** _**  as an identifier</li>
  <li>Use of the  **var** ,  **yield** , or  **record**  restricted identifier as a type name</li>
  <li>Unqualified calls to the  **yield**  method</li>
  <li>Modifiers on the  **requires java.base**  statement inside of  **module-info.java** </li>
</ul>
 **Example:** </p>
<pre> **
  // Since Java 14, this class will stop compiling, as 'yield' becomes a restricted identifier.
  public class yield {} 
** </pre>
Fixing these issues timely may simplify migration to future Java versions.</p>
<!-- tooltip end -->
" ></outline><outline text="Varargs method" _note="
Reports methods that accept an arbitrary number of parameters (also known as varargs methods).
Such methods are not supported under Java 1.4 or earlier JVMs.</p>
<!-- tooltip end -->
 **Example:** </p>
<pre> **
  enum EnumConstants {
  A(null), B, C;
  EnumConstants(String... ss) {}
}
** </pre>
A quick-fix is available to replace a variable argument
  parameter with an equivalent array parameter. Relevant arguments in method calls are wrapped in an array initializer expression.
  After the quick-fix is applied:</p>
<pre> **
  enum EnumConstants {
  A(null), B(new String[]{}), C(new String[]{});
  EnumConstants(String[] ss) {}
}
** </pre>
" ></outline></outline><outline text="Java language level migration aids" ><outline text="'compare()' method can be used to compare numbers" _note="
Reports cases where the static  **Integer.compare()**  method or similar methods can be used
instead of more verbose or less efficient constructs.
If  **x**  and  **y**  are already boxed integers, then  **x.compareTo(y)**  is suggested.</p>
 **Example:** </p>
<pre> **
  public int compare(int x, int y) {
    return x > y ? 1 : x &lt; y ? -1 : 0;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  public int compare(int x, int y) {
    return Integer.compare(x, y);
  }
** </pre>
<!-- tooltip end -->

  The  **Double.compare()**  and  **Float.compare()**  methods were introduced in Java 1.4. Methods for other primitive types
  are available since Java 1.7.
</p>
<small>New in 2017.2</small></p>
" ></outline><outline text="'if' can be replaced with 'switch'" _note="
Reports  **if**  statements that can be replaced with  **switch**  statements.
The replacement result is usually shorter and clearer.</p>
 **Example:** </p>
<pre> **
  void test(String str) {
    if (str.equals('1')) {
      System.out.println(1);
    } else if (str.equals('2')) {
      System.out.println(2);
    } else if (str.equals('3')) {
      System.out.println(3);
    } else {
      System.out.println(4);
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void test(String str) {
    switch (str) {
      case '1' -&gt; System.out.println(1);
      case '2' -&gt; System.out.println(2);
      case '3' -&gt; System.out.println(3);
      default -&gt; System.out.println(4);
    }
  }
  ** </pre>
<!-- tooltip end -->
The inspection is applicable if the language level of the project or module is 7 or higher.</p>
Use the  **Minimum number of 'if' condition branches**  field to specify the minimum number of  **if**  condition branches
  for an  **if**  statement to have to be reported. Note that the terminal  **else**  branch (without  **if** ) is not counted.</p>

Use the  **Suggest switch on numbers**  option to enable the suggestion of  **switch**  statements on
primitive and boxed numbers and characters.

Use the  **Suggest switch on enums**  option to enable the suggestion of  **switch**  statements on
 **enum**  constants.

  Use the  **Only suggest on null-safe expressions**  option to suggest  **switch**  statements that can't introduce a  **NullPointerException**  only.
</p>
" ></outline><outline text="Enumeration can be iteration" _note="
Reports calls to  **Enumeration**  methods that are used on collections and may be replaced with equivalent
 **Iterator**  constructs.
 **Example:** </p>
<pre> **Enumeration&lt;String&gt; keys = map.keys();
  while (keys.hasMoreElements()) {
    String name = keys.nextElement();
  }** 
</pre>
After the quick-fix is applied:</p>
<pre> **Iterator&lt;String&gt; iterator = map.keySet().iterator();
  while (iterator.hasNext()) {
    String name = iterator.next();
  }** 
</pre>
<!-- tooltip end -->
" ></outline><outline text="Java 10" ><outline text="Local variable type can be omitted" _note="
Reports redundant local variable types.
These types can be inferred from the context and thus replaced with  **var** .</p>
 **Example:** </p>
<pre> **
  void test(InputStream s) {
    try (InputStream in = s) {}
  }
** </pre>
After the fix is applied:</p>
<pre> **
  void test(InputStream s) {
    try (var in = s) {}
  }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Variable type can be explicit" _note="
Reports local variables of the  **var**  type that can be replaced withvan explicit type.
The inspection can help find and eliminate usages of implicit types in case of downgrading.</p>
<!-- tooltip end -->
 **Example:** </p>
<pre> **
  var str = 'Hello';
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String str = 'Hello';
** </pre>
This inspection only reports if the language level of the project or module is 10 or higher.</p>
" ></outline></outline><outline text="Java 11" ><outline text="'Files.readString()' or 'Files.writeString()' can be used" _note="
Reports code fragments that read or write a  **String**  as bytes using  **java.nio.file.Files** .
These fragments can be replaced with calls to the  **Files.readString()**  and  **Files.writeString()**  methods introduced in Java 11.</p>
 **Example:** </p>
<pre> **
  String s = 'example';
  Files.write(Paths.get('out.txt'), s.getBytes(StandardCharsets.UTF_8), StandardOpenOption.WRITE);
  s = new String(Files.readAllBytes(Paths.get('in.txt')), StandardCharsets.ISO_8859_1);
** </pre>
After the quick fix is applied:</p>
<pre> **
  String s = 'example';
  Files.writeString(Paths.get('out.txt'), s, StandardOpenOption.WRITE);
  s = Files.readString(Paths.get('in.txt'), StandardCharsets.ISO_8859_1);
** </pre>
<!-- tooltip end -->
<small>New in 2018.3</small></p>
" ></outline><outline text="String.repeat() can be used" _note="
Reports loops that can be replaced with a single  **String.repeat()**  method (available since Java 11).
 **Example:** </p>
<pre> **
  void append(StringBuilder sb, int count, Object obj) {
    for (int i = 0; i &lt; count; i++) {
      sb.append(obj);
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void append(StringBuilder sb, int count, Object obj) {
    sb.append(String.valueOf(obj).repeat(Math.max(0, count)));
  }
** </pre>
<!-- tooltip end -->

  By default, the inspection may wrap  **count**  with  **Math.max(0, count)**  if it cannot prove statically that  **count**  is
  not negative. This is done to prevent possible semantics change, as  **String.repeat()**  rejects negative numbers.
  Use the  **Add Math.max(0,count) to avoid possible semantics change**  option to disable this behavior if required.</p>
  
Similarly, a string you want to repeat can be wrapped in
   **String.valueOf**  to prevent possible  **NullPointerException**  if it's unknown whether it can be  **null** .
</p>
This inspection only reports if the language level of the project or module is 11 or higher.</p>
<small>New in 2019.1</small></p>
" ></outline></outline><outline text="Java 14" ><outline text="Enhanced 'switch'" _note="
Reports enhanced  **switch**  statements and expressions. Suggests replacing them with regular  **switch** 
statements.
 **Example:** </p>
<pre> **
  boolean even = switch (condition) {
    case 1, 3, 5, 7, 9 -> false;
    default -> true;
  };
** </pre>
After the quick-fix is applied:</p>
<pre> **
  boolean even;
  switch (condition) {
    case 1:
    case 3:
    case 5:
    case 7:
    case 9:
      even = false;
      break;
    default:
      even = true;
      break;
}
** </pre>
<!-- tooltip end -->
<small>New in 2019.1</small></p>
" ></outline><outline text="Statement can be replaced with enhanced 'switch'" _note="
Reports  **switch**  statements that can be automatically replaced with enhanced  **switch**  statements or expressions.
 **Example:** </p>
<pre> **
  double getPrice(String fruit) {
    // Switch statement can be replaced with enhanced 'switch'
    switch (fruit) {
      case 'Apple':
        return 1.0;
      case 'Orange':
        return 1.5;
      case 'Mango':
        return 2.0;
      default:
        throw new IllegalArgumentException();
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  double getPrice(String fruit) {
    return switch (fruit) {
      case 'Apple' -> 1.0;
      case 'Orange' -> 1.5;
      case 'Mango' -> 2.0;
      default -> throw new IllegalArgumentException();
    };
  }
  ** </pre>
<!-- tooltip end -->
This inspection only applies to language level 14 or higher</p>
<small>New in 2019.1</small></p>
" ></outline></outline><outline text="Java 15" ><outline text="Class can be a record" _note="
Suggests replacing classes with records.
The inspection can be useful if you need to focus on modeling immutable data rather than extensible behavior.
  Automatic implementation of data-driven methods, such as equals and accessors, helps to get rid of boilerplate.</p>

  Note that not every class can be a record. Here are some of the restrictions:
</p>
<ul>
  <li>A class must contain no inheritors and must be a top-level class.</li>
  <li>All the non-static fields in class must be final.</li>
  <li>Class must contain no instance initializers, generic constructors, nor native methods.</li>
</ul>
To get a full list of the restrictions, refer to the
  <a href='https://docs.oracle.com/javase/specs/jls/se15/preview/specs/records-jls.html'>Oracle documentation</a>.</p>
<!-- tooltip end -->
Example:</p>
<pre> **
  class Point {
    private final double x;
    private final double y;
    Point(double x, double y) {
      this.x = x;
      this.y = y;
    }
    double getX() {
      return x;
    }
    double getY() {
      return y;
    }
  }
** </pre>
This record will be converted to:</p>
<pre> **
  record Point(int x, int y) {
  }
** </pre>
This inspection only reports if the language level of the project or module is 15 preview or higher.</p>
<small>New in 2020.3</small></p>
" ></outline><outline text="Inconsistent whitespace indentation in text block" _note="
Reports text blocks that are indented using both spaces and tabs.
Such cases produce unexpected results since spaces and tabs are treated equally during text block processing.</p>
In the following example, spaces and tabs are visualized as  **·**  and  **␉**  respectively, and a tab is equal to 4 spaces in the editor.</p>
 **Example:** </p>
<pre> **
String colors = '''
········red
␉   ␉   green
········blue''';
** </pre>

After printing such string, the result will be:</p>
<pre> **
red
······green
blue
** </pre>
After the compiler removes 2 spaces or tabs from the beginning of each line, the lines end up with extra whitespaces at the beginning.</p>
<!-- tooltip end -->
This inspection only reports if the configured language level is 15 or higher.</p>
<small>New in 2021.1</small></p>
" ></outline><outline text="Pattern variable can be used" _note="
Reports local variable declarations that can be replaced with pattern variables, which are usually more compact.
 **Example:** </p>
<pre> **
  if (obj instanceof String) {
    String str = (String) obj;
    System.out.println(str);
  }
** </pre>
Can be replaced with:</p>
<pre> **
  if (obj instanceof String str) {
    System.out.println(str);
  }
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 15 (Preview) or higher</p>
<small>New in 2020.1</small></p>
" ></outline><outline text="Text block can be replaced with regular string literal" _note="
Reports text blocks that can be replaced with regular string literals.
Occurrences of such text blocks may appear as results of migrating the code back to a Java version earlier than Java 15.</p>
 **Example:** </p>
<pre> **
  Object obj = engine.eval('''
                           function hello() {
                             print(''Hello, world'');
                           }
                           hello();
                           ''');
** </pre>
After the quick fix is applied:</p>
<pre> **
  Object obj = engine.eval('function hello() {\n' +
                           '  print('\'Hello, world\'');\n' +
                           '}\n' +
                           '\n' +
                           'hello();\n');
** </pre>
<!-- tooltip end -->
This inspection only reports if the configured language level is 15 or higher.</p>
<small>New in 2019.3</small></p>
" ></outline><outline text="Text block can be used" _note="
Reports  **String**  literals and suggests replacing them with text blocks.
Requirements:</p>
<ul>
  <li> **\n**  occurs two or more times.</li>
  <li>Text blocks are not concatenated.</li>
</ul>

Use the  **Apply to single string literals**  option to suggest the fix for single literals containing line breaks.

 **Example:** </p>
<pre> **
  String html = '&lt;html&gt;\n' +
                '    &lt;body&gt;\n' +
                '        &lt;p&gt;Hello, world&lt;/p&gt;\n' +
                '    &lt;/body&gt;\n' +
                '&lt;/html&gt;\n';
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String html = '''
                &lt;html&gt;
                    &lt;body&gt;
                        &lt;p&gt;Hello, world&lt;/p&gt;
                    &lt;/body&gt;
                &lt;/html&gt;
                ''';
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 15 or higher.</p>
<small>New in 2019.3</small></p>
" ></outline><outline text="Trailing whitespaces in text block" _note="
Reports text blocks with trailing whitespaces.
Trailing whitespaces are considered incidental and stripped away by the Java compiler.</p>
<!-- tooltip end -->
This inspection only reports if the configured language level is 15 or higher.</p>
<small>New in 2021.1</small></p>
" ></outline></outline><outline text="Java 5" ><outline text="'BigDecimal' legacy method called" _note="
Reports calls to  **BigDecimal.divide()**  or  **BigDecimal.setScale()**  that use integer constants to specify the rounding mode.
Since JDK 1.5, consider using methods that take the  **RoundingMode**   **enum**  parameter instead.
 **Example:** </p>
<pre> **new BigDecimal('42').setScale(2, BigDecimal.ROUND_FLOOR);** </pre>
After the quick-fix is applied:</p>
<pre> **new BigDecimal('42').setScale(2, RoundingMode.FLOOR);** </pre>
<!-- tooltip end -->

" ></outline><outline text="'for' loop can be replaced with enhanced 'for' loop" _note="
Reports  **for**  loops that iterate over collections or arrays, 
and can be automatically replaced with an enhanced  **for**  loop (foreach iteration syntax).
<!--  'foreach' still used in this description so that the inspection continues to be found using this keyword -->
 **Example:** </p>
<pre> **
  for (Iterator&lt;String&gt; iterator = list.iterator(); iterator.hasNext(); ) {
    String item = iterator.next();
    System.out.println(item);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  for (String item : list) {
    System.out.println(item);
  }
** </pre>
<!-- tooltip end -->

  Use the  **Report indexed 'java.util.List' loops**  option to find loops involving  **list.get(index)**  calls.
  Generally, these loops can be replaced with enhanced  **for**  loops,
  unless they modify an underlying list in the process, for example, by calling  **list.remove(index)** .
  If the latter is the case, the enhanced  **for**  loop may throw  **ConcurrentModificationException** .
  Also, in some cases,  **list.get(index)**  loops may work a little bit faster.</p>

  Use the  **Do not report iterations over untyped collections**  option to ignore collections without type parameters.
  This prevents the creation of enhanced  **for**  loop variables of the  **java.lang.Object**  type and the insertion of casts
  where the loop variable is used.</p>
This inspection only reports if the language level of the project or module is 5 or higher.</p>
" ></outline><outline text="'String.indexOf()' expression can be replaced with 'contains()'" _note="
Reports comparisons with  **String.indexOf()**  calls
that can be replaced with a call to the  **String.contains()**  method.
 **Example:** </p>
<pre> **
   **boolean**  b = 'abcd'.indexOf('e') >= 0;
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **boolean**  b = 'abcd'.contains('e');
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 5 or higher.</p>

" ></outline><outline text="'StringBuffer' may be 'StringBuilder'" _note="
Reports variables declared as  **StringBuffer**  and suggests replacing them with  **StringBuilder** .
 **StringBuilder**  is a non-thread-safe replacement for  **StringBuffer** .
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 5 or higher.</p>
" ></outline><outline text="'while' loop can be replaced with enhanced 'for' loop" _note="
Reports  **while**  loops that iterate
over collections and can be replaced with enhanced  **for**  loops (foreach iteration syntax).
<!--  'foreach' still used in this description so that the inspection continues to be found using this keyword -->
 **Example:** </p>
<pre> **
  Iterator it = c.iterator();
  while(it.hasNext()) {
    Object obj = it.next();
    System.out.println(obj);
  }
** </pre>
Can be replaced with:</p>
<pre> **
  for (Object obj : c) {
    System.out.println(obj);
  }
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 5 or higher.</p>

" ></outline><outline text="Method can be varargs method" _note="
Reports methods that can be converted to variable arity methods.
 **Example:** </p>
<pre> **
  void process(String name, Object[] objects);
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void process(String name, Object... objects);
** </pre>
<!-- tooltip end -->

  This inspection only reports if the language level of the project or module is 5 or higher.
</p>
" ></outline><outline text="Raw use of parameterized class" _note="
Reports generic classes with omitted type parameters. Such <i>raw</i> use of generic types is valid
in Java, but it defeats the purpose of type parameters and may mask bugs. This inspection mirrors the
 **rawtypes**  warning of  **javac** .
 **Examples:** </p>
<pre> **
//warning: Raw use of parameterized class 'List'
List list = new ArrayList&lt;String&gt;();
//list of strings was created but integer is accepted as well
list.add(1);
** </pre>
<pre> **
//no warning as it's impossible to provide type arguments during array creation
IntFunction&lt;List&lt;?&gt;[]> fun = List[]::new;
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore construction of new objects**  option to ignore raw types used in object construction.</li>
  <li>Use the  **Ignore type casts**  option to ignore raw types used in type casts.</li>
  <li>Use the  **Ignore where a type parameter would not compile**  option to ignore the cases when a type parameter fails to compile
    (for example, when creating an array or overriding a library method).</li>
  <li>Use the  **Ignore parameter types of overriding methods**  option to ignore type parameters used in parameters of overridden methods.</li>
  <li>Use the  **Ignore when automatic quick-fix is not available**  option to ignore the cases when a quick-fix is not available.</li>
</ul>
This inspection only reports if the language level of the project or module is 5 or higher.
" ></outline><outline text="Reference to empty collection field can be replaced with method call" _note="
Reports usages of  **java.util.Collections**  fields:  **EMPTY_LIST** ,  **EMPTY_MAP** 
or  **EMPTY_SET** . These field usages may be replaced with the following method
calls:  **emptyList()** ,  **emptyMap()** , or  **emptySet()** .
Such method calls prevent unchecked warnings by the compiler because the type parameters can be inferred.
 **Example:** </p>
<pre> **List&lt;Integer&gt; emptyList = Collections.EMPTY_LIST;** </pre>
After the quick-fix is applied:</p>
<pre> **List&lt;Integer&gt; emptyList = Collections.emptyList();** </pre>
<!-- tooltip end -->
This inspection works only if the language level of a project or a module is 5 or higher.</p>


" ></outline><outline text="Unnecessary boxing" _note="
Reports explicit boxing, that is wrapping of primitive values in objects.
Explicit manual boxing is unnecessary as for Java 5 and later, and can safely be removed.</p>
 **Examples:** </p>
<ul>
  <li> **Integer i = new Integer(1);**  &rarr;  **Integer i = Integer.valueOf(1);** </li>
  <li> **int i = Integer.valueOf(1);**  &rarr;  **int i = 1;** </li>
</ul>
<!-- tooltip end -->

Use the  **Only report truly superfluously boxed expressions**  option to report only truly superfluous boxing,
  where a boxed value is immediately unboxed either implicitly or explicitly.
In this case, the entire boxing-unboxing step can be removed. The inspection doesn't report simple explicit boxing.
This inspection only reports if the language level of the project or module is 5 or higher.</p>
" ></outline><outline text="Unnecessary unboxing" _note="
Reports unboxing, that is explicit unwrapping of wrapped primitive values.
Unboxing is unnecessary as for Java 5 and later, and can safely be removed.</p>
 **Examples:** </p>
<ul>
  <li> **Integer i = Integer.valueOf(42).intValue();**  &rarr;  **Integer i = Integer.valueOf(42);** </li>
  <li> **int k = Integer.valueOf(42).intValue();**  &rarr;  **int k = Integer.valueOf(42);** 
    
(reports only when the  **Only report truly superfluously unboxed expressions**  option is not checked)</p></li>
</ul>
<!-- tooltip end -->

  Use the  **Only report truly superfluously unboxed expressions**  option to only report truly superfluous unboxing,
  where an unboxed value is immediately boxed either implicitly or explicitly.
  In this case, the entire unboxing-boxing step can be removed. The inspection doesn't report simple explicit unboxing.</p>
This inspection only reports if the language level of the project or module is 5 or higher.</p>
" ></outline></outline><outline text="Java 7" ><outline text="'equals()' expression replaceable by 'Objects.equals()' expression" _note="
Reports expressions that can be replaced with a call to  **java.util.Objects#equals** .
 **Example:** </p>
<pre> **
  void f(Object a, Object b) {
    boolean result = a != null && a.equals(b);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void f(Object a, Object b) {
    boolean result = Objects.equals(a, b);
  }
** </pre>
<!-- tooltip end -->

  Replacing expressions like  **a != null && a.equals(b)**  with  **Objects.equals(a, b)** 
  slightly changes the semantics. Use the  **Highlight expressions like 'a != null && a.equals(b)'**  option to enable or disable this behavior.
</p>
This inspection only reports if the language level of the project or module is 7 or higher.</p>
" ></outline><outline text="'try finally' can be replaced with 'try' with resources" _note="
Reports  **try** - **finally**  statements that can use Java 7 Automatic Resource Management,
which is less error-prone.
A quick-fix is available to convert a  **try** - **finally** 
  statement into a  **try** -with-resources statement.</p>
 **Example:** </p>
<pre> **
  PrintStream printStream = new PrintStream(fileName);
  try {
    printStream.print(true);
  } finally {
    printStream.close();
  }
** </pre>
A quick-fix is provided to pass the cause to a constructor:</p>
<pre> **
  try (PrintStream printStream = new PrintStream(fileName)) {
    printStream.print(true);
  }
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 7 or higher.</p>
" ></outline><outline text="Explicit type can be replaced with <>" _note="
Reports all  **new**  expressions with type arguments that can be replaced a with diamond type  **&lt;&gt;** .
Example:</p>
<pre> **
  List&lt;String&gt; list = new ArrayList&lt;String&gt;(); // reports array list type argument
** </pre>
After the quick-fix is applied:</p>
<pre> **
  List&lt;String&gt; list = new ArrayList&lt;&gt;();
** </pre>
This inspection only reports if the language level of the project or module is 7 or higher.</p>

" ></outline><outline text="Identical 'catch' branches in 'try' statement" _note="
Reports identical  **catch**  sections in a single  **try**  statement.
Collapsing such sections into one <i>multi-catch</i> block reduces code duplication and prevents
  the situations when one  **catch**  section is updated, and another one is not.</p>
 **Example:** </p>
<pre> **
    try {
        doSmth();
    }
    catch (IOException e) {
        LOG.error(e);
    }
    catch (URISyntaxException e) {
        LOG.error(e);
    }
** </pre>
A quick-fix is available to make the code more compact:</p>
<pre> **
    try {
        doSmth();
    }
    catch (IOException | URISyntaxException e) {
        LOG.error(e);
    }
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 7 or higher.</p>
" ></outline><outline text="Possible heap pollution from parameterized vararg type" _note="
Reports all methods with variable arity, which can be annotated as  **@SafeVarargs** .
The  **@SafeVarargs**  annotation suppresses unchecked warnings about parameterized array creation at call sites.
 **Example:** </p>
<pre> **
  public class Foo&lt;T&gt; {
    private List&lt;T&gt; list = new ArrayList&lt;&gt;();
    public final void safeVarargs(T... elements) {
      Collections.addAll(list, elements);
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  public class Foo&lt;T&gt; {
    private List&lt;T&gt; list = new ArrayList&lt;&gt;();
    @SafeVarargs
    public final void safeVarargs(T... elements) {
      Collections.addAll(list, elements);
    }
  }
** </pre>

  This annotation is not supported under Java 1.6 or earlier JVMs.
</p>
<!-- tooltip end -->
" ></outline></outline><outline text="Java 8" ><outline text="'Comparator' combinator can be used" _note="
Reports  **Comparator**  instances defined as lambda expressions that could be expressed using
  **Comparator.comparing()**  calls.
Chained comparisons which can be replaced by  **Comparator.thenComparing()**  expression are also reported.
Example:</p>
<pre> **
  myList.sort((person1, person2) -> person1.getName().compareTo(person2.getName()));
  myList2.sort((person1, person2) -> {
      int res = person1.first().compareTo(person2.first());
      if(res == 0) res = person1.second().compareTo(person2.second());
      if(res == 0) res = person1.third() - person2.third();
      return res;
  });
** </pre>
After the quick-fixes are applied:</p>
<pre> **
  myList.sort(Comparator.comparing(Person::getName));
  myList2.sort(Comparator.comparing(Person::first)
                         .thenComparing(Person::second)
                         .thenComparingInt(Person::third));
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Anonymous type can be replaced with lambda" _note="
Reports anonymous classes which can be replaced with lambda expressions.
Example:</p>
<pre> **
  new Thread(new Runnable() {
    @Override
    public void run() {
      // run thread
    }
  });
** </pre>
After the quick-fix is applied:</p>
<pre> **
  new Thread(() -> {
    // run thread
  });
** </pre>

Note that if an anonymous class is converted into a stateless lambda, the same lambda object
can be reused by Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,
separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases,
e.g. when anonymous class instances are used as  **HashMap**  keys.
</p>
Lambda syntax is not supported in Java 1.7 and earlier JVMs.</p>
<!-- tooltip end -->

Use the  **Report when interface is not annotated with @FunctionalInterface **  option to ignore the cases in which an anonymous
class implements an interface without  **@FunctionalInterface**  annotation.
</p>

" ></outline><outline text="Anonymous type can be replaced with method reference" _note="
Reports anonymous classes which can be replaced with method references.

  Note that if an anonymous class is converted into an unbound method reference, the same method reference object 
  can be reused by the Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,
  separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases, 
  e.g. when anonymous class instances are used as  **HashMap**  keys.
</p>
 **Example:** </p>
<pre> **
    Runnable r = new Runnable() {
      @Override
      public void run() {
        System.out.println();
      }
    };
** </pre>
The quick-fix changes this code to the compact form:  **Runnable r = System.out::println;** .</p>
<!-- tooltip end -->
Use the  **Report when interface is not annotated with @FunctionalInterface**  option to enable this inspection for
  interfaces which are not annotated with @FunctionalInterface.</p>

This inspection only reports if the language level of the project or module is 8 or higher.</p>
" ></outline><outline text="Anonymous type has shorter lambda alternative" _note="
Reports anonymous classes which could be transformed to a constructor or a factory method call with a lambda expression argument.
The following classes are reported by this inspection:
<ul>
  <li>Anonymous classes extending  **ThreadLocal**  which have an  **initialValue()**  method (can be replaced with  **ThreadLocal.withInitial** )</li>
  <li>Anonymous classes extending  **Thread**  which have a  **run()**  method (can be replaced with  **new Thread(Runnable)** </li>
</ul>
Example:</p>
<pre> **
   **new**  Thread() {
    @Override
     **public void**  run() {
      System.out.println('Hello from thread!');
    }
  }.start();
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **new**  Thread(() -> {
    System.out.println('Hello from thread!');
  }).start();
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Collections.sort() can be replaced with List.sort()" _note="
Reports calls of  **Collections.sort(list, comparator)**  which can be replaced with  **list.sort(comparator)** .
 **Collections.sort**  is just a wrapper, so it is better to use an instance method directly.</p>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 8 or higher.</p>
" ></outline><outline text="Expression can be folded into Stream chain" _note="
Reports expressions with a repeating pattern which could be replaced with <i>Stream API</i> or  **String.join()** .
Example:</p>
<pre> **
  boolean allStartWith(String a, String b, String c, String d, String prefix) {
    return a.startsWith(prefix) && b.startsWith(prefix) && c.startsWith(prefix) && d.startsWith(prefix);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  boolean foo(String a, String b, String c, String d, String prefix) {
    return Stream.of(a, b, c, d).allMatch(s -> s.startsWith(prefix));
  }
** </pre>
Example:</p>
<pre> **
  String joinAll(String a, String b, String c, String d) {
    return a + ',' + b + ',' + c + ',' + d;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String joinAll(String a, String b, String c, String d) {
    return String.join(',', a, b, c, d);
  }
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 8 or higher.</p>
<small>New in 2018.2</small></p>
" ></outline><outline text="Guava's functional primitives can be replaced with Java" _note="
Reports usages of Guava's functional primitives that can be migrated to standard Java API calls.
For example, the inspection reports usages of classes and interfaces like  **FluentIterable** ,  **Optional** ,  **Function** ,
   **Predicate** , or  **Supplier** .</p>
Example:</p>
<pre> **
  ImmutableList&lt;String&gt; results = FluentIterable.from(List.of(1, 2, 3)).transform(Object::toString).toList();
** </pre>
After the quick-fix is applied:</p>
<pre> **
  List&lt;String&gt; results = List.of(1, 2, 3).stream().map(Object::toString).collect(Collectors.toList());
** </pre>

The quick-fix may change the semantics. Some lazy-evaluated Guava's iterables can be transformed to eager-evaluated.
</p>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 8 or higher.</p>
" ></outline><outline text="Lambda can be replaced with method call" _note="
Reports lambda expressions which can be replaced with a JDK method call.
For example, the expression  **x -&gt; x**  of the  **Function&lt;T, T&gt;**  type
  can be replaced with the  **Function.identity()**  call.</p>
<!-- tooltip end -->
<small>New in 2017.1</small></p>
" ></outline><outline text="Lambda can be replaced with method reference" _note="
Reports lambdas that can be replaced with method references. While often it could be a matter of taste, method references are more clear
and readable compared to lambdas.
Example:</p>
<pre> **
  Runnable r = () -> System.out.println();
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Runnable r = System.out::println;
** </pre>
<!-- tooltip end -->

  The inspection may suggest method references even if a lambda doesn't call any method, like replacing  **obj -> obj != null** 
  with  **Objects::nonNull** . 
  Use the <a href='settings://preferences.sourceCode.Java?Lambda%20Body'>Settings | Editor | Code Style | Java | Code Generation</a>
  settings to configure special method references.
</p>
This inspection only reports if the language level of the project or module is 8 or higher.</p>

" ></outline><outline text="Loop can be collapsed with Stream API" _note="
Reports loops which can be replaced with stream API calls using lambda expressions.
Such a replacement changes the style from imperative to more functional and makes the code more compact.</p>
Example:</p>
<pre> **
   **boolean**  check(List&lt;String> data) {
     **for**  (String e : data) {
      String trimmed = e.trim();
       **if**  (!trimmed.startsWith('xyz')) {
         **return**  false;
      }
    }
    return true;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **boolean**  check(List&lt;String> data) {
     **return**  data.stream().map(String::trim).allMatch(trimmed -> trimmed.startsWith('xyz'));
  }
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 8 or higher.
" ></outline><outline text="Loop can be replaced with 'Collection.removeIf()'" _note="
Reports loops which can be collapsed into a single  **Collection.removeIf**  call.
Example:</p>
<pre> **
  for (Iterator&lt;String&gt; it = collection.iterator(); it.hasNext(); ) {
    String aValue = it.next();
    if(shouldBeRemoved(aValue)) {
      it.remove();
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  collection.removeIf(aValue -> shouldBeRemoved(aValue));
** </pre>
<!-- tooltip end -->

  This inspection only reports if the language level of the project or module is 8 or higher.
</p>
" ></outline><outline text="Map.forEach() can be used" _note="
Suggests replacing  **for(Entry&lt;?,?&gt; entry : map.entrySet()) {...}**  or
 **map.entrySet().forEach(entry -&gt; ...)**  with  **map.forEach((key, value) -> ...)** .
Example</p>
<pre> **
  void print(Map&lt;String, Integer&gt; map) {
    map.entrySet().forEach(entry -> {
      String str = entry.getKey();
      System.out.println(str + ':' + entry.getValue());
    });
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void print(Map&lt;String, Integer&gt; map) {
    map.forEach((str, value) -> System.out.println(str + ':' + value));
  }
** </pre>
<!-- tooltip end -->

  When the  **Do not report loops**  option is enabled, only  **entrySet().forEach()**  cases will be reported.
  However, the quick-fix action will be available for  **for** -loops as well.
</p>
This inspection only reports if the language level of the project or module is 8 or higher.</p>
<small>New in 2017.1</small></p>
" ></outline><outline text="Pseudo-functional expression using static class" _note="
Reports usages of pseudo-functional code if  **Java Stream API**  is available.
Though  **guava Iterable API**  provides functionality similar to  **Java Streams API** , it's slightly different and
  may miss some features.
  Especially, primitive-specialized stream variants like  **IntStream**  are more performant than generic variants.</p>
 **Example:** </p>
<pre> **
List&lt;String&gt; transformedIterable = Iterables.transform(someList, someTransformFunction);//warning: Pseudo functional style code
** </pre>
After the quick-fix is applied:</p>
<pre> **List&lt;String&gt; transformedIterable = someList.stream().map(someTransformFunction).collect(Collectors.toList());** </pre>

   **Note:**  Code semantics can be changed; for example, guava's  **Iterable.transform**  produces a lazy-evaluated iterable,
  but the replacement is eager-evaluated.
</p>
<!-- tooltip end -->

  Use the  **Static method calls translated to the 'Stream' API**  option
  to configure static method calls that should be translated to the  **stream**  API.
</p>

This inspection only reports if the language level of the project or module is 8 or higher.</p>
" ></outline><outline text="Simplifiable 'Map' operations" _note="
Reports common usage patterns of  **java.util.Map**  and suggests replacing them with:
 **getOrDefault()** ,  **computeIfAbsent()** ,  **putIfAbsent()** ,  **merge()** , or  **replaceAll()** .
Example:</p>
<pre> **
  map.containsKey(key) ? map.get(key) : 'default';
** </pre>
After the quick-fix is applied:</p>
<pre> **
  map.getOrDefault(key, 'default');
** </pre>
Example:</p>
<pre> **
  List&lt;String&gt; list = map.get(key);
  if (list == null) {
    list = new ArrayList&lt;&gt;();
    map.put(key, list);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  map.computeIfAbsent(key, localKey -> new ArrayList&lt;&gt;());
** </pre>
Example:</p>
<pre> **
  Integer val = map.get(key);
  if (val == null) map.put(key, 1);
  else map.put(key, val + 1);
** </pre>
After the quick-fix is applied:</p>
<pre> **
  map.merge(key, 1, (localKey, localValue) -> localValue + 1);
** </pre>
Example:</p>
<pre> **
  for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) {
    map.put(entry.getKey(), transform(entry.getValue()));
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  map.replaceAll((localKey, localValue) -> transform(localValue));
** </pre>
<!-- tooltip end -->
Note that the replacement with  **computeIfAbsent()**  or  **merge()**  might work incorrectly for some  **Map** 
  implementations if the code extracted to the lambda expression modifies the same  **Map** . By default,
  the warning doesn't appear if this code might have side effects. If necessary, enable the
   **Suggest replacement even if lambda may have side effects**  option to always show the warning.</p>
Also, due to different handling of the  **null**  value in old methods like  **put()**  and newer methods like
   **computeIfAbsent()**  or  **merge()** , semantics might change if storing the  **null**  value into given
   **Map**  is important. The inspection won't suggest the replacement when the value is statically known to be nullable,
  but for values with unknown nullability the replacement is still suggested. In these cases, we recommended suppressing the warning
  and adding an explanatory comment.
</p>
This inspection works only if the language level of the project or module is 8 or higher.</p>
" ></outline><outline text="Simplifiable forEach() call" _note="
Reports  **forEach()**  calls that can be replaced with a more concise method or from which intermediate steps can be extracted.
 **Example:** </p>
<pre> **
  List&lt;String&gt; findNStrings(List&lt;String&gt; list, int n) {
    List&lt;String&gt; other = new ArrayList&lt;>();
    list.forEach(s -> {
      if(s.length() > n) other.add(s);
    });
    return other;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  List&lt;String&gt; findNStrings(List&lt;String&gt; list, int n) {
    List&lt;String&gt; other = list.stream()
      .filter(s -> s.length() > n)
      .collect(Collectors.toList());
    return other;
  }
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 8 or higher.</p>
<small>New in 2017.3</small></p>
" ></outline><outline text="Statement lambda can be replaced with expression lambda" _note="
Reports lambda expressions with code block bodies when expression-style bodies can be used instead.
The result of the conversion is shorter and more clear.
Example:</p>
<pre> **
  Comparable&lt;String&gt; c = o -> {return 0;};
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Comparable&lt;String&gt; c = o -> 0;
** </pre>
<!-- tooltip end -->
" ></outline></outline><outline text="Java 9" ><outline text="Dependencies on automatic modules" _note="
Reports usages of automatic modules in the  **requires**  directive.
An automatic
module is unreliable since it can depend on the types on the class path,
and its name and exported packages could change if and when it's
  converted into an explicit module.</p>
Corresponds to  **-Xlint:requires-automatic**  and  **-Xlint:requires-transitive-automatic**  Javac options.
The first option increases awareness of when automatic modules are used.
The second warns the authors of a module that they're putting the users of that module at risk by establishing implied readability to an automatic module.
 **Example:** </p>
<pre> **
  //module-info.java
  module org.printer {
    requires transitive drivers.corp.org; // reported in case 'drivers.corp.org' is an automatic module
  }
** </pre>
<!-- tooltip end -->

  Use the  **Highlight only transitive dependencies**  option to warn only about transitive dependencies.
</p>
" ></outline><outline text="Immutable collection creation can be replaced with collection factory call" _note="
Reports  **java.util.Collections**  unmodifiable collection calls
that can be converted to newer collection factory methods.
These can be replaced with e.g.  **List.of()**  or  **Set.of()**  introduced in Java 9
or  **List.copyOf()**  introduced in Java 10.

Note that in contrast to  **java.util.Collections**  methods, Java 9 collection factory methods:
<ul>
  <li>Do not accept  **null**  values.
  <li>Require unique set elements and map keys.
  <li>Do not accept  **null**  arguments to query methods like  **List.contains()**  or  **Map.get()**  of the collections returned.
</ul>
When these cases are violated, exceptions are thrown.
  This can change the semantics of the code after the migration.</p>
Example:
<pre> **
  List&lt;Integer> even = Collections.unmodifiableList(
    Arrays.asList(2, 4, 6, 8, 10, 2));
  List&lt;Integer> evenCopy = Collections.unmodifiableList(
    new ArrayList&lt;>(list1));
** </pre>
After the quick-fix is applied:</p>
<pre> **
  List&lt;Integer> even = List.of(2, 4, 6, 8, 10, 2);
  List&lt;Integer> evenCopy = List.copyOf(list);
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 9 or higher.

Use the  **Do not warn when content is non-constant**  option to report only in cases when the supplied arguments are compile-time constants.
This reduces the chances that the behavior changes,
because it's not always possible to statically check whether original elements are unique and not  **null** .

  Use the  **Suggest 'Map.ofEntries'**  option to suggest replacing unmodifiable maps with more than 10 entries with   **Map.ofEntries()** .
<small>New in 2017.2</small>
" ></outline><outline text="Null check can be replaced with method call" _note="
Reports null checks that can be replaced with an  **Objects** / **Stream**  static method.
 **Example:** </p>
<pre> **
if (message == null) {
  application.messageStorage().save(new EmptyMessage());
} else {
  application.messageStorage().save(message);
}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  application.messageStorage()
    .save(Objects.requireNonNullElseGet(message, () -> new EmptyMessage()));
** </pre>
<!-- tooltip end -->

  Use the  **Don't warn if length of replacement bigger than original**  option to ignore the cases when the replacement is longer than the
  original code.
</p>
<small>New in 2017.3</small></p>
" ></outline></outline><outline text="Usages of API which isn't available at the configured language level" _note="
Reports usages of the API that is unavailable at the configured language level.
API availability is defined
by the version specified in the  **@since**  tag in the documentation. This may be useful because
  the language level can differ from your project SDK, and there may be no such API in the JDK that is used to run the code.</p>
<!-- tooltip end -->

  Use the  **Forbid API usages**  option to forbid usages of the API in respect to the project or custom language level.
</p>

" ></outline></outline><outline text="JavaBeans issues" ><outline text="Class without constructor" _note="
Reports classes without constructors.
Some coding standards prohibit such classes.</p>
<!-- tooltip end -->


" ></outline><outline text="Class without no-arg constructor" _note="
Reports classes without a no-argument constructor.
Such constructors are necessary in some contexts. For example, if a class needs to be created by using a reflection.</p>
<!-- tooltip end -->

  Use the checkbox below to ignore classes without explicit constructors.
  The compiler provides a default no-argument constructor to such classes.


" ></outline><outline text="Field has setter but no getter" _note="
Reports fields that have setter methods but no getter methods.

  In certain bean containers, when used within the Java beans specification, such fields might be difficult
  to work with.
</p>
<!-- tooltip end -->
" ></outline><outline text="Property value set to itself" _note="
Reports calls of setter methods with the same object getter as a value.
Usually, this code does nothing and probably was not intended.
 **For example:** </p>
<pre> **bean.setPayerId(bean.getPayerId());** </pre>
<!-- tooltip end -->

" ></outline><outline text="Suspicious getter/setter" _note="
Reports getter or setter methods that access a field that is not expected by its name.
For example, when  **getY()**  returns the  **x**  field. Usually, it might be a copy-paste error.
 **Example:** </p>
<pre> **class Point {
    private int x;
    private int y;
    public void setX(int x) { // Warning: setter 'setX()' assigns field 'y'
      this.y = x;
    }
    public int getY() { // Warning: getter 'getY()' returns field 'x'
      return x;
    }
  }
** </pre>
<!-- tooltip end -->

  Use the checkbox below to report situations when a field in the class has a name that matches a name of a getter or a setter.

" ></outline></outline><outline text="Javadoc" ><outline text="'package-info.java' without 'package' statement" _note="
Reports  **package-info.java**  files without a  **package**  statement.

The Javadoc tool considers such files documentation for the default package even when the file is located somewhere else.</p>
<!-- tooltip end -->
" ></outline><outline text="'package.html' may be converted to 'package-info.java'" _note="
Reports any  **package.html**  files which are used for documenting packages.
Since JDK 1.5, it is recommended that you use  **package-info.java**  files instead, as such
files can also contain package annotations. This way, package-info.java becomes a
  sole repository for package level annotations and documentation.</p>
Example:  **package.html** </p>
<pre> **
&lt;html&gt;
  &lt;body&gt;
    Documentation example.
  &lt;/body&gt;
&lt;/html&gt;
** </pre>
After the quick-fix is applied:  **package-info.java** </p>
<pre> **
/**
 * Documentation example.
 */
package com.sample;
** </pre>
" ></outline><outline text="<code>...</code> can be replaced with {@code ...}" _note="
Reports usages of  **&lt;code&gt;**  tags in Javadoc comments.
Since Java 5, these tags can be replaced with  **{@code ...}**  constructs.
This allows using angle brackets  **&lt;**  and  **&gt;**  inside the comment instead of HTML character entities.
 **Example:** </p>
<pre> **
  /**
   * @return empty &lt;code&gt;ArrayList&amp;lt;Integer&amp;gt;&lt;/code&gt;
   */
  List&lt;Integer&gt; getList(){ ... }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  /**
   * @return empty {@code ArrayList&lt;Integer&gt;}
   */
  List&lt;Integer&gt; getList(){ ... }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Dangling Javadoc comment" _note="
Reports Javadoc comments that don't belong to any class, method or field.
The Javadoc tool ignores dangling Javadoc comments and doesn't include them in the HTML documentation it generates.
 **Example:** </p>
<pre> **
  class A {
    /**
     * Dangling comment
     */
    /**
     * Method javadoc
     */
     public void m(){}
  }
** </pre>
A quick-fix is available to delete such comments completely or convert them into a block comment. After the quick-fix is applied:</p>
<pre> **
  class A {
    /*
      Dangling comment
    */
    /**
     * Method javadoc
     */
    public void m(){}
  }
** </pre>
<!-- tooltip end -->
Use the  **Ignore file header comment in JavaDoc format**  option to ignore comments at the beginning of Java files.
These are usually copyright messages.
" ></outline><outline text="Declaration has Javadoc problems" _note="
Reports the following Javadoc comment flaws:
<ul>
  <li>No Javadoc where it is required</li>
  <li>Required tag is missing</li>
  <li>Invalid or incomplete tag</li>
  <li>Javadoc description is missing or incomplete</li>
</ul>
Example:</p>
<pre> **
  class Main {
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  /**
   *
   */
  class Main {
  }
** </pre>
Example:</p>
<pre> **
  String id(String value) {
    return value;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  /**
   * @param value
   * @return
   */
  String id(String value) {
    return value;
  }
** </pre>
<!-- tooltip end -->
Use the tabs and corresponding inspection options to define visibility scope in which Javadoc is required, as well as the
required Javadoc tags for classes, methods, fields, and inner classes.
" ></outline><outline text="Declaration has problems in Javadoc references" _note="
Reports unresolved references inside Javadoc comments.
In the following example, the  **someParam**  parameter is missing, so it will be highlighted:</p>
<pre> **
class A {
    /**
     * @param someParam description
     **/
    void foo() {
    }
}
** </pre>
<!-- tooltip end -->

  Disable the  **Report inaccessible symbols**  option to ignore the tags that reference missing method parameters,
  classes, fields and methods.</p>

" ></outline><outline text="HTML problems in Javadoc (DocLint)" _note="
Reports the same HTML issues in the Javadoc comments that have been reported by DocLint since Java 8.
The inspection detects the following issues:</p>
<ul>
  <li>Self-closed, unclosed, unknown, misplaced, or empty tag</li>
  <li>Unknown or wrong attribute</li>
  <li>Misplaced text</li>
</ul>
Example:</p>
<pre> **
/**
 * Unknown tag: List&lt;String&gt;
 * Unclosed tag: error&lt;/b&gt;
 * Misplaced text or tag: &lt;ul&gt;&lt;li&gt;one&lt;/li&gt;, &lt;li&gt;two&lt;/li&gt;&lt;/ul&gt;
 * Wrong or empty attribute: &lt;a href=''&gt;&lt;/a&gt;
 * Self-closed tag: &lt;br/&gt;
 * ...
 */
void sample(){ }
** </pre>
" ></outline><outline text="Missing 'package-info.java'" _note="
Reports packages that contain classes but do not contain the  **package-info.java** 
or  **package.html**  files and are, thus, missing the package documentation.
The quick-fix creates an initial  **package-info.java**  file.</p>
<!-- tooltip end -->

" ></outline><outline text="Missing @Deprecated annotation" _note="
Reports module declarations, classes, fields, or methods that have the  **@deprecated** 
Javadoc tag but do not have the  **@java.lang.Deprecated**  annotation.
 **Example:** </p>
<pre> **
  /**
   * @deprecated use {@code example()} instead
   */
  void sample(){ }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  /**
   * @deprecated use {@code example()} instead
   */
  @Deprecated
  void sample(){ }
** </pre>
<!-- tooltip end -->
This inspection works only if the language level of the project or module is 5 or higher.</p>

Use the checkbox below to be warned on the symbols annotated with  **@Deprecated**  without
  an explanation in the  **@deprecated**  Javadoc tag.

" ></outline><outline text="Unnecessary Javadoc link" _note="
Reports Javadoc  **@see** ,
 **{@link}** , and  **{@linkplain}** 
tags that refer to the method owning the comment, the super method of the
method owning the comment, or the class containing the comment.
Such links are unnecessary and can be safely removed with this inspection's quick-fix. The
  quick-fix will remove the entire Javadoc comment if the tag is its only content.</p>
 **Example:** </p>
<pre> **
  class Example {
    /**
     * @see Example#method
     */
    public void method() { }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
class Example {
  public void method() { }
}
** </pre>
<!-- tooltip end -->

Use the checkbox below to ignore inline links ( **{@link}**  and  **{@linkplain}** )
to super methods. Although a link to all super methods is automatically added by the
Javadoc tool, an inline link to the super method may sometimes be needed in texts of the Javadoc comments.

" ></outline><outline text="Unnecessary {@inheritDoc} Javadoc comment" _note="
Reports Javadoc comments that contain only an  **{@inheritDoc}** 
tag. Since Javadoc copies the super class' comment if no comment is present, a
comment containing only  **{@inheritDoc}**  adds nothing.
Also, it reports the  **{@inheritDoc}**  usages in invalid locations, for example, in fields.</p>
Suggests removing the unnecessary Javadoc comment.</p>
 **Example:** </p>
<pre> **
  class Example implements Comparable&lt;Example&gt; {
    /**
     * {@inheritDoc}
     */
    @Override
    public int compareTo(Example o) {
      return 0;
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Example implements Comparable&lt;Example&gt; {
    @Override
    public int compareTo(Example o) {
      return 0;
    }
  }
** </pre>
<!-- tooltip end -->


" ></outline></outline><outline text="JUnit" ><outline text="'assertEquals()' called on array" _note="
Reports JUnit  **assertEquals()**  calls with arguments of an array type.
Such methods compare the arrays' identities instead of the arrays' contents.
Array contents should be checked with the  **assertArrayEquals()**  method.
 **Example:** </p>
<pre> **
  @Test
   **public void**  testSort() {
     **int** [] actual = {248, 496, 0, 56};
    Arrays.sort(actual);
    Assert.assertEquals( **new int** [] {0, 56, 248, 496}, actual);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  @Test
   **public void**  testSort() {
     **int** [] actual = {248, 496, 0, 56};
    Arrays.sort(actual);
    Assert.assertArrayEquals( **new int** [] {0, 56, 248, 496}, actual);
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="'assertEquals()' may be 'assertSame()'" _note="
Reports JUnit  **assertEquals()**  calls that
can be replaced with an equivalent  **assertSame()**  call.
This is possible when the arguments are instances of a  **final**  class that does not override
the  **Object.equals()**  method and makes it explicit that the object identity is compared.
Suggests replacing  **assertEquals()**  with  **assertSame()** .</p>
 **Example:** </p>
<pre> **
  @Test
   **public void**  testObjectType() {
    Object o = getObject();
    Assert.assertEquals(String. **class** , o.getClass());
  }
** </pre>
After the quick fix is applied:</p>
<pre> **
  @Test
   **public void**  testSort() {
    Object o = getObject();
    Assert.assertSame(String. **class** , o.getClass());
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'suite()' method not declared 'static'" _note="
Reports JUnit test case classes with  **suite()**  methods which aren't declared as  **static** .<!-- tooltip end -->
" ></outline><outline text="'super.tearDown()' not called from 'finally' block" _note="
Reports calls of the JUnit 3's  **super.tearDown()**  method that are not performed inside a  **finally**  block.
If there are other method calls in the  **tearDown()**  method that may throw
an exception before the  **super.tearDown()**  call, this may lead to inconsistencies and leaks.
 **Example:** </p>
<pre> **
   **public class**  AnotherTest  **extends**  CompanyTestCase {
     **private**  Path path;
    @Override
     **protected void**  setUp()  **throws**  Exception {
       **super** .setUp();
      path = Files.createTempFile('abcde', '.tmp');
    }
    @Override
     **protected void**  tearDown()  **throws**  Exception {
      Files.delete(path);
       **super** .tearDown();
    }
  }
** </pre>
Improved code:</p>
<pre> **
   **public class**  AnotherTest  **extends**  CompanyTestCase {
     **private**  Path path;
    @Override
     **protected void**  setUp()  **throws**  Exception {
       **super** .setUp();
      path = Files.createTempFile('abcde', '.tmp');
    }
    @Override
     **protected void**  tearDown()  **throws**  Exception {
       **try**  {
        Files.delete(path);
      }  **finally**  {
         **super** .tearDown();
      }
    }
  }
** </pre>
  <!-- tooltip end -->
" ></outline><outline text="Expected exception never thrown in test method body" _note="
Reports checked exceptions expected by a JUnit 4 test-method that are never thrown inside the method body.
Such test methods will never succeed.
 **Example:** </p>
<pre> **
  @Test(expected = CloneNotSupportedException.class)
   **public void**  testIt() {
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="JUnit 3 test can be JUnit 4" _note="
Reports JUnit 3 test classes that can be converted to JUnit 4 test classes.
 **Example:** </p>
<pre> **
  public class MainTestCase extends junit.framework.TestCase {
    public void test() {
      Assert.assertTrue(true);
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  public class MainTestCase {
    @org.junit.Test
    public void test() {
      Assert.assertTrue(true);
    }
  }
** </pre>
<!-- tooltip end -->
This inspection reports if the language level of the project or module is 5 or higher and JUnit 4 available on the classpath.</p>
" ></outline><outline text="JUnit 4 test method in class extending JUnit 3 TestCase" _note="
Reports JUnit 4  **@Test**  annotated methods inside the inheritor
of  **junit.framework.TestCase** . Mixing API of JUnit can lead to problems running the tests.
 **Example:** </p>
<pre> **
  public class MyTest extends TestCase {
      @Test //name doesn't start from 'test', thus would be ignored
      public void wouldBeIgnored() {}
  
      @Test   //name starts from 'test'
      @Ignore //thus would be executed despite @Ignore annotation
      public void testWouldBeExecuted() {}
  }
** </pre>
 **Provided fixes:** </p>
<ul>
  <li>Remove the  **@Ignore**  annotation and rename the test method, so the name doesn't start with 'test'.</li>
  <li>Convert a JUnit 3 test class to JUnit 4.</li>
</ul>
<!-- tooltip end -->
" ></outline><outline text="JUnit 5 malformed '@Nested' class" _note="
Reports  **static**  inner classes annotated with  **@Nested** .
The  **@Nested**  annotation cannot be used on  **static**  classes.</p>
<!-- tooltip end -->
" ></outline><outline text="JUnit 5 malformed repeated test" _note="

Reports the following problems with JUnit 5  **@RepeatedTest** :</p>
<ul>
  <li> **@Test**  and  **@RepeatedTest**  are used on the same method. Even though it is allowed to use them, they have no additional
    effect together.</li>
  <li> **RepetitionInfo**  parameter is used in the  **@BeforeAll**  and  **@AfterAll**  methods. The parameter is
    not injected in these methods.</li>
  <li> **RepetitionInfo**  parameter is used in the  **@BeforeEach**  and  **@AfterEach**  methods in classes
    with  **@Test**   methods. In this case, the parameter won't be injected in  **@Test**  methods.</li>
</ul>
<!-- tooltip end -->
" ></outline><outline text="JUnit assertion can be 'assertThat()' call" _note="
Reports calls to  **Assert.assertEquals()** ,  **Assert.assertTrue()** , etc. methods
which can be migrated to Hamcrest declarative style  **Assert.assertThat()**  calls.
For example:</p>
<pre> **
   **public class**  SubstantialTest {
    @Test
     **public void**  testContents(Collection&lt;String> c, String s) {
      Assert.assertTrue(c.contains(s));
      Assert.assertEquals(c, s);
      Assert.assertNotNull(c);
      Assert.assertNull(c);
      Assert.assertFalse(c.contains(s));
    }
  }
** </pre>
A quick-fix is provided to perform the migration:</p>
<pre> **
   **public class**  SubstantialTest {
    @Test
     **public void**  testContents(Collection&lt;String> c, String s) {
      assertThat(c, hasItem(o));
      assertThat(o, is(c));
      assertThat(c, notNullValue());
      assertThat(c, nullValue());
      assertThat(c, not(hasItem(o)));
    }
  }
** </pre>
<!-- tooltip end -->
This inspection requires that the Hamcrest library is available on the classpath.
Use the  **Statically import matcher's methods**  option to specify if you want the quick-fix to statically import the Hamcrest matcher methods.
" ></outline><outline text="JUnit test annotated with '@Ignore'/'@Disabled'" _note="
Reports usages of JUnit 4's  **@Ignore**  or JUnit 5's  **@Disabled**  annotations.
The tests annotated with these annotations for a long time, especially without a specified reason, are a code smell.
 **Example:** </p>
<pre> **
  @Ignore
   **public class**  UrgentTest {
    @Test
     **public void**  testIt() {
      Assert.assertEquals('expected', 'actual');
    }
  }
** </pre>
<!-- tooltip end -->

  Configure the inspection:
</p>
<ul>
  <li>
    Use the  **Only report annotations without reason**  option to only report the cases when no reason is specified as the annotation's
     **value**  attribute.
  </li>
</ul>
" ></outline><outline text="JUnit test method in product source" _note="
Reports methods annotated with the JUnit 4 or JUnit 5  **@Test**  annotation that are located in production source trees.
This most likely a mistake and can result in test code being shipped into production.
<!-- tooltip end -->
" ></outline><outline text="JUnit test method without any assertions" _note="
Reports test methods that do not contain any assertions. Such methods may indicate either incomplete or weak test cases.
 **Example:** </p>
<pre> **
   **public class**  ExtensiveTest {
    @Test
     **public void**  testAlive() {
      System.out.println('nothing');
    }
  }
** </pre>
<!-- tooltip end -->

  Configure the inspection:
</p>
<ul>
  <li>
      Use the table to specify the combinations of fully qualified class name and method name regular expression
      that should qualify as assertions. Class names also match subclasses.
  </li>
  <li>
      Use the  **'assert' keyword is considered an assertion**  option to specify if the Java  **assert**  statements using the  **assert**  keyword should be considered an assertion.
  </li>
  <li>
      Use the  **Ignore test methods which declare exceptions**  option to ignore the test methods that declare exceptions.
      This can be useful when you have tests that will throw an exception on failure and thus don't need any assertions.
  </li>
</ul>

" ></outline><outline text="JUnit TestCase in product source" _note="
Reports JUnit 3 test classes in product source trees.
This most likely indicates a programmer's error and can result in test code being shipped
into production.
<!-- tooltip end -->
" ></outline><outline text="JUnit TestCase with non-trivial constructors" _note="
Reports JUnit test cases with initialization logic in their constructors.
If a constructor fails, the  **@After**  annotated or  **tearDown()**  method won't be called.
This can leave the test environment partially initialized, which can adversely affect other tests.
Instead, initialization of JUnit test cases should be done in a  **setUp()**  or  **@Before**  annotated method.
Bad example:</p>
<pre> **
   **public class**  ImportantTest {
     **private**  File file;
     **public**  ImportantTest()  **throws**  IOException {
      file = File.createTempFile('xyz', '.tmp');
    }
    // ... tests go here
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Malformed 'setUp()' or 'tearDown()' method" _note="
Reports JUnit 3  **setUp()**  or  **tearDown()**  methods that either are not declared
 **public** , do not return  **void** , or take arguments.
Such  **setUp()**  or  **tearDown()**  methods are most likely created unintentionally,
and will not be executed by JUnit test runners.
For example:</p>
<pre> **
   **public class**  WeightyTest  **extends**  TestCase {
     **private**  File file;
     **private int**  setUp(String prefix)  **throws**  IOException {
      file = File.createTempFile(prefix, '.tmp');
       **return**  0;
    }
    // ... tests go here
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Malformed @Before or @After method" _note="
Reports JUnit 4  **@Before**  or  **@After**  methods that are not declared  **public** , do not return
 **void** , or take arguments. Such methods are easy to create inadvertently, but they will not be executed by JUnit tests runners.
The inspection provides fixes for method signatures.</p>
 **Example:** </p>
<pre> **
  @Before private int foo(int arg) { ... }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  @Before public void foo() { ... }
** </pre>
" ></outline><outline text="Malformed @BeforeClass/@BeforeAll or @AfterClass/@AfterAll method" _note="
Reports JUnit 4.0  **@BeforeClass**  or  **@AfterClass**  methods
that are not declared  **public**  and  **static** ,
do not return  **void** , or take arguments.
Such methods are easy to create inadvertently, but they will not be executed by JUnit tests runners.
 **Example:** </p>
<pre> **
  public class MainTest {
    @BeforeClass
    String beforeClass(int i) {
    }
  }
** </pre>
After the quick-fix is applied, the method changes to:</p>
<pre> **
  class MainTest {
    @BeforeClass
    public static void beforeClass() {
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Malformed @DataPoint field" _note="
Reports fields or methods annotated with  **@DataPoint**  that are not  **public**  and/or not  **static** .
A <a href='https://github.com/junit-team/junit4/wiki/Theories'>theories</a> test class with a malformed  **@DataPoint**  member
cannot be run.
For example:</p>
<pre> **
  @RunWith(Theories.class)
   **public class**  SeriousTest {
    @DataPoint
     **private**  String dataPoint = 'value';
    @DataPoint('generated')
     **private**  String generatedDataPoint() {
       **return**  'generated value';
    }
    @Theory
     **public void**  theoryMethod(String param) {
      // ...
    }
  }
** </pre>
A quick fix is provided to fix the modifiers:</p>
<pre> **
  @RunWith(Theories.class)
   **public class**  SeriousTest {
    @DataPoint
     **public static**  String dataPoint = 'value';
    @DataPoint('generated')
     **public static**  String generatedDataPoint() {
       **return**  'generated value';
    }
    @Theory
     **public void**  theoryMethod(String param) {
      // ...
    }
  }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Malformed test method" _note="
Reports any JUnit test methods that are declared  **static** , not declared
 **public** , do not return  **void** , or have parameters.
Such test methods are easy to create inadvertently, but they will not be executed by
JUnit test runners.
 **Example:** </p>
<pre> **
  @Test
  void test() {
    assertEquals(1, 1);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  @Test
  public void test() {
    assertEquals(1, 1);
  }
** </pre>
<!-- tooltip end -->

Use the inspection options to specify annotations.
  Any parameter annotated with one of these annotations will not be reported.

" ></outline><outline text="Multiple exceptions declared on test method" _note="
Reports JUnit test method  **throws**  clauses with more than one exception.
Such clauses are unnecessarily verbose.
Test methods will not be called from other project code, so there is no need to handle these exceptions separately.
For example:</p>
<pre> **
  @Test
   **public void**  testReflection()  **throws**  NoSuchMethodException,
      InvocationTargetException, IllegalAccessException {
    String result = (String) String.class.getMethod('trim')
        .invoke(' hello ');
    assertEquals('hello', result);
  }
** </pre>
A quick fix is provided to replace the exception declarations with a single exception:</p>
<pre> **
  @Test
   **public void**  testReflection()  **throws**  Exception {
    String result = (String) String.class.getMethod('trim')
        .invoke(' hello ');
    assertEquals('hello', result);
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Old style JUnit test method in JUnit 4 class" _note="
Reports JUnit 3 style test methods that are located inside a class
that does not extend the JUnit 3  **TestCase**  class and contains JUnit 4 or JUnit 5  **@Test**  annotated methods.
Such test methods cannot be run.
<!-- tooltip end -->
" ></outline><outline text="Parameterized test class without data provider method" _note="
Reports JUnit 4 <a href='https://github.com/junit-team/junit4/wiki/parameterized-tests'>parameterized test</a> classes that are annotated
with  **@RunWith(Parameterized.class)**  but either do not include a data provider method annotated with  **@Parameterized.Parameters**  or
this method has an incorrect signature. Such test classes cannot be run.
The data provider method should be  **public**  and  **static**  and have a return type of  **Iterable**  or
 **Object[]** .
Suggests creating an empty parameter provider method or changing the signature of the incorrect data provider method.</p>

 **Example:** 
<pre> **
  @RunWith(Parameterized.class)
   **public class**  ImportantTest {
     **private int**  input;
     **private int**  expected;
    ImportantTest( **int**  input,  **int**  expected) {
       **this** .input = input;
       **this** .expected = expected;
    }
    // ... test cases
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  @RunWith(Parameterized.class)
   **public class**  ImportantTest {
     **private int**  input;
     **private int**  expected;
    ImportantTest( **int**  input,  **int**  expected) {
       **this** .input = input;
       **this** .expected = expected;
    }
    @Parameters
     **public static**  Iterable&lt;Object[]> parameters() {
       **return null** ;
    }
    // ... test cases
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Test annotation without '@Retention(RUNTIME)' annotation" _note="
Reports annotations with a  **SOURCE**  or  **CLASS**  retention policy that are supposed to be used by JUnit 5.
Such annotations are not available at runtime and most probably their retention policy should be fixed to be accessible through reflection.
Note that if the retention policy is not specified, then the default retention policy  **CLASS**  is used.</p>
 **Example:** </p>
<pre> **
  @Testable
  public @interface UnitTest {}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  @Retention(RetentionPolicy.RUNTIME)
  @Testable
  public @interface UnitTest {}
** </pre>
<!-- tooltip end -->
<!--
<small>New in 2017.2</small></p>-->
" ></outline><outline text="Test class with no tests" _note="
Reports non- **abstract**  test cases without any test methods.
Such test cases usually indicate unfinished code
  or could be a refactoring leftover that should be removed.</p>
Example:</p>
<pre> **
   **public class**  CrucialTest {
    @Before
     **public void**  setUp() {
      System.out.println('setting up');
    }
  }
** </pre>
<!-- tooltip end -->
Use the  **Ignore test cases which have superclasses with test methods**  option to ignore test cases which have super classes
  with test methods.

" ></outline><outline text="Unconstructable JUnit TestCase" _note="
Reports JUnit test cases that are not  **abstract**  and do not
expose a public  **no-arg**  constructor or a public constructor that takes a single string
as an argument.
Such test cases cannot be run by most JUnit test runners.
 **Example:** </p>
<pre> **
public class MyTest {
  private MyTest() {} // no-arg constructor is private
  @Test
  public void testSomething() {
    assertEquals(1, 1);
  }
}
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Usage of obsolete 'junit.framework.Assert' method" _note="
Reports any calls to methods from the  **junit.framework.Assert**  class. This class is
obsolete and the calls can be replaced by calls to methods from the  **org.junit.Assert**  class.
For example:</p>
<pre> **
   **import**  org.junit.*;
   **public class**  NecessaryTest {
    @Test
     **public void**  testIt() {
      junit.framework.Assert.assertEquals('expected', 'actual');
    }
  }
** </pre>
After the quick fix is applied, the result looks like the following:</p>
<pre> **
   **import**  org.junit;
   **public class**  NecessaryTest {
     **public void**  testIt() {
      Assert.assertEquals('expected', 'actual');
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline></outline><outline text="Logging" ><outline text="'public' method without logging" _note="
Reports any public methods that do not contain a logging statement. This inspection does not report
simple getters and setters.
For example:</p>
<pre> **
   **public class**  Crucial {
     **private static final ** Logger LOG = LoggerFactory.getLogger(Crucial.class);
     **public void**  doImportantStuff() {
      // warning on this method
    }
     **public void**  doOtherStuff() {
      LOG.info('do other stuff');
    }
  }
** </pre>
<!-- tooltip end -->

Use the table below to specify Logger class names.
Public methods that do not use instance methods of the specified classes will be reported by this inspection.
" ></outline><outline text="Class with multiple loggers" _note="
Reports classes that have multiple loggers declared.
Ensuring that every class has a single dedicated logger is an important step in providing a unified logging
implementation for an application.
For example:</p>
<pre> **
   **public class**  Critical {
     **protected static final**  Logger LOG = Logger.getLogger(Critical.class);
     **protected static final**  Logger myLogger = Logger.getLogger(getClass());
  }
** </pre>
<!-- tooltip end -->

Use the table below to specify Logger class names.
Classes which declare multiple fields that have the type of one of the specified classes will be reported by this inspection.


" ></outline><outline text="Class without logger" _note="
Reports classes which do not have a declared logger.
Ensuring that every class has a dedicated logger is an important step in providing a unified logging
  implementation for an application. Interfaces, enumerations, annotations, inner classes, and abstract classes are not reported by this inspection.</p>
For example:</p>
<pre> **
   **public class**  NoLoggerDeclared {
     **int**  calculateNthDigitOfPi( **int**  n) {
      // todo
       **return**  1;
    }
  }
** </pre>
<!-- tooltip end -->

  Use the table in the  **Options**  section to specify logger class names.
Classes which do not declare a field with the type of one of the specified classes will be reported by this inspection.

" ></outline><outline text="Log condition does not match logging call" _note="
Reports <em>is log enabled for</em> conditions of  **if**  statements that
do not match the log level of the contained logging call.

For example:
<pre> **
   **if**  (LOG.isTraceEnabled()) {
    // debug level logged, but checked for trace level
    LOG.debug('some log message');
  }
** </pre>
<!-- tooltip end -->
This inspection understands the <em>java.util.logging</em>, <em>log4j</em>, <em>Log4j 2</em>, <em>Apache Commons Logging</em>
and the <em>SLF4J</em> logging frameworks.
" ></outline><outline text="Logger initialized with foreign class" _note="
Reports  **Logger**  instances that are initialized with a  **class**  literal from a different class than the  **Logger** 
is contained in. This can easily happen when copy-pasting some code from another class and
may result in logging events under an unexpected category and cause filters to be applied incorrectly.
A quick-fix is provided to replace the foreign class literal with one from the surrounding class.</p>
 **Example:** </p>
<pre> **
   **public class**  Paramount {
     **protected static final**  Logger LOG = Logger.getLogger(Critical.class);
    // ... other fields and methods
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **public class**  Paramount {
     **protected static final**  Logger LOG = Logger.getLogger(Paramount.class);
    // ... other fields and methods
  }
** </pre>
<!-- tooltip end -->

  Configure the inspection:
</p>
<ul>
  <li>Use the table to specify the logger factory classes and logger factory methods recognized by this inspection.</li>
  <li>Use the  **Ignore loggers initialized with a superclass**  option to ignore loggers that are initialized with a superclass of
  the class containing the logger.</li>
  <li>Use the  **Ignore loggers in non-public classes**  to only warn on loggers in  **public**  classes.</li>
</ul>
" ></outline><outline text="Logging call not guarded by log condition" _note="
Reports logging calls with non-constant arguments that are not surrounded by a guard condition.
The evaluation of the arguments of a logging call can be expensive.
Surrounding a logging call with a guard clause prevents that cost when logging
is disabled for the level used by the logging statement. This is especially useful for the
least serious level (trace, debug, finest) of logging calls, because those are
most often disabled in a production environment.
 **Example:** </p>
<pre> **
   **public class**  Principal {
     **void**  bad(Object object) {
       **if**  (true) {
        LOG.debug('log log log ' + expensiveCalculation(object));
      }
      LOG.debug('some more logging ' + expensiveCalculation(1));
    }
     **void**  good(Object) {
       **if**  (LOG.isDebug()) {
        LOG.debug('value: ' + expensiveCalculation(object));
      }
    }
  }
** </pre>
<!-- tooltip end -->

  Configure the inspection:
</p>
<ul>
  <li>
      Use the  **Logger class name**  field to specify the logger class name used.
  </li>
  <li>
    
      Use the table to specify the logging methods this inspection should warn on, with the corresponding log condition text.
  </li>
  <li>
      Use the  **Flag all unguarded logging calls**  option to have the inspection flag all unguarded log calls, not only those with non-constant arguments.
  </li>
</ul>
" ></outline><outline text="Non-constant logger" _note="
Reports logger fields that are not declared  **static**  and/or  **final** .
Ensuring that every class logger is effectively constant and bound to that class
simplifies the task of providing a unified logging implementation for an application.
A quick-fix is provided to change the logger modifiers to  **static final** .</p>
 **Example:** </p>
<pre> **
   **public class**  Significant {
     **private**  Logger LOG = Logger.getLogger(Critical.class);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **public class**  Significant {
     **private static final**  Logger LOG = Logger.getLogger(Critical.class);
  }
** </pre>
<!-- tooltip end -->

  Configure the inspection:
</p>
<ul>
  <li>Use the  **Logger class name**  table to specify logger class names. The inspection will report the fields that are not  **static**  and  **final**  and are of the type equal to one of the specified class names.
  </li>
</ul>
" ></outline><outline text="Non-constant string concatenation as argument to logging call" _note="
Reports non-constant string concatenations that are used as arguments to  **SLF4J**  and  **Log4j 2**  logging methods.
Non-constant concatenations are evaluated at runtime even when the logging message is not logged; this can negatively impact performance.
It is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled.
 **Example:** </p>
<pre> **
   **public class**  Vital {
     **private static final**  Logger LOG = LoggerFactory.getLogger(Vital.class);
     **public void**  saveTheWorld( **int**  i, String s,  **boolean**  b) {
      LOG.info('saveTheWorld(' + i + ', ' + s + ', '  + b + ')');
      // todo
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **public class**  Vital {
     **private static final**  Logger LOG = LoggerFactory.getLogger(Vital.class);
     **public void**  saveTheWorld( **int**  i, String s,  **boolean**  b) {
      LOG.info('saveTheWorld({}, {}, {})', i, s, b);
      // todo
    }
  }
** </pre>
<!-- tooltip end -->

  Configure the inspection:
</p>
<ul>
  <li>
    Use the  **Warn on**  list to ignore certain higher logging levels. Higher logging levels may be enabled even in production, and the arguments will always be evaluated.
  </li>
</ul>
" ></outline><outline text="Number of placeholders does not match number of arguments in logging call" _note="
Reports SLF4J or Log4j 2 logging calls, such as  **logger.info('{}: {}', key)**  where the number of  **{}**  placeholders
in the logger message doesn't match the number of other arguments to the logging call.
<!-- tooltip end -->
" ></outline></outline><outline text="Lombok" ><outline text="@Qualifier not copyable by lombok" _note="
Reports  Spring  **@Qualifier**  annotations on class fields that are ignored by the corresponding Lombok
 **@RequiredArgsConstructor**  and  **@AllArgsConstructor**  annotations.
The generated constructors will not receive the  **@Qualifier**  annotation without
a  **lombok.copyableAnnotations**  definition inside the  **lombok.config**  file.

" ></outline><outline text="Deprecated Lombok annotations" _note="
Reports deprecated Lombok annotations and suggests quick-fixes to replace them with the ones promoted to the main package.

" ></outline><outline text="Lombok annotations" _note="
Offers general inspections for Lombok annotations.

" ></outline><outline text="Redundant definitions" ><outline text="@Slf4j" _note="
Reports explicitly defined <em>Slf4j</em> Loggers. The  **@Slf4j**  annotation can be used instead.

" ></outline></outline><outline text="Redundant modifiers" ><outline text="@UtilityClass modifiers" _note="
Reports unneeded modifiers for classes annotated with  **@UtilityClass** .

" ></outline><outline text="@Value modifiers" _note="
Reports unneeded modifiers for classes annotated with  **@Value** .

" ></outline><outline text="Unnecessary final before 'val'" _note="
Reports unneeded  **final**  modifiers before  **val** .

" ></outline></outline></outline><outline text="Memory" ><outline text="'StringBuilder' field" _note="
Reports fields of type  **java.lang.StringBuffer**  or  **java.lang.StringBuilder** .
Such fields can grow without limit and are often the cause of memory leaks.
 **Example:** </p>
<pre> **
  public class Example {
    private StringBuilder builder = new StringBuilder();
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Anonymous class may be a named 'static' inner class" _note="
Reports anonymous classes that may be safely replaced with  **static**  inner classes.
An anonymous class may be a  **static**  inner class if it doesn't explicitly reference its enclosing instance or local classes from its surrounding method.

A  **static**  inner class does not keep an implicit reference to its enclosing instance.
This prevents a common cause of memory leaks and uses less memory per class instance.
</p>
The quick-fix extracts the anonymous class into a named  **static**  inner class.</p>
 **Example:** </p>
<pre> **
  void sample() {
    Thread thread = new Thread(new Runnable() {
      @Override
      public void run() {
      }
    });
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void sample() {
    Thread thread = new Thread(new Task());
  }
  private static class Task implements Runnable {
    @Override
    public void run() {
    }
  }
** </pre>
  <!-- tooltip end -->
" ></outline><outline text="Calls to 'System.gc()' or 'Runtime.gc()'" _note="
Reports  **System.gc()**  or  **Runtime.gc()**  calls.
While occasionally useful in testing, explicitly triggering garbage collection via  **System.gc()**  is almost never recommended in production code and can result in serious performance issues.
<!-- tooltip end -->
" ></outline><outline text="Inner class may be 'static'" _note="
Reports inner classes that can be made  **static** .
A  **static**  inner class does not keep an implicit reference to its enclosing instance.
  This prevents a common cause of memory leaks and uses less memory per instance of the class.</p>
 **Example:** </p>
<pre> **
   **public class**  Outer {
     **class**  Inner { // not static
       **public void**  foo() {
        bar('x');
      }
       **private void**  bar(String string) {}
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **public class**  Outer {
     **static class**  Inner {
       **public void**  foo() {
        bar('x');
      }
       **private void**  bar(String string) {}
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Return of instance of anonymous, local or inner class" _note="
Reports  **return**  statements that return an instance of an anonymous, local, or inner class.
Such instances keep an implicit reference to the outer instance, which can prevent the outer instance from being garbage-collected.
Any caller of a method returning such an instance might cause a memory leak by holding on to the instance returned.
<!-- tooltip end -->

  Configure the inspection:
</p>
<ul>
  <li>Use the  **Ignore returns from non-public methods**  option to ignore returns from  **protected**  or package-private methods.
    Returns from  **private**  methods are always ignored.
  </li>
</ul>
" ></outline><outline text="Static collection" _note="
Reports static fields of a  **Collection**  type. While it's
not necessarily a problem, static collections often cause memory leaks and are
therefore prohibited by some coding standards.
 **Example:** </p>
<pre> **
  public class Example {
    static List&lt;String&gt; list = new ArrayList&lt;&gt;();
  }
** </pre>
<!-- tooltip end -->

  Configure the inspection:
</p>
<ul>
  <li>Use the  **Ignore weak static collections or maps**  option to ignore the fields of the  **java.util.WeakHashMap**  type.</li>
</ul>
" ></outline><outline text="Unnecessary zero length array usage" _note="
Reports allocations of arrays with known lengths of zero when there is a constant for that in the class of the array's element type.
As zero-length arrays are immutable, you can save memory reusing the same array instance.
 **Example:** </p>
<pre> **
  class Item {
    // Public zero-length array constant that can be reused 
    public static final Item[] EMPTY_ARRAY = new Item[0];
  }
  class EmptyNode {
    Item[] getChildren() {
      // Unnecessary zero-length array creation
      return new Item[0];
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class EmptyNode {
    Item[] getChildren() {
      return Item.EMPTY_ARRAY;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Zero-length array allocation" _note="
Reports allocations of arrays with known lengths of zero.

  Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly
  allocate new ones. Such sharing may provide useful optimizations in the program runtime or footprint.
</p>

  Note that the inspection does not report zero-length arrays allocated as static final fields,
  since those arrays are assumed to be used for implementing array sharing.
</p>
<!-- tooltip end -->

" ></outline></outline><outline text="Method metrics" ><outline text="Constructor with too many parameters" _note="
Reports constructors whose number of parameters exceeds the specified maximum.
Such objects are hard to instantiate, especially if some parameters are optional.
Constructors with too many parameters may indicate that refactoring is necessary.
Consider applying the builder pattern, for example.
 **Example:** </p>
<pre> **
  public BankAccount(long accountNumber,
                     String owner,
                     double balance,
                     double interestRate) {
    // fields initialization
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Parameter limit**  field to specify the maximum allowed number of parameters in a constructor.</li>
  <li>Use the  **Ignore constructors with visibility**  list to specify whether the inspection should ignore constructors with specific visibility.</li>
</ul>
" ></outline><outline text="Method with more than three negations" _note="
Reports methods with three or more negations.
Such methods may be confusing.
 **Example:** </p>
<pre> **
  void doSmth(int a, int b, boolean flag1, boolean flag2) {
    if (!flag && !flag2) {
      if (a != b) {
        doOther();
      }
    }
  }
** </pre>
Without negations, the method becomes easier to understand:</p>
<pre> **
  void doSmth(int a, int b, boolean flag1, boolean flag2) {
    if (flag1 || flag2 || a == b) return;
    doOther();
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore negations in 'equals()' methods**  option to disable the inspection within  **equals()**  methods.</li>
  <li>Use the  **Ignore negations in 'assert' statements**  to disable the inspection within  **assert**  statements.</li>
</ul>
" ></outline><outline text="Method with multiple loops" _note="
Reports methods that contain more than one loop statement.
 **Example:** </p>
The method below will be reported because it contains two loops:</p>
<pre> **
  void methodWithTwoLoops(int n1, int n2) {
    for (int i = 0; i &lt; n1; i++) {
      System.out.println(i);
    }
    int j = 0;
    while (j &lt; n2) {
      System.out.println(j);
      j++;
    }
  }
** </pre>
The following method will also be reported because it contains a nested loop:</p>
<pre> **
  void methodWithNestedLoop(int n1, int n2) {
    for (int i = 0; i &lt; n1; i++) {
      for (int j = 0; j &lt; n2; j++) {
        System.out.println(i + j);
      }
    }
  }
** </pre>
" ></outline><outline text="Method with multiple return points" _note="
Reports methods whose number of  **return**  points exceeds the specified maximum.
Methods with too many  **return**  points may be confusing
and hard to refactor.
A  **return**  point is either a  **return**  statement or a falling through the bottom of a
   **void**  method or constructor.</p>
 **Example:** </p>
The method below is reported if only two  **return**  statements are allowed:</p>
<pre> **
  void doSmth(User[] users) {
    for (User user : users) {
      if (cond1(user)) {
        user.setId(getId());
        return;
      } else if (cond2(user)) {
        if (cond3(user)) {
          user.setId(getId());
          return;
        }
      }
    }
  }
** </pre>
Consider rewriting the method so it becomes easier to understand:</p>
<pre> **
  void doSmth(User[] users) {
    for (User user : users) {
      if (cond1(user) || cond2(user) && cond3(user)) {
        user.setId(getId());
        return;
      }
    }
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Return point limit**  field to specify the maximum allowed number of  **return**  points for a method.</li>
  <li>Use the  **Ignore guard clauses**  option to ignore guard clauses.
    A guard clause is an  **if**  statement that contains only a  **return**  statement</li>
  <li>Use the  **Ignore for 'equals()' methods**  option to ignore  **return**  points inside  **equals()**  methods.</li>
</ul>
" ></outline><outline text="Method with too many exceptions declared" _note="
Reports methods that have too many types of exceptions in its  **throws**  list.
Methods with too many exceptions declared are a good sign that your error handling code is getting overly complex.</p>
<!-- tooltip end -->
Use the  **Exceptions thrown limit**  field to specify the maximum number of exception types a method is allowed to have in its  **throws**  list.

" ></outline><outline text="Method with too many parameters" _note="
Reports methods whose number of parameters exceeds the specified maximum.
Methods with too many parameters can be a good sign that a refactoring is necessary.
Methods that have super methods are not reported.</p>
<!-- tooltip end -->
Use the  **Parameter limit**  field to specify the maximum allowed number of parameters for a method.

" ></outline><outline text="Overly complex method" _note="
Reports methods that have too many branch points.
A branch point is one of the following:</p>
<ul>
  <li>loop statement</li>
  <li> **if**  statement</li>
  <li>ternary expression</li>
  <li> **catch**  section</li>
  <li>expression with one or more  **&&**  or  **||**  operators inside</li>
  <li> **switch**  block with non-default branches</li>
</ul>
Methods with too high cyclomatic complexity may be confusing and hard to test.</p>
<!-- tooltip end -->
Use the  **Method complexity limit**  field to specify the maximum allowed cyclomatic complexity for a method.

" ></outline><outline text="Overly coupled method" _note="
Reports methods that reference too many other classes.
Methods with too high coupling can be very fragile and should be probably split into smaller methods.
Each referenced class is counted only once no matter how many times it is referenced.</p>
  <!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Method coupling limit**  field to specify the maximum allowed coupling for a method.</li>
  <li>Use the  **Include couplings to java system classes**  option to count references to classes from  **java** or  **javax**  packages.</li>
  <li>Use the  **Include couplings to library classes**  option to count references to third-party library classes.</li>
</ul>
" ></outline><outline text="Overly long lambda expression" _note="
Reports lambda expressions whose number of statements exceeds the specified maximum.
Lambda expressions that are too long may be confusing, and it is often better to extract the statements into a separate method.

The following statements are not counted:</p>
<ul>
  <li>empty statements (semicolons)</li>
  <li>block statements</li>
  <li> **for**  loop initialization statements, that is,  **int i = ...**  within a  **for(int i = ...;...)** 
    statement</li>
  <li> **for**  loop update statements, that is,  **i += 2**  within a  **for(int i = ...;...; i += 2)** 
    statement</li>
</ul>
<!-- tooltip end -->
Use the   **Non-comment source statements limit**  field to specify the maximum allowed number of statements in a lambda expression.

" ></outline><outline text="Overly long method" _note="
Reports methods whose number of statements exceeds the specified maximum.
Methods with too many statements may be confusing and are a good sign that refactoring is necessary.</p>
The following statements are not counted:</p>
<ul>
  <li>empty statements (semicolons)</li>
  <li>block statements</li>
  <li> **for**  loop initialization statements, that is,  **int i = ...**  within a  **for(int i = ...;...)** 
    statement</li>
  <li> **for**  loop update statements, that is,  **i += 2**  within a  **for(int i = ...;...; i += 2)** 
    statement</li>
</ul>
<!-- tooltip end -->
Use the  **Maximum statements per method**  field to specify the maximum allowed number of statements in a method.

" ></outline><outline text="Overly nested method" _note="
Reports methods whose body contain too deeply nested statements.
Methods with too deep statement
  nesting may be confusing and are a good sign that refactoring may be necessary.</p>
<!-- tooltip end -->
Use the  **Nesting depth limit**  field to specify the maximum allowed nesting depth for a method.

" ></outline></outline><outline text="Modularization issues" ><outline text="Class independent of its module" _note="
Reports classes that:
<ul>
  <li>do not depend on any other class in their module</li>
  <li>are not a dependency for any other class in their module</li>
</ul>
Such classes are an indication of ad-hoc or incoherent modularisation strategies,
  and may often profitably be moved.</p>
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
" ></outline><outline text="Class only used from one other module" _note="
Reports classes that:
<ul>
  <li>do not depend on any other class in their module</li>
  <li>depend on classes from a different module</li>
  <li>are a dependency only for classes from this other module</li>
</ul>
Such classes could be moved into the module on which they depend.</p>
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
" ></outline><outline text="Inconsistent language level settings" _note="
Reports modules which depend on other modules with a higher language level. 
Such dependencies should be removed or the language level of the module be increased.</p>
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>

" ></outline><outline text="Module with too few classes" _note="
Reports modules that contain too few classes. Overly small modules may indicate a too fragmented design.
Java, Kotlin and Groovy classes are counted.
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
Use the  **Minimum number of classes**  field to specify the minimum number of classes a module may have.

" ></outline><outline text="Module with too many classes" _note="
Reports modules that contain too many classes. Overly large modules may indicate a lack of design clarity.
Java, Kotlin and Groovy classes are counted.
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
Use the  **Maximum number of classes**  field to specify the maximum number of classes a module may have.

" ></outline></outline><outline text="Naming conventions" ><outline text="Class" ><outline text="Class name prefixed with package name" _note="
Reports classes whose names are prefixed with their package names, ignoring differences in
capitalization.
While occasionally having such names is reasonable, they are often used due to a poor naming scheme, may be redundant and
  annoying.</p>
 **Example:** 
  <pre> **
  package byteCode;
  class ByteCodeAnalyzer {}
** </pre>
A quick-fix that renames such classes is available only in the editor.</p>
<!-- tooltip end -->


" ></outline><outline text="Class name same as ancestor name" _note="
Reports classes that have the same name as one of their superclasses, while their fully qualified names remain different.
Such class names may be very confusing.
 **Example:** </p>
  <pre> **
  package util;
  abstract class Iterable&lt;T&gt; implements java.lang.Iterable&lt;T&gt; {}
** </pre>
A quick-fix that renames such classes is available only in the editor.</p>
<!-- tooltip end -->

" ></outline><outline text="Class naming convention" _note="
Reports classes whose names are too short, too long, or do not follow
the specified regular expression pattern.
 **Example:**  if the inspection is enabled for tests, and the specified length for the minimum class name is 8 (the default), the following test class
   produces a warning because the length of its name is 6, which is less than 8:  **public class MyTest{}** .
A quick-fix that renames such classes is available only in the editor.</p>
<!-- tooltip end -->
Configure the inspection:</p>

  Use the list in the  **Options**  section to specify which classes should be checked. Deselect the checkboxes for the classes for which
  you want to skip the check.</p>
For each class type, specify the minimum length, maximum length, and the regular expression expected for class names using the
  provided input fields. Specify  **0**  in the length fields to skip corresponding checks.</p>
Regular expressions should be specified in the standard  **java.util.regex**  format.</p>
" ></outline><outline text="Exception class name does not end with 'Exception'" _note="
Reports exception classes whose names don't end with  **Exception** .
 **Example:**   **class NotStartedEx extends Exception {}** 
A quick-fix that renames such classes is available only in the editor.</p>
<!-- tooltip end -->


" ></outline><outline text="Non-exception class name ends with 'Exception'" _note="
Reports non- **exception**  classes whose names end with  **Exception** .
Such classes may cause confusion by breaking a common naming convention and
  often indicate that the  **extends Exception**  clause is missing.</p>
 **Example:** 
  <pre> **public class NotStartedException {}** </pre>
A quick-fix that renames such classes is available only in the editor.</p>
<!-- tooltip end -->
" ></outline></outline><outline text="Field naming convention" _note="
Reports fields whose names are too short, too long, or do not follow
the specified regular expression pattern.
 **Example:**  if the inspection is enabled for constants, and the minimum specified length for a field name is 5 (the default), the following constant
  produces a warning because the length of its name is 3, which is less than 5:   **public static final int MAX = 42;** .</p>
A quick-fix that renames such fields is available only in the editor.</p>
<!-- tooltip end -->
Configure the inspection:</p>
Use the list in the  **Options**  section to specify which fields should be checked. Deselect the checkboxes for the fields for which
you want to skip the check.</p>
For each field type, specify the minimum length, maximum length, and the regular expression expected for field names using the
  provided input fields.
  Specify  **0**  in the length fields to skip the corresponding checks.</p>
Regular expressions should be specified in the standard
   **java.util.regex**  format.</p>

" ></outline><outline text="Java module name contradicts the convention" _note="
Reports cases when a module name contradicts Java Platform Module System recommendations.
One of the <a href='http://mail.openjdk.java.net/pipermail/jpms-spec-experts/2017-March/000659.html'>recommendations</a>
  is to avoid using digits at the end of module names.</p>
 **Example:** </p>
<pre> **
module foo1.bar2 {}
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Lambda parameter naming convention" _note="
Reports lambda parameters whose names are too short, too long, or do not follow
the specified regular expression pattern.
 **Example:**   **Function&lt;String, String&gt; id = X -&gt; X;**  
  should be reported if the inspection is enabled with the default settings in which a parameter name should start with a lowercase letter.</p>
<!-- tooltip end -->
Configure the inspection:</p>

Use the fields in the  **Options**  section to specify the minimum length, maximum length, and a regular expression expected for lambda parameter names.
  Specify  **0**  in order not to check the length of names.</p>
Regular expressions should be specified in the standard  **java.util.regex**  format.</p>
" ></outline><outline text="Local variable naming convention" _note="
Reports local variables whose names are too short, too long, or do not follow
the specified regular expression pattern.
 **Example:**   **int X = 42;** 
  should be reported if the inspection is enabled with the default settings in which a variable name should start with a lowercase letter.</p>
<!-- tooltip end -->
Configure the inspection:</p>

Use the fields in the  **Options**  section to specify the minimum length, maximum length, and a regular expression expected for local variable names.
Specify  **0**  in order not to check the length of names. Regular expressions should be specified in the standard  **java.util.regex**  format.
Use checkboxes to ignore  **for** -loop and  **catch**  section parameters.</p>
" ></outline><outline text="Method" ><outline text="Boolean method name must start with question word" _note="
Reports boolean methods whose names do not start with a question
word.
Boolean methods that override library methods are ignored by this inspection.</p>
 **Example:** </p>
<pre> **boolean empty(List&lt;String&gt; list) {
  return list.isEmpty();
}** </pre>
A quick-fix that renames such methods is available only in the editor.</p>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Boolean method name prefixes**  list to specify acceptable question words to start boolean method names with.</li>
  <li>Use the  **Ignore methods with 'java.lang.Boolean' return type**  option to ignore methods with the  **java.lang.Boolean**  return type. </li>
  <li>Use the  **Ignore boolean methods in an @interface**  option to ignore boolean methods in annotation types ( **@interface** ).</li>
  <li>Use the  **Ignore methods overriding/implementing a super method**  to ignore methods the have supers.</li>
</ul>
" ></outline><outline text="Lambda-unfriendly method overload" _note="
Reports overloaded methods that take functional interfaces with conflicting abstract method signatures.
Such overloads introduce ambiguity and require callers to cast lambdas to a specific type or specify lambda parameter types explicitly.
  It is preferable to give the overloaded methods different names to eliminate ambiguity.</p>
Example:</p>
<pre> **
  interface MyExecutor {
    void execute(Supplier&lt;?&gt; supplier);
    void execute(Callable&lt;?&gt; callable);
  }
** </pre>

Here,  **Supplier**  and  **Callable**  are functional interfaces
whose single abstract methods do not take any parameters and return a non-void value.
As a result, the type of the lambda cannot be inferred at the call site unless an explicit cast is used.
</p>
<!-- tooltip end -->
" ></outline><outline text="Method name same as class name" _note="
Reports methods that are named identically to their class.
While such naming is allowed by the Java language, by convention it is reserved for defining constructors.
Using it for methods is probably a mistake or bad practice.
 **Example:** </p>
<pre> **
  class MyClass {
    int val;
    // Method MyClass named identically to its containing class.
    // Likely, 'void' was added by mistake.
    void MyClass(int val) {
      this.val = val;
    }
  }
** </pre>
When appropriate, a quick-fix converts the method to a constructor:</p>
<pre> **
  class MyClass {
    int val;
    MyClass(int val) {
      this.val = val;
    }
  }
** </pre>
Another quick-fix renames the method.</p>
<!-- tooltip end -->
" ></outline><outline text="Method name same as parent class name" _note="
Reports methods that have the same name as the superclass of the method's class, as
such a method name may be confusing.
This inspection doesn't check interfaces or superclasses deep in the hierarchy.</p>
 **Example:** 
<pre> **
  class Parent {}
  class Child extends Parent {
     public Parent Parent() {
       return null;
     }
  }
** </pre>
A quick-fix that renames such methods is available only in the editor.</p>
<!-- tooltip end -->


" ></outline><outline text="Method names differing only by case" _note="
Reports cases in which multiple methods of a class have the names that differ only by
case. Such names may be very confusing.
 **Example:** 
<pre> **
  public int hashcode() { // reported, should be hashCode probably?
    return 0;
  }
** </pre>
A quick-fix that renames such methods is available only in the editor.</p>
<!-- tooltip end -->
Use the  **Ignore methods overriding/implementing a super method**  option to ignore methods overriding or implementing a method from
  the superclass.


" ></outline><outline text="Method naming convention" _note="
Reports methods whose names are too short, too long, or do not follow
the specified regular expression pattern.
Instance methods that override library
  methods and constructors are ignored by this inspection.</p>
 **Example:**  if the inspection is enabled for static methods, and the minimum specified method name length is 4 (the default),
  the following static method produces a warning, because the length of its name is 3, which is less
  than 4:  **public static int max(int a, int b)** .
A quick-fix that renames such methods is available only in the editor.</p>
<!-- tooltip end -->
Configure the inspection:</p>
Use the list in the  **Options**  section to specify which methods should be checked. Deselect the checkboxes for the method types for which
  you want to skip the check. Specify  **0**  in the length fields to skip the corresponding checks.</p>
Regular expressions should be specified in the standard  **java.util.regex**  format.</p>
" ></outline><outline text="Non-boolean method name must not start with question word" _note="
Reports non-boolean methods whose names start with a question
word. Such method names may be confusing.
Non-boolean methods that override library methods are ignored by this inspection.</p>
 **Example:** 
<pre> **
  public void hasName(String name) {
    assert names.contains(name);
  }
** </pre>
A quick-fix that renames such methods is available only in the editor.</p>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Boolean method name prefixes**  list to specify the question words that should be used only for boolean methods.</li>
  <li>Use the  **Ignore methods with 'java.lang.Boolean' return type**  option to ignore methods with  **java.lang.Boolean**  return type.</li>
  <li>Use the  **Ignore methods overriding/implementing a super method**  option to ignore methods which have supers. </li>
</ul>
" ></outline><outline text="Overloaded methods with same number of parameters" _note="
Reports methods that are declared in the same class, have the same name, and the same number of parameters.
Such overloads cam be very confusing because it can be unclear which overload gets called.
 **Example:** </p>
<pre> **
  class Main {
    public static void execute(Runnable r) {}
    public static &lt;T&gt; void execute(RunnableFuture&lt;T&gt; c) {}
  }
** </pre>
<!-- tooltip end -->

  Use the option to ignore overloaded methods whose parameter types are definitely incompatible.
</p>
" ></outline><outline text="Overloaded varargs method" _note="
Reports varargs methods with the same name as other methods in the class or in a superclass.
Overloaded methods that take a variable number of arguments can be very confusing
because it is often unclear which overload gets called.
 **Example:** </p>
<pre> **
    public void execute(Runnable... r) {} // warning
    public void execute(Runnable r1, Runnable r2) {}
** </pre>
<!-- tooltip end -->
" ></outline></outline><outline text="Method parameter naming convention" _note="
Reports method parameters whose names are too short, too long, or do not follow
the specified regular expression pattern.
 **Example:**   **void fooBar(int X)** 
  should be reported if the inspection is enabled with the default settings in which a parameter name should start with a lowercase letter.</p>
<!-- tooltip end -->
Configure the inspection:</p>

  Use the fields in the  **Options**  section to specify the minimum length, maximum length, and a regular expression expected for
  method parameter names. Specify  **0**  in order not to check the length of names.</p>
Regular expressions should be specified in the standard  **java.util.regex**  format.</p>
" ></outline><outline text="Non-constant field with upper-case name" _note="
Reports non- **static**  non- **final** 
fields whose names are all in upper case.
Such fields may cause confusion by breaking a common naming convention and
  are often used by mistake.</p>
 **Example:**  <pre> **
  public static int THE_ANSWER = 42; //a warning here: final modifier is missing
** </pre>
A quick-fix that renames such fields is available only in the editor.</p>
<!-- tooltip end -->

" ></outline><outline text="Package naming convention" _note="
Reports packages whose names are either too short, too long, or do not follow the specified regular expression pattern.
 **Example:** </p>
<pre> **
  package io;
** </pre>
<!-- tooltip end -->

  Use the options to specify the minimum and maximum length of the package name
  as well as a regular expression that matches valid package names
  (regular expressions are in standard  **java.util.regex**  format).
</p>
" ></outline><outline text="Parameter name differs from parameter in overridden method" _note="
Reports parameters whose names differ from the corresponding
parameters of the methods they override. While legal in Java, such inconsistent names may be confusing
and decrease the documentation benefits of good naming practices.
 **Example:** </p>
<pre> **
  class Person {
    Person(String fullName) {}
  }
  class Child extends Person {
    Child(String name) { super(name); }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Person {
    Person(String fullName) {}
  }
  class Child extends Person {
    Child(String fullName) { super(fullName); }
  }
** </pre>
<!-- tooltip end -->

  Use the options to indicate whether to ignore overridden parameter names that are only
  a single character long or come from a library method. Both can be useful if
  you do not wish to be bound by dubious naming conventions used in libraries.
</p>
" ></outline><outline text="Questionable name" _note="
Reports variables, methods, or classes with questionable, not really descriptive names.
Such names do not help to understand the code, and most probably were created as a temporary thing but were forgotten afterwards.
 **Example:** </p>
<pre> **
  int aa = 42;
** </pre>
Rename quick-fix is suggested only in the editor.</p>
<!-- tooltip end -->

  Use the option to list names that should be reported.

" ></outline><outline text="Standard variable names" _note="
Reports variables with 'standard' names that do not correspond to their types.
Such names may be confusing. There are the following standard names for specific types:
<ul>
  <li>i, j, k, m, n -  **int** </li>
  <li>f -  **float** </li>
  <li>d -  **double** </li>
  <li>b -  **byte** </li>
  <li>c, ch -  **char** </li>
  <li>l -  **long** </li>
  <li>s, str -  **String** </li>
</ul>
Rename quick-fix is suggested only in the editor.</p>
<!-- tooltip end -->

  Use the option to ignore parameter names which are identical to the parameter name from a direct super method.
</p>
" ></outline><outline text="Use of '$' in identifier" _note="
Reports variables, methods, and classes with dollar signs ( **$** ) in their names. While
such names are legal Java, their use outside of generated java code is strongly discouraged.
 **Example:** </p>
<pre> **
  class SalaryIn${}
** </pre>
Rename quick-fix is suggested only in the editor.</p>
<!-- tooltip end -->
" ></outline></outline><outline text="Numeric issues" ><outline text="'char' expression used in arithmetic context" _note="
Reports expressions of the  **char**  type used in addition or subtraction expressions.
Such code is not necessarily an issue but may result in bugs (for example,
  if a string is expected).</p>
 **Example:**   **int a = 'a' + 42;** </p>
After the quick-fix is applied:  **int a = (int) 'a' + 42;** </p>
For the  **String**  context:
<pre> **int i1 = 1;
int i2 = 2;
System.out.println(i2 + '-' + i1 + &quot; = &quot; + (i2 - i1));** </pre>
After the quick-fix is applied:</p>
 **System.out.println(i2 + &quot;-&quot; + i1 + &quot; = &quot; + (i2 - i1));** 
<!-- tooltip end -->
" ></outline><outline text="'equals()' called on 'java.math.BigDecimal'" _note="
Reports  **.equals()**  being called to compare two  **java.math.BigDecimal**  numbers.
This is normally a mistake, as two  **java.math.BigDecimal**  numbers are only equal if
  they are equal in both value and scale.</p>
 **Example:** </p>
<pre> **if (new BigDecimal('2.0').equals(new BigDecimal('2.00'))) {}** </pre>
After the quick-fix is applied:</p>
<pre> **if (new BigDecimal('2.0').compareTo(new BigDecimal('2.00')) == 0) {}** </pre>
<!-- tooltip end -->
" ></outline><outline text="'long' literal ending with 'l' instead of 'L'" _note="
Reports  **long**  literals ending with lowercase 'l'. These
literals may be confusing, as lowercase 'l' looks very similar to '1'.
The quick-fix for this inspection replaces lowercase 'l' with uppercase 'L'.</p>
<!-- tooltip end -->
" ></outline><outline text="Call to 'BigDecimal' method without a rounding mode argument" _note="
Reports calls to  **divide()**  or  **setScale()**  without a rounding mode argument.
Such calls can lead to an  **ArithmeticException**  when the exact value cannot be represented in the result
  (for example, because it has a non-terminating decimal expansion).</p>
Specifying a rounding mode prevents the  **ArithmeticException** .</p>
 **Example:** </p>
<pre> **
  BigDecimal.valueOf(1).divide(BigDecimal.valueOf(3));
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Cast" ><outline text="Cast to 'float' can be 'float' literal" _note="
Reports  **double**  literal expressions that are immediately cast to  **float** .
Such literal expressions can be replaced with equivalent  **float**  literals.</p>
 **Example:** </p>
<pre> **float f = (float)1.1;** </pre>
After the quick-fix is applied:</p>
<pre> **float f = 1.1f;** </pre>
<!-- tooltip end -->

" ></outline><outline text="Cast to 'long' can be 'long' literal" _note="
Reports  **int**  literal expressions that are immediately cast to  **long** .
Such literal expressions can be replaced with equivalent  **long**  literals.</p>
 **Example:** </p>
<pre> **Long l = (long)42;** </pre>
After the quick-fix is applied:</p>
<pre> **Long l = 42L;** </pre>
<!-- tooltip end -->
" ></outline><outline text="Integer multiplication or shift implicitly cast to long" _note="
Reports integer multiplications and left shifts that are implicitly cast to long.
 **Example:** </p>
<pre> **
  void f(int i) {
    long val = 65536 * i;
  }
** </pre>
After the quick-fix is applied, the code changes to:</p>
<pre> **
  void x(int i) {
    long val = 65536 **L**  * i;
  }
** </pre>
 **Example:** </p>
<pre> **
  void f(int i) {
    long value = i &lt;&lt; 24;
  }
** </pre>
After the quick-fix is applied, the code changes to:</p>
<pre> **
  void f(int i) {
    long value = (long) i &lt;&lt; 24;
  }
** </pre>
<!-- tooltip end -->

  Such multiplications are often a mistake, as overflow truncation may occur unexpectedly.
  Converting an  **int**  literal to a  **long**  literal ( **65536 **L** ** ) fixes the problem.
</p>

" ></outline><outline text="Numeric cast that loses precision" _note="
Reports cast operations between primitive numeric types that may
result in precision loss.
Such casts are not necessarily a problem but may result in difficult to
  trace bugs if the loss of precision is unexpected.</p>
 **Example:** </p>
<pre> **
  int a = 420;
  byte b = (byte) a;
** </pre>
<!-- tooltip end -->
Use the  **Ignore casts from int to char**  option to ignore casts from  **int**  to  **char** .
  This type of cast is often used when implementing I/O operations because the  **read()**  method of the
   **java.io.Reader**  class returns an  **int** .</p>
Use the  **Ignore casts from int 128-255 to byte **  option to ignore casts of constant values (128-255) from  **int**  to
   **byte** .
  Such values will overflow to negative numbers that still fit inside a byte.</p>
" ></outline><outline text="Unnecessary explicit numeric cast" _note="
Reports primitive numeric casts that would be inserted implicitly by the compiler.
Also, reports any primitive numeric casts that the compiler will remove.
 **Example:** </p>
<pre> **int x = (short)5; // The cast will be removed by the javac tool** </pre>
After the quick-fix is applied:</p>
 **int x = 5;** 
<!-- tooltip end -->

" ></outline></outline><outline text="Comparison of 'short' and 'char' values" _note="
Reports equality comparisons between  **short**  and  **char**  values.
Such comparisons may cause subtle bugs because while both values are 2-byte long,  **short**  values are
  signed, and  **char**  values are unsigned.</p>
 **Example:** </p>
<pre> **
if (Character.MAX_VALUE == shortValue()) {} //never can be true
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Comparison to Double.NaN or Float.NaN" _note="
Reports any comparisons to  **Double.NaN**  or  **Float.NaN** .
Such comparisons are never meaningful, as NaN is not equal to anything, including itself.
Use the  **Double.isNaN()**  or  **Float.isNaN()**  methods instead.
 **Example:** </p>
<pre> **
  if (x == Double.NaN) {...}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  if (Double.isNaN(x)) {...}
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Confusing floating point literal" _note="
Reports any floating point numbers that don't have a decimal point, numbers before the decimal point,
or numbers after the decimal point.
Such literals may be confusing, and violate several coding standards.</p>
 **Example:** </p>
<pre> **double d = .03;** </pre>
After the quick-fix is applied:</p>
<pre> **double d = 0.03;** </pre>
<!-- tooltip end -->

Use the  **Ignore floating point literals in scientific notation**  option to ignore floating point numbers in scientific notation.</p>

" ></outline><outline text="Constant call to 'java.lang.Math'" _note="
Reports calls to  **java.lang.Math**  or  **java.lang.StrictMath**  methods that can be determined as simple compile-time constants.
 **Example:** </p>
<pre> **double v = Math.sin(0.0);** </pre>
After the quick-fix is applied:</p>
<pre> **double v = 0.0;** </pre>
<!-- tooltip end -->

" ></outline><outline text="Division by zero" _note="
Reports division by zero or remainder by zero.
Such expressions will produce an  **Infinity** ,  **-Infinity**  or  **NaN**  result for doubles or floats,
and will throw an  **ArithmeticException**  for integers.
When the expression has a  **NaN**  result, the fix suggests replacing the division expression with the  **NaN**  constant.
<!-- tooltip end -->

" ></outline><outline text="Floating point equality comparison" _note="
Reports floating-point values that are being compared using the  **==**  or  **!=**  operator.
Floating-point values are inherently inaccurate, and comparing them for exact equality is seldom the desired semantics.</p>
This inspection ignores comparisons with zero and infinity literals.</p>
 **Example:** 
<pre> **
  void m(double d1, double d2) {
    if (d1 == d2) {}
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Implicit numeric conversion" _note="
Reports implicit conversion between numeric types.
Implicit numeric conversion is not a problem in itself but, if unexpected, may cause difficulties when tracing bugs.</p>
 **Example:** </p>
<pre> **
  double m(int i) {
    return i * 10;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  double m(int i) {
    return (double) (i * 10);
  }
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore widening conversions**  option to ignore implicit conversion that cannot result in data loss
    (for example,  **int** -&gt; **long** ).</li>
  <li>Use the  **Ignore conversions from and to 'char'**  option to ignore conversion from and to  **char** . The inspection will
    still report conversion from and to floating-point numbers.</li>
  <li>Use the  **Ignore conversion from constants and literals**  to make the inspection ignore conversion from literals and
    compile-time constants.</li>
</ul>
" ></outline><outline text="Integer division in floating point context" _note="
Reports integer divisions where the result is used as a floating-point number.
Such division is often an error and may have unexpected results
due to the truncation that happens in integer division.
 **Example:** </p>
<pre> **
  float x = 3.0F + 3/5;
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Non-reproducible call to 'java.lang.Math'" _note="
Reports calls to  **java.lang.Math**  methods, which results are not guaranteed to be reproduced precisely.
In environments where reproducibility of results is required,  **java.lang.StrictMath** 
  should be used instead.</p>
<!-- tooltip end -->

" ></outline><outline text="Number constructor call with primitive argument" _note="
Reports instantiations of new  **Long** ,
 **Integer** ,  **Short** , or
 **Byte**  objects that have a primitive  **long** ,
 **integer** ,  **short** , or
 **byte** 
argument.
It is recommended that you use the static method  **valueOf()** 
  introduced in Java 5. By default, this method caches objects for values between -128 and
  127 inclusive.
 **Example:** </p>
<pre> **
  Integer i = new Integer(1);
  Long l = new Long(1L);
** </pre>
After the quick-fix is applied, the code changes to:</p>
<pre> **
  Integer i = Integer.valueOf(1);
  Long l = Long.valueOf(1L);
** </pre>
<!-- tooltip end -->
This inspection reports if the language level of the project or module is 5 or higher</p>

  Use the  **Ignore new number expressions with a String argument**  option to ignore calls to number constructors with a  **String**  argument.</p>

  Use the  **Report only when constructor is @Deprecated**   option to only report calls to deprecated constructors.
   **Long** ,  **Integer** ,  **Short**  and  **Byte**  constructors are deprecated since JDK 9.</p>
" ></outline><outline text="Numeric overflow" _note="
Reports expressions that overflow during computation.
Usually, this happens by accident and indicates a bug. For example, a wrong type is used or a shift should be done in an opposite direction .
 **Examples:** </p>
<pre> **
  float a = 1.0f/0.0f;
  long b = 30 * 24 * 60 * 60 * 1000;
  long c = 1000L &lt;&lt; 62;
** </pre>
" ></outline><outline text="Octal and decimal integers in same array" _note="
Reports mixed octal and decimal integer literals in a single array initializer.
This situation might happen when you copy a list of numbers into an array initializer.
Some numbers in the array might be zero-padded and the compiler will interpret them as octal.
 **Example:** </p>
<pre> **int[] elapsed = {1, 13, 052};** </pre>
After the quick-fix that removes a leading zero is applied:</p>
<pre> **int[] elapsed = {1, 13, 52};** </pre>
If it is an octal number (for example, after a variable inline), then you can use another quick-fix that converts octal to decimal:</p>
 **int[] elapsed = {1, 13, 42};** 
<!-- tooltip end -->


" ></outline><outline text="Octal integer" _note="
Reports octal integer literals. Some coding standards prohibit the
use of octal literals, as they may be easily confused with decimal literals.
Example:</p>
<pre> **
  int i = 015;
  int j = 0_777;
** </pre>
This inspection has two different quick-fixes.
  After the  **Convert octal literal to decimal literal**  quick-fix is applied, the code changes to:</p>
<pre> **
  int i = 13;
  int j = 511;
** </pre>
After the  **Remove leading zero to make decimal**  quick-fix is applied, the code changes to:</p>
<pre> **
  int i = 15;
  int j = 777;
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Overly complex arithmetic expression" _note="
Reports arithmetic expressions with the excessive number of terms. Such expressions might be hard to understand and might contain errors.
Parameters, field references, and other primary expressions are counted as a term.</p>
 **Example:** 
  <pre> **int calc(int a, int b) {
        return a + a + a + b + b + b + b; // The line contains 7 terms and will be reported.
    }** </pre>
<!-- tooltip end -->
Use the field below to specify a number of terms allowed in arithmetic expressions.</p>
" ></outline><outline text="Pointless arithmetic expression" _note="
Reports pointless arithmetic expressions. Such expressions include adding or subtracting zero,
multiplying by zero or one, and division by one.
Such expressions may be the result of automated refactorings and they are unlikely to be what the developer intended to do.</p>
The quick-fix simplifies such expressions.</p>
 **Example:** 
<pre> **
  void f(int a) {
    int x = a - a;
    int y = a + 0;
    int res = x / x;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void f(int a) {
    int x = 0;
    int y = a;
    int res = 1;
  }
** </pre>
<!-- tooltip end -->

  Note that in rare cases, the suggested replacement might not be completely equivalent to the original code
  for all possible inputs. For example, the inspection suggests replacing  **x / x**  with  **1** .
  However, if  **x**  is zero, the original code throws  **ArithmeticException**  or results in  **NaN** .
  Also, if  **x**  is  **NaN** , then the result is also  **NaN** . It's very unlikely that such behavior is  intended.
</p>
" ></outline><outline text="Suspicious oddness check" _note="
Reports odd-even checks of the following form:  **x % 2 == 1** .
Such checks fail when used with negative odd values.
Consider using  **x % 2 != 0**  or  **(x & 1) == 1**  instead.
<!-- tooltip end -->

" ></outline><outline text="Suspicious underscore in number literal" _note="
Reports decimal number literals that use the underscore numeric separator with groups where the number of digits is not three.
Such literals may contain a typo.
This inspection will not warn on literals containing two consecutive underscores.
It is also allowed to omit underscores in the fractional part of  **double**  and  **float**  literals.
 **Example:**   **int oneMillion = 1_000_0000;** </p>
<!-- tooltip end -->

" ></outline><outline text="Unary plus" _note="
Reports usages of the  **+**  unary operator. The unary plus is usually a null operation, and
its presence might represent a coding error. For example, in a combination with the increment operator (like in  **+++** )
or with the equal operator (like in  **=+** ).
 **Example:** </p>
<pre> **
  void unaryPlus(int i) {
    int x = + +i;
  }
** </pre>
The following quick fixes are suggested:</p>
<ul>
  <li>
Remove  **+**  operators before the  **i**  variable:</p>
<pre> **
  void unaryPlus(int i) {
    int x = i;
  }
** </pre>
  </li>
  <li>
Replace  **+**  operators with the prefix increment operator:</p>
<pre> **
  void unaryPlus(int i) {
    int x = ++i;
  }
** </pre>
  </li>
</ul>
<!-- tooltip end -->

Use the checkbox below to report unary pluses that are used together with a binary or another unary expression.
It means the inspection will not report situations when a unary plus expression is used in array
initializer expressions or as a method argument.
</p>
" ></outline><outline text="Underscores in numeric literal" _note="
Reports numeric literals with underscores and suggests removing them with a quick-fix.
This may be useful if you need to lower the language level.
The quick-fix removes underscores from numeric literals. For example  **1_000_000**  will be converted to  **1000000** .</p>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 7 or higher.</p>
<small>New in 2020.2</small></p>
" ></outline><outline text="Unnecessary unary minus" _note="
Reports unnecessary unary minuses. Such expressions might be hard to understand and might contain errors.
 **For example:** </p>
<pre> **void unaryMinus(int i) {
    int x = - -i;
  }** </pre>
The following quick fixes are suggested here:</p>
<ul>
  <li>
Remove  **-**  operators before the  **i**  variable:</p>
    <pre> **void unaryMinus(int i) {
    int x = i;
  }** </pre>
  </li>
  <li>
 
Replace  **-**  operators with the prefix decrement operator:</p>
    <pre> **void unaryMinus(int i) {
    int x = --i;
  }** </pre>
  </li>
</ul>

 **Another example:** </p>
<pre> **void unaryMinus(int i) {
    i += - 8;
  }** </pre>
After the quick-fix is applied:</p>
<pre> **void unaryMinus(int i) {
    i -= 8;
  }** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unpredictable BigDecimal constructor call" _note="
Reports calls to  **BigDecimal**  constructors that accept a  **double**  value.
These constructors produce  **BigDecimal**  that is exactly equal to the supplied  **double**  value.
However, because doubles are encoded in the IEEE 754 64-bit double-precision binary floating-point format, the exact value can be unexpected.
For example,  **new BigDecimal(0.1)**  yields a  **BigDecimal**  object. Its value is
  <small> **0.1000000000000000055511151231257827021181583404541015625** </small>
  which is the nearest number to 0.1 representable as a double.
  To get  **BigDecimal**  that stores the same value as written in the source code,
  use either  **new BigDecimal('0.1')**  or  **BigDecimal.valueOf(0.1)** .</p>
 **Example:** </p>
<pre> **
  class Constructor {
    void foo() {
      new BigDecimal(0.1);
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Constructor {
    void foo() {
      new BigDecimal('0.1');
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unreadable numeric literal" _note="
Reports long numeric literals without underscores and suggests adding them. Underscores make such literals easier to read.
Example:</p>
<pre> **
  1000000
** </pre>
After the quick-fix is applied:</p>
<pre> **
  1_000_000
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project of module is 7 or higher.</p>
<small>New in 2020.2</small></p>

" ></outline></outline><outline text="Packaging issues" ><outline text="Class independent of its package" _note="
Reports classes that don't depend on any other class in their package and are not a dependency for any other class in their package.
Such classes indicate ad-hoc or incoherent packaging strategies and often may be profitably moved.
  <!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
" ></outline><outline text="Class only used from one other package" _note="
Reports classes that don't depend on any other class in their package, depend on classes from another package, and are themselves a dependency
only for classes from this other package.
Consider moving such classes to the package on which they depend.
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
" ></outline><outline text="Empty directory" _note="
Reports empty directories.
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
Use the  **Only report empty directories located under a source folder**  option to have only directories under source
  roots reported.

" ></outline><outline text="Exception package" _note="
Reports packages that only contain classes that extend  **java.lang.Throwable** , either directly or indirectly.
  
Although exceptions usually don't depend on other classes for their implementation, they are normally not used separately.
    It is often a better design to locate exceptions in the same package as the classes that use them.</p>
  <!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
" ></outline><outline text="Package with classes in multiple modules" _note="
Reports non-empty packages that are present in several modules.
When packages are contained in several modules, it is very easy to create a class with the same name in two modules.
A module which depends on these modules will see a conflict if it tries to use such a class.
The Java Platform Module System disallows packages contained in more than one module (also called <em>split packages</em>)
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
" ></outline><outline text="Package with disjoint dependency graph" _note="
Reports packages whose classes can be separated into mutually independent subsets.
Such disjoint packages indicate ad-hoc packaging or a lack of conceptual cohesion.</p>
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
" ></outline><outline text="Package with too few classes" _note="
Reports packages that contain fewer classes than the specified minimum.
Packages which contain subpackages are not reported. Overly small packages may indicate a fragmented design.</p>
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
Use the  **Minimum number of classes**  field to specify the minimum allowed number of classes in a package.</p>
" ></outline><outline text="Package with too many classes" _note="
Reports packages that contain too many classes.
Overly large packages may indicate a lack of design clarity.</p>
<!-- tooltip end -->
Available only from  **Code | Inspect Code**  or
   **Code | Analyze Code | Run Inspection by Name**  and isn't reported in the editor.</p>
Use the  **Maximum number of classes**  field to specify the maximum allowed number of classes in a package.</p>
" ></outline></outline><outline text="Performance" ><outline text="'Collection.toArray()' call style" _note="
Reports  **Collection.toArray()**  calls not in the preferred style, and suggests applying the preferred style.
There are two styles to convert a collection to an array:</p>
<list>
  <li>A pre-sized array, for example,  **c.toArray(new String[c.size()])** </li>
  <li>An empty array, for example,   **c.toArray(new String[0])** </li>
</list>
In older Java versions, using a pre-sized array was recommended, as the reflection
  call necessary to create an array of proper size was quite slow.</p>
However, since late updates of OpenJDK 6, this call was intrinsified, making
  the performance of the empty array version the same, and sometimes even better, compared
  to the pre-sized version. Also, passing a pre-sized array is dangerous for a concurrent or
  synchronized collection as a data race is possible between the  **size**  and  **toArray** 
  calls. This may result in extra nulls at the end of the array if the collection was concurrently
  shrunk during the operation.</p>
<!-- tooltip end -->
Use the inspection options to select the preferred style.</p>
" ></outline><outline text="'equals()' call can be replaced with '=='" _note="
Reports calls to  **equals()**  that can be replaced by  **==**  or  **!=**  expressions without a change in semantics.
These calls can be replaced when they are used to compare  **final**  classes that don't have their own  **equals()**  implementation but use the default  **Object.equals()** .
This replacement may result in better performance.</p>
There is a separate inspection for  **equals()**  calls on  **enum**  values: 'equals()' called on Enum value.</p>
<!-- tooltip end -->
<!--
<small>New in 2017.3</small>-->
" ></outline><outline text="'equals()' or 'hashCode()' called on 'java.net.URL' object" _note="
Reports  **hashCode()**  and  **equals()**  being called on  **java.net.URL**  objects.

  The  **java.net.URL**  class internally uses an instance of  **java.net.URLStreamHandler** 
  to execute  **hashCode()**  and  **equals()** .
  This can cause performance problems because  **java.net.URLStreamHandler**  performs DNS lookups.
  Depending on the availability of the network and the speed of a DNS server this can cause significant delays.
</p>
The problem can most likely be solved by using  **java.net.URI**  instead.</p>
 **Example:** </p>
<pre> **
  int f(URL url1, URL url2) {
    if (url1.equals(url2)) return url1.hashCode();
    else return url2.hashCode();
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'List.remove()' called in loop" _note="
Reports  **List.remove(index)**  called in a loop that can be replaced with  **List.subList().clear()** .
The replacement
  is more efficient for most  **List**  implementations when many elements are deleted.</p>
Example:</p>
<pre> **
  void removeRange(List&lt;String&gt; list, int from, int to) {
    for (int i = from; i &lt; to; i++) {
        list.remove(from);
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void removeRange(List&lt;String&gt; list, int from, int to) {
    if (to &gt; from) {
      list.subList(from, to).clear();
    }
  }
** </pre>

  The quick-fix adds a range check automatically to prevent a possible  **IndexOutOfBoundsException**  when the minimal value is bigger
  than the maximal value. It can be removed if such a situation is impossible in your code.
</p>
<!-- tooltip end -->
<small>New in 2018.2</small></p>
" ></outline><outline text="'Map' can be replaced with 'EnumMap'" _note="
Reports instantiations of  **java.util.Map**  objects
whose key types are enumerated classes. Such  **java.util.Map**  objects
can be replaced with  **java.util.EnumMap**  objects.

   **java.util.EnumMap**  implementations can be much more efficient
  because the underlying data structure is a simple array.
</p>
 **Example:** </p>
<pre> **
  Map&lt;MyEnum, String&gt; myEnums = new HashMap&lt;&gt;();
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Map&lt;MyEnum, String&gt; myEnums = new EnumMap&lt;&gt;(MyEnum.class);
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'Map' or 'Set' may contain 'URL' objects" _note="
Reports instantiations of  **java.util.Set**  and  **java.util.Map**  that contain
 **java.net.URL**  objects.

  Adding  **URL**  objects to such collections can cause performance problems because of calls to
  the  **equals()**  and  **hashCode()**  methods of  **URL** .
</p>

   **URL** 's  **equals()**  and
   **hashCode()**  methods use a DNS lookup, which depending on the availability of the network and the speed of the DNS server can
  cause significant delays.
</p>
 **Example:** </p>
<pre> **
  Set&lt;URL&gt; set = new HashSet&lt;URL&gt;();
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'Set' can be replaced with 'EnumSet'" _note="
Reports instantiations of  **java.util.Set**  objects whose content types are enumerated classes. Such  **Set**  objects
can be replaced with  **java.util.EnumSet**  objects.

   **EnumSet**  implementations can be much more efficient compared to
  other sets, as the underlying data structure is a bit vector. Use the quick-fix to replace the initializer with a call to
   **EnumSet.noneOf()** . This quick-fix is not available when the type of the variable is a sub-class of  **Set** .
</p>
 **Example:** </p>
<pre> **
  enum MyEnum { FOO, BAR; }
  Set&lt;MyEnum&gt; enums = new HashSet&lt;MyEnum&gt;();
** </pre>
After the quick-fix is applied:</p>
<pre> **
  enum MyEnum { FOO, BAR; }
  Set&lt;MyEnum&gt; enums = EnumSet.noneOf(MyEnum.class);
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'String.equals()' can be replaced with 'String.isEmpty()'" _note="
Reports  **equals()**  being called to compare a  **String**  with an empty string.
In this case, using  **.isEmpty()**  is better as it shows you exactly what you're checking.
 **Example:** </p>
<pre> **
  void checkString(String s){
    if (''.equals(s)) throw new IllegalArgumentException();
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void checkString(String s){
    if (s != null && s.isEmpty()) throw new IllegalArgumentException();
  }
** </pre>
<!-- tooltip end -->

   **''.equals(str)**  returns false when  **str**  is null. For safety, this inspection's quick-fix inserts an explicit
  null-check when
  the  **equals()**  argument is nullable. Use the option to make the inspection ignore such cases.
</p>
" ></outline><outline text="'StringBuilder.toString()' in concatenation" _note="
Reports  **StringBuffer.toString()**  or  **StringBuilder.toString()**  calls in string concatenations.
Such calls are unnecessary when concatenating and can be removed, saving a method call and an object allocation,
which may improve performance.
<!-- tooltip end -->
" ></outline><outline text="Auto-boxing" _note="
Reports expressions that are affected by autoboxing conversion (automatic wrapping of primitive values as objects).
Try not to use objects instead of primitives. It might significantly affect performance.
 **Example:** </p>
<pre> **Integer x = 42;** </pre>
The quick-fix makes the conversion explicit:</p>
<pre> **Integer x = Integer.valueOf(42);** </pre>
<!-- tooltip end -->
Autoboxing conversion is not supported in Java 1.4 and earlier JVM.</p>
" ></outline><outline text="Auto-unboxing" _note="
Reports expressions that are affected by unboxing conversion (automatic unwrapping of objects into primitive values).
Try not to use objects instead of primitives. It might significantly affect the performance.
 **Example:** </p>
<pre> **int x = new Integer(42);** </pre>
The quick-fix makes the conversion explicit:</p>
<pre> **int x = new Integer(42).intValue();** </pre>
<!-- tooltip end -->
Autoboxing conversion is not supported in Java 1.4 and earlier JVM.</p>

" ></outline><outline text="Boolean constructor call" _note="
Reports creation of  **Boolean**  objects.

  Constructing new  **Boolean**  objects is rarely necessary,
  and may cause performance problems if done often enough. Also,  **Boolean** 
  constructors are deprecated since Java 9 and could be removed or made
  inaccessible in future Java versions.</p>
 **Example:** </p>
<pre> **
  Boolean b1 = new Boolean(true);
  Boolean b2 = new Boolean(str);
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Boolean b1 = Boolean.TRUE;
  Boolean b2 = Boolean.valueOf(str);
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Boxing of already boxed value" _note="
Reports boxing of already boxed values.

  This is a redundant
  operation since any boxed value will first be auto-unboxed before boxing the
  value again. If done inside an inner loop, such code may cause performance
  problems.
</p>
<!-- tooltip end -->
 **Example:** </p>
<pre> **
  Integer value = 1;
  method(Integer.valueOf(value));
** </pre>
After the quick fix is applied:</p>
<pre> **
  Integer value = 1;
  method(value);
** </pre>

" ></outline><outline text="Bulk operation can be used instead of iteration" _note="
Reports single operations inside loops that could be replaced with a bulk method.

  Not only are bulk methods shorter, but in some cases they may be more performant as well.
</p>
 **Example:** </p>
<pre> **  void test(Collection&lt;Integer&gt; numbers) {
    List&lt;Integer&gt; result = new ArrayList&lt;>();
    for (Integer i : numbers) {
      result.add(i);
    }
  }
** </pre>
After the fix is applied:</p>
<pre> **
  void test(Collection&lt;Integer&gt; numbers) {
    List&lt;Integer&gt; result = new ArrayList&lt;>();
    result.addAll(numbers);
  }
** </pre>
<!-- tooltip end -->

  The  **Use Arrays.asList() to wrap arrays**  option allows to report arrays, even if the bulk method requires a collection.
  In this case the quick-fix will automatically wrap the array in  **Arrays.asList()**  call.
</p>
<small>New in 2017.1</small></p>
" ></outline><outline text="Call to 'Arrays.asList()' with too few arguments" _note="
Reports calls to  **Arrays.asList()**  with at most one argument.

  Such calls could be replaced
  with  **Collections.singletonList()** ,  **Collections.emptyList()** ,
  or  **List.of()**  on JDK 9 and later, which will save some memory.</p>
In particular,  **Collections.emptyList()**  and  **List.of()**  with no arguments
  always return a shared instance,
  while  **Arrays.asList()**  with no arguments creates a new object every time it's called.</p>
Note: the lists returned by  **Collections.singletonList()**  and  **List.of()**  are immutable,
while the list returned  **Arrays.asList()**  allows calling the  **set()**  method.
This may break the code in rare cases.</p>
 **Example:** </p>
<pre> **
  List&lt;String&gt; empty = Arrays.asList();
  List&lt;String&gt; one = Arrays.asList('one');
** </pre>
After the quick-fix is applied:</p>
<pre> **
  List&lt;String&gt; empty = Collections.emptyList();
  List&lt;String&gt; one = Collections.singletonList('one');
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Call to 'set.removeAll(list)' may work slowly" _note="
Reports calls to  **java.util.Set.removeAll()**  with a  **java.util.List**  argument.

  Such a call can be slow when the size of the argument is greater than or equal to the size of the set,
  and the set is a subclass of  **java.util.AbstractSet** .
  In this case,  **List.contains()**  is called for each element in the set, which will perform a linear search.
</p>
 **Example:** </p>
<pre> **  public void check(String... ss) {
    // possible O(n^2) complexity
    mySet.removeAll(List.of(ss));
  }
** </pre>
After the quick fix is applied:</p>
<pre> **  public void check(String... ss) {
    // O(n) complexity
    List.of(ss).forEach(mySet::remove);
  }
** </pre>
<!-- tooltip end -->
<small>New in 2020.3</small></p>

" ></outline><outline text="Call to simple getter from within class" _note="
Reports calls to a simple property getter from within the property's class.

  A simple property getter is defined as one which simply returns the value of a field,
  and does no other calculations. Such simple getter calls can be safely inlined using the quick-fix.
  Some coding standards also suggest against the use of simple getters for code clarity reasons.
</p>
 **Example:** </p>
<pre> **
  public class Salient {
    private String name;
    public String getName() {
      return name;
    }
    @Override
    public String toString() {
      return getName();
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  public class Salient {
    private String name;
    public String getName() {
      return name;
    }
    @Override
    public String toString() {
      return name;
    }
  }
** </pre>
<!-- tooltip end -->
Use the following options to configure the inspection:</p>
<ul>
  <li>Whether to only report getter calls on  **this** , not on objects of the same type passed in as a parameter.</li>
  <li>Whether to ignore non- **private**  getters.</li>
</ul>

" ></outline><outline text="Call to simple setter from within class" _note="
Reports calls to a simple property setter from within the property's class.

  A simple property setter is defined as one which simply assigns the value of its parameter to a field,
  and does no other calculations. Such simple setter calls can be safely inlined.
  Some coding standards also suggest against the use of simple setters for code clarity reasons.
</p>
 **Example:** </p>
<pre> **
  class Foo {
  private int index;
    public Foo(int idx) {
       setIndex(idx);
    }
    public void setIndex(int idx) {
       index = idx;
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    private int index;
    public Foo(int idx) {
      index = idx;
    }
    public void setIndex(int idx) {
      index = idx;
    }
  }
** </pre>
<!-- tooltip end -->
Use the following options to configure the inspection:</p>
<ul>
  <li>Whether to only report setter calls on  **this** , not on objects of the same type passed in as a parameter.</li>
  <li>Whether to ignore non- **private**  setters.</li>
</ul>
" ></outline><outline text="Class initializer may be 'static'" _note="
Reports instance initializers which may be made  **static** .

  An instance initializer may be static if it does not reference any of its class' non-static members.
  Static initializers are executed once the class is resolved,
  while instance initializers are executed on each instantiation of the class.</p>
 **Example:** </p>
<pre> **
  class A {
     public static String CONSTANT;
     {
        CONSTANT = 'Hello';
     }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class A {
     public static String CONSTANT;
     static {
        CONSTANT = 'Hello'; //now initialized only once per class
     }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Collection without initial capacity" _note="
Reports attempts to instantiate a new  **Collection**  object without specifying
an initial capacity.

  If no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing
  to specify initial capacities for collections may result in performance issues if space needs to be reallocated and
  memory copied when the initial capacity is exceeded.
  This inspection checks allocations of classes listed in the inspection's settings.
</p>
 **Example:** </p>
<pre> **
  new HashMap&lt;String, String&gt;();
** </pre>
<!-- tooltip end -->
Use the following options to configure the inspection:</p>
<ul>
  <li>List collection classes that should be checked.</li>
  <li>Whether to ignore field initializers.</li>
</ul>
" ></outline><outline text="Concatenation with empty string" _note="
Reports string concatenations where one of the arguments is the empty string.
Such a concatenation is unnecessary and inefficient, particularly when used as
an idiom for formatting non- **String**  objects or primitives into  **String** s.

  A quick-fix is suggested to simplify the concatenation.
</p>
 **Example:** </p>
<pre> **
  void foo(int x, int y) {
    String s = '' + x + ' ; ' + y;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void foo(int x, int y) {
    String s = x + ' ; ' + y;
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Dynamic regular expression could be replaced by compiled Pattern" _note="
Reports calls to the regular expression methods (such as  **matches()**  or  **replace()** )
of  **java.lang.String**  using constants arguments.

  Such calls may be profitably replaced with a  **private static final Pattern**  field
  so that the regular expression does not have to be compiled each time it is used.
</p>
 **Example:** </p>
<pre> **
  text.replace('abc', replacement);
** </pre>
After the quick-fix is applied:</p>
<pre> **
  private static final Pattern ABC = Pattern.compile('abc', Pattern.LITERAL);
  ABC.matcher(text).replaceAll(Matcher.quoteReplacement(replacement));
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Early loop exit in 'if' condition" _note="
Reports loops with an  **if**  statement that can end with  **break**  without changing the semantics.
This prevents redundant loop iterations.
 **Example:** </p>
<pre> **
  boolean found = false;
  for (int i = 0; i &lt; arr.length; i++) {
    if (Objects.equals(value, arr[i])) {
      found = true;
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  boolean found = false;
  for (int i = 0; i &lt; arr.length; i++) {
    if (Objects.equals(value, arr[i])) {
      found = true;
      break;
    }
  }
** </pre>
<!-- tooltip end -->
<small>New in 2019.2</small></p>
" ></outline><outline text="Embedded" ><outline text="'RecordStore' opened but not safely closed" _note="
Reports Java ME  **javax.microedition.rms.RecordStore**  resources that are not opened in front
of a  **try**  block and closed in the corresponding  **finally**  block.
Such resources may be inadvertently leaked if an exception is thrown before the resource is closed.</p>

  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
</p>
 **Example:** </p>
<pre> **
  void foo1() throws RecordStoreException {
      RecordStore rs = RecordStore.openRecordStore('bar', true); // warning
  }
  void foo2() throws RecordStoreException {
      RecordStore rs = RecordStore.openRecordStore('bar', true); // no warning
      try {
          /* ... */
      } finally {
          rs.closeRecordStore();
      }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Abstract class with a single direct inheritor" _note="
Reports abstract classes that have precisely one
direct inheritor. While such classes may offer admirable clarity of design,
in memory-constrained or bandwidth-limited environments, they needlessly increase
the total footprint of the application. Consider merging the abstract class with its inheritor.

  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
</p>
 **Example:** </p>
<pre> **
  abstract class Base {} // will be reported
  class Inheritor extends Base {}
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Array.length in loop condition" _note="
Reports accesses to the  **.length**  property of an array in the condition part of a
loop statement. In highly resource constrained environments, such calls may
have adverse performance implications.

  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
</p>
 **Example:** </p>
<pre> **
  void foo(Object[] x) {
    for (int i = 0; i &lt; x.length; i++) { /**/ }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Connection opened but not safely closed" _note="
Reports Java ME  **javax.microedition.io.Connection**  resources that are not opened in front of a  **try**  block and
closed in the corresponding  **finally**  block. Such resources may be inadvertently leaked if an exception is thrown before the
resource is closed.
 **Example:** </p>
<pre> **
  void example() throws IOException {
    Connection c = Connector.open('foo');
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Interface with a single direct inheritor" _note="
Reports interfaces that have precisely one direct inheritor.
While such interfaces may offer admirable clarity of design,
in memory-constrained or bandwidth-limited environments,
they needlessly increase the total footprint of the application. Consider
merging the interface with its inheritor.

  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
</p>
<!-- tooltip end -->
" ></outline><outline text="Large array allocation with no OutOfMemoryError check" _note="
Reports large array allocations which do not check
for  **java.lang.OutOfMemoryError** . In memory
constrained environments, allocations of large data objects should probably
be checked for memory depletion.

  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
</p>
<!-- tooltip end -->

  Use the option to specify the maximum number of elements to allow in unchecked array allocations.
</p>
" ></outline><outline text="Method call in loop condition" _note="
Reports method calls in the condition part of a
loop statement. In highly resource constrained environments, such calls may
have adverse performance implications.

  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
  This inspection is intended for Java ME and other highly resource constrained environments.
</p>
 **Example:** </p>
<pre> **
  String s = 'example';
  for (int i = 0; i &lt; s.length(); i++) {
    System.out.println(s.charAt(i));
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String s = 'example';
  int length = s.length();
  for (int i = 0; i &lt; length; i++) {
    System.out.println(s.charAt(i));
  }
** </pre>
<!-- tooltip end -->

  Use the option to ignore calls to common Java iteration methods like  **Iterator.hasNext()** 
  and known methods with side-effects like  **Atomic*.compareAndSet** .
</p>

" ></outline><outline text="Multiplication or division by power of two" _note="
Reports multiplication of an integer value by a constant integer that can be represented as a power of two. Such
expressions can be replaced with right or left shift operations
for a possible performance improvement.

  Note that this inspection is not relevant for modern JVMs (e. g.,
  HotSpot or OpenJ9) because their JIT compilers will perform this optimization.
  It might only be useful in some embedded systems where no JIT compilation is performed.
</p>
 **Example:** </p>
<pre> **
  int y = x * 4;
** </pre>
A quick-fix is suggested to replace the multiplication or division operation with the shift operation:</p>
<pre> **
  int y = x &lt;&lt; 2;
** </pre>
<!-- tooltip end -->

  Use the option to make the inspection also report division by a power of two.
  Note that replacing a power of two division with a shift does not work for negative numbers.
</p>
" ></outline><outline text="Overly large initializer for array of primitive type" _note="
Reports array initializer expressions for primitive
arrays that contain too many elements. Such initializers may result in overly large
class files because code must be generated to initialize each array element. In memory
or bandwidth constrained environments, it may be more efficient to load large arrays
of primitives from resource files.

  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
</p>
<!-- tooltip end -->

  Use the option to specify the maximum number of elements to allow in primitive array initializers.
</p>
" ></outline><outline text="Single character 'startsWith()' or 'endsWith()'" _note="
Reports calls to  **String.startsWith()**  and
 **String.endsWith()**  where single character string literals are passed as an argument.

  A quick-fix is suggested to replace such calls with more efficiently implemented  **String.charAt()** .
</p>

  However, the performance gain of such change is minimal and the code becomes less readable because of the extra non-zero length check,
  so it is recommended to apply the quick-fix only inside tight loops.
</p>

  This inspection is intended for Java ME and other highly resource constrained environments.
  Applying the results of this inspection without consideration might have negative effects on code clarity and design.
</p>
 **Example:** </p>
<pre> **
  boolean startsWithX(String s) {
    return s.startsWith('x');
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  boolean startsWithX(String s) {
    return !s.isEmpty() && s.charAt(0) == 'x';
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Synthetic accessor call" _note="
Reports references from a nested class to non-constant  **private**  members of an outer class.
For such references, javac will generate package-private synthetic accessor methods,
which may compromise the security because members appearing to be private will in fact be accessible from the entire package.

  A nested class and its outer class are compiled to separate
  class files. The Java virtual machine normally prohibits access from a class to private fields and methods of
  another class. To enable access from a nested class to private members of an outer class, javac creates a package-private
  synthetic accessor method.
</p>

  By making the  **private**  member package-private instead, the actual accessibility is made explicit.
  This also saves a little bit of memory, which may improve performance in resource constrained environments.
</p>

  This inspection does not report if the language level is set to Java 11 or higher
  because thanks to nest-based access control (JEP 181), accessor methods are not generated anymore.
</p>
 **Example:** </p>
<pre> **
  class Outer {
    private void x() {}
    class Inner {
      void y() {
        x();
      }
    }
  }
** </pre>
After the quick fix is applied:</p>
<pre> **
  class Outer {
    void x() {}
    class Inner {
      void y() {
        x();
      }
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline></outline><outline text="Explicit argument can be lambda" _note="
Reports method calls that accept a non-trivial expression and can be replaced with an equivalent method call
which accepts a lambda instead.

Converting an expression to a lambda ensures that the expression won't be evaluated
if it's not used inside the method. For example,  **optional.orElse(createDefaultValue())**  can be converted
to  **optional.orElseGet(this::createDefaultValue)** .
<!-- tooltip end -->
<small>New in 2018.1</small></p>
" ></outline><outline text="Field can be made 'static'" _note="
Reports instance variables that can safely be made  **static** . A field
can be static if it is declared  **final**  and initialized with a constant.
 **Example:** </p>
<pre> **
  public final String str = 'sample';
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Inefficient Stream API call chains ending with count()" _note="
Reports Stream API call chains ending with the  **count()**  operation that
could be optimized.

  The following call chains are replaced by this inspection:
</p>
<ul>
  <li> **Collection.stream().count()**  &rarr;  **Collection.size()** . In Java 8  **Collection.stream().count()** 
    actually iterates over the collection elements to count them, while  **Collection.size()**  is much faster for most of the collections.</li>
  <li> **Stream.flatMap(Collection::stream).count()**  &rarr;  **Stream.mapToLong(Collection::size).sum()** . Similarly,
    there's no need to iterate over all the nested collections. Instead, their sizes could be summed up.</li>
  <li> **Stream.filter(o -> ...).count() > 0**  &rarr;  **Stream.anyMatch(o -> ...)** . Unlike the original call,
     **anyMatch()**  may stop the computation as soon as a matching element is found.</li>
  <li> **Stream.filter(o -> ...).count() == 0**  &rarr;  **Stream.noneMatch(o -> ...)** . Similar to the above.</li>
</ul>

  Note that if the replacement involves a short-circuiting operation like  **anyMatch()** , there could be a visible behavior change,
  if the intermediate stream operations produce side effects. In general, side effects should be avoided in Stream API calls.
</p>
<!-- tooltip end -->
" ></outline><outline text="Instantiating object to get Class object" _note="
Reports code that instantiates a class to get its class object.
It is more performant to access the class object
  directly by name.</p>
 **Example:** </p>
<pre> **
  Class&lt;?&gt; c = new Sample().getClass();
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Class&lt;?&gt; c = Sample.class;
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Iteration over 'keySet()' can be optimized" _note="
Reports iterations over the  **keySet()**  of a  **java.util.Map**  instance,
where the iterated keys are used to retrieve the values from the map.

  Such iteration may be more efficient when replaced with an iteration over the
   **entrySet()**  or  **values()**  (if the key is not actually used).
</p>

  Similarly,  **keySet().forEach(key -&gt; ...)** 
  can be replaced with  **forEach((key, value) -&gt; ...)**  if values are retrieved
  inside a lambda.
</p>
 **Example:** </p>
<pre> **
  for (Object key : map.keySet()) {
   Object val = map.get(key);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  for (Object val : map.values()) {}
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Manual array copy" _note="
Reports manual copying of array contents which can be replaced with  **System.arraycopy()** .
 **Example:** </p>
<pre> **
  for (int i = 0; i &lt; array.length; i++) {
    newArray[i] = array[i];
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  System.arraycopy(array, 0, newArray, 0, array.length);
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Manual array to collection copy" _note="
Reports code that uses a loop to copy the contents of an array into a collection.

  A shorter and potentially faster (depending on the collection implementation) way to do this is using  **Collection.addAll(Arrays.asList())**  or  **Collections.addAll()** .
</p>

Only loops without additional statements inside are reported.</p>
 **Example:** </p>
<pre> **
  void addAll(List&lt;String&gt; list, String[] arr) {
    for (int i = 0; i &lt; arr.length; i++) {
      String s = arr[i];
      list.add(s);
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void addAll(List&lt;String&gt; list, String[] arr) {
    Collections.addAll(list, arr);
  }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Method can be made 'static'" _note="
Reports methods that can safely be made  **static** .
Making methods static when possible can reduce memory consumption and improve your code quality.
A method can be  **static**  if:</p>
<ul>
  <li>
    it is not  **synchronized** ,  **native**  or  **abstract** ,
  </li>
  <li>
    does not reference any of non-static methods and non-static fields from the containing class,
  </li>
  <li>
    is not an override and is not overridden in a subclass.
  </li>
</ul>
<!-- tooltip end -->
Use the following options to configure the inspection:</p>
<ul>
  <li>Whether to report only  **private**  and  **final**  methods, which increases the performance of this inspection.</li>
  <li>Whether to ignore empty methods.</li>
  <li>Whether to ignore default methods in interface when using Java 8 or higher.</li>
  <li>
    Whether to let the quick-fix replace instance qualifiers with class references
    in calls to methods which are made  **static** ,
    that is, call  **myClass.m()**  would be replaced with  **MyClass.m()** .
  </li>
</ul>
" ></outline><outline text="Non-constant String can be replaced with StringBuilder" _note="
Reports variables declared as  **java.lang.String**  that are
repeatedly appended to. Such variables could be declared more efficiently as  **java.lang.StringBuffer** 
or  **java.lang.StringBuilder** .
 **Example:** </p>
<pre> **
  String s = '';
  for (int i = 0; i &lt; names.length; i++) {
    String name = names[i] + (i == names.length - 1 ? '' : ' ');
    s = s + name;
  }
** </pre>
Such a loop can be replaced with:</p>
<pre> **
  StringBuilder s = new StringBuilder();
  for (int i = 0; i &lt; names.length; i++) {
    String name = names[i] + (i == names.length - 1 ? '' : ' ');
    s.append(name);
  }
** </pre>
Or even with:</p>
<pre> **
  String s = String.join(' ', names);
** </pre>
<!-- tooltip end -->

  Use the option to make this inspection only report when the variable is appended to in a loop.
</p>
" ></outline><outline text="Object allocation in loop" _note="
Reports object or array allocations inside loops. While not
necessarily a problem, an object allocation inside a loop is a great place to look for memory leaks
and performance issues.

  The inspection reports the following constructs:
</p>
<ul>
  <li>Explicit allocations via  **new**  operator</li>
  <li>Methods known to return new object</li>
  <li>Instance-bound method references</li>
  <li>Lambdas that capture variables or  **this**  reference</li>
</ul>
 **Example:** </p>
<pre> **
  // Explicit allocation
  for (Status status : Status.values()) {
    declarationsMap.put(status, new ArrayList&lt;&gt;());
  }
  // Lambda captures variable
  String message = 'Engine running.';
  for (Engine engine : engines) {
      if (!isRunning(engine)) {
          logger.warn(() -> {
              return String.format(message);
          });
      }
  }
  // Instance-bound method reference
  for(Node node : nodes) {
    descriptor = node.getDescription();
    descriptor.ifPresent(dynamicTestExecutor::execute);
  }
** 
</pre>
<!-- tooltip end -->
" ></outline><outline text="Object instantiation inside 'equals()' or 'hashCode()'" _note="
Reports construction of (temporary) new objects inside  **equals()** ,  **hashCode()** ,  **compareTo()** , and
 **Comparator.compare()**  methods.

  Besides constructor invocations, new objects can also be created by autoboxing or iterator creation inside a
   **foreach**  statement.
  This can cause performance problems, for example, when objects are added to a  **Set**  or  **Map** ,
  where these methods will be called often.
</p>

  The inspection will not report when the objects are created in a  **throw**  or  **assert**  statement.
</p>
 **Example:** </p>
<pre> **
  class Person {
    private String name;
    private int age;
    public boolean equals(Object o) {
      return Arrays.equals(new Object[] {name, age}, new Object[] {((Foo)o).name, ((Foo)o).age});
    }
    public int hashCode() {
      return (name + age).hashCode();
    }
  }
** </pre>

  In this example, two additional arrays are created inside  **equals()** , usages of  **age**  field require boxing,
  and  **name + age**  implicitly creates a new string.
</p>
<!-- tooltip end -->
" ></outline><outline text="Redundant 'Collection.addAll()' call" _note="
Reports  **Collection.addAll()**  and  **Map.putAll()**  calls immediately after instantiation of a collection using the no-arg constructor.
Such constructs can be replaced with a single call to a parametrized constructor, which simplifies code. Also, for some collections the replacement
  might be more performant.</p>
 **Example:** </p>
<pre> **  Set&lt;String&gt; set = new HashSet&lt;&gt;();
  set.addAll(Arrays.asList('alpha', 'beta', 'gamma'));
** </pre>
Can be replaced with:</p>
<pre> **  Set&lt;String&gt; set = new HashSet&lt;&gt;(Arrays.asList('alpha', 'beta', 'gamma'));
** </pre>
<!-- tooltip end -->

Standard JDK collection classes are supported by default. Additionally, you can specify other classes in the inspection options.
" ></outline><outline text="Redundant call to 'String.format()'" _note="
Reports calls to methods like  **format()**  and  **printf()**  that can be safely removed or simplified.
 **Example:** </p>
<pre> **
  System.out.println(String.format('Total count: %d', 42));
** </pre>
After the quick-fix is applied:</p>
<pre> **
  System.out.printf('Total count: %d%n', 42);
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Single character string argument in 'String.indexOf()' call" _note="
Reports single character strings being used as an argument in  **String.indexOf()**  and
 **String.lastIndexOf()**  calls.
A quick-fix is suggested to replace such string literals with equivalent character literals, gaining some performance enhancement.</p>
 **Example:** </p>
<pre> **
  return s.indexOf('x');
** </pre>
After the quick-fix is applied:</p>
<pre> **
  return s.indexOf('x');
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Single character string concatenation" _note="
Reports concatenation with string literals that consist of one character.
These literals may be replaced with equivalent character literals, gaining some performance enhancement.</p>
 **Example:** </p>
<pre> **
  String hello = hell + 'o';
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String hello = hell + 'o';
** </pre>
<!-- tooltip end -->


" ></outline><outline text="String concatenation as argument to 'StringBuilder.append()' call" _note="
Reports  **String**  concatenation used as the argument to  **StringBuffer.append()** ,
 **StringBuilder.append()**  or  **Appendable.append()** .

  Such calls may profitably be turned into chained append calls on the existing  **StringBuffer/Builder/Appendable** 
  saving the cost of an extra  **StringBuffer/Builder**  allocation.
  This inspection ignores compile-time evaluated  **String**  concatenations, in which case the conversion would only
  worsen performance.
</p>
 **Example:** </p>
<pre> **
  void bar(StringBuilder builder, String name) {
    builder.append('Hello,' + name);    //warning
    builder.append('Hello,' + 'world'); //no warning
  }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="String concatenation in loop" _note="
Reports String concatenation in loops.

  As every String concatenation copies the whole
  string, usually it is preferable to replace it with explicit calls to  **StringBuilder.append()**  or
   **StringBuffer.append()** .
</p>
 **Example:** </p>
<pre> **
  String str = '';
  for(int i=0; i&lt;10; i++) {
    str += i;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String str = '';
  StringBuilder strBuilder = new StringBuilder(str);
  for(int i = 0; i&lt;10; i++) {
    strBuilder.append(i);
  }
  str = strBuilder.toString();
** </pre>
<!-- tooltip end -->

  Sometimes, the quick-fixes allow you to convert a  **String**  variable to a  **StringBuilder**  or
  introduce a new  **StringBuilder** . Be careful if the original code specially handles the  **null**  value, as the
  replacement may change semantics. If  **null**  is possible, null-safe fixes that generate
  necessary null-checks are suggested. Also, it's not guaranteed that the automatic replacement will always be more performant.
</p>
" ></outline><outline text="StringBuilder without initial capacity" _note="
Reports attempts to instantiate a new  **StringBuffer**  or
 **StringBuilder**  object without specifying its initial capacity.

  If no initial capacity is specified, a default capacity is used, which will rarely be optimal.
  Failing to specify the initial capacity for  **StringBuffer**  may result
  in performance issues if space needs to be reallocated and memory copied
  when the initial capacity is exceeded.
</p>
Example:</p>
<pre> **
  // Capacity is not specified
  var sb = new StringBuilder();
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Tail recursion" _note="
Reports tail recursion, that is, when a method calls itself as its last action before returning.

  Tail recursion can always be replaced by looping, which will be considerably faster.
  Some JVMs perform tail-call optimization, while others do not. Thus, tail-recursive solutions may have considerably different
  performance characteristics on different virtual machines.
</p>
Example:</p>
<pre> **
  int factorial(int val, int runningVal) {
    if (val == 1) {
      return runningVal;
    } else {
      return factorial(val - 1, runningVal * val);
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  int factorial(int val, int runningVal) {
    while (true) {
      if (val == 1) {
        return runningVal;
      } else {
        runningVal = runningVal * val;
        val = val - 1;
      }
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Unnecessary temporary object in conversion from String" _note="
Reports unnecessary creation of temporary objects when converting
from  **String**  to primitive types.
 **Example:** </p>
<pre> **
  new Integer('3').intValue()
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Integer.valueOf('3')
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Unnecessary temporary object in conversion to 'String'" _note="
Reports unnecessary creation of temporary objects when converting
from a primitive type to  **String** .
 **Example:** </p>
<pre> **
  String foo = new Integer(3).toString();
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String foo = Integer.toString(3);
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Using 'Random.nextDouble()' to get random integer" _note="
Reports calls to
 **java.util.Random.nextDouble()**  that are used to create a positive integer number by multiplying
the call by a factor and casting to an integer.

  For generating a random positive integer in a range,
   **java.util.Random.nextInt(int)**  is simpler and more efficient.
</p>
 **Example:** </p>
<pre> **
  int getRandomInt() {
    return (int) ((new Random()).nextDouble() * SIZE);
  }
  ** 
</pre>
After the quick-fix is applied:</p>
<pre> **
  int getRandomInt() {
    return (new Random()).nextInt(SIZE);
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Wrapper type may be primitive" _note="
Reports local variables of wrapper type that are mostly used as primitive types.
In some cases, boxing can be source of significant performance penalty, especially in loops.</p>
Heuristics are applied to estimate the number of boxing operations. For example, conversions inside loops are considered
  as much more numerous.</p>

 **Example:** </p>
<pre> **  public void example() {
    Integer value = 12;
    needBox(value);
    for (int i = 0; i &lt; 10; i++) {
      // Loop usages considered as happening more often
      needPrimitive(value);
    }
  }
  void needPrimitive(int value) {}
  void needBox(Integer value) {}
** </pre>
After the quick-fix is applied:</p>
<pre> **  public void example() {
    int value = 12;
    needBox(value);
    for (int i = 0; i &lt; 10; i++) {
      // Loop usages considered as happening more often
      needPrimitive(value);
    }
  }
  void needPrimitive(int value) {}
  void needBox(Integer value) {}
** </pre>
<!-- tooltip end -->

  <small>New in 2018.2</small>
</p>
" ></outline></outline><outline text="Portability" ><outline text="Call to 'Runtime.exec()'" _note="
Reports calls to  **Runtime.exec()**  or any of its variants.
Calls to  **Runtime.exec()**  are inherently unportable.
<!-- tooltip end -->
" ></outline><outline text="Call to 'System.exit()' or related methods" _note="
Reports calls to  **System.exit()** ,  **Runtime.exit()** ,
and  **Runtime.halt()** .

  Invoking  **System.exit()**  or  **Runtime.exit()** 
  calls the shutdown hooks and terminates the currently running Java
  virtual machine. Invoking  **Runtime.halt()**  forcibly
  terminates the JVM without causing shutdown hooks to be started.
  Each of these methods should be used with extreme caution. Calls
  to these methods make the calling code unportable to most
  application servers.
</p>
<!-- tooltip end -->

  Use the option to ignore calls in main methods.

" ></outline><outline text="Call to 'System.getenv()'" _note="
Reports calls to  **System.getenv()** .
Calls to  **System.getenv()**  are inherently unportable.
<!-- tooltip end -->
" ></outline><outline text="Hardcoded file separator" _note="
Reports the forward ( **/** ) or backward ( **\** ) slash in a string or
character literal. These characters are commonly used as file separators, and portability may suffer if they are hardcoded.

  The inspection will not report backward slashes inside escape sequences and forward slashes immediately following the '&lt;' character
  or immediately preceding the '&gt;' character, as those often indicate XML or HTML tags rather than file names.
  Strings representing a  **java.util.TimeZone**  ID, strings that are valid regular expressions,
  or strings that equal IANA-registered MIME media types will not be reported either.
</p>
 **Example:** </p>
<pre> **
  new File('C:\\Users\\Name');
** </pre>
<!-- tooltip end -->

  Use the option to include  **example/***  in the set of recognized media types.
  Normally, usage of the  **example/***  MIME media type outside of an example (e.g. in a  **Content-Type** 
  header) is an error.
</p>
" ></outline><outline text="Hardcoded line separator" _note="
Reports linefeed ( **\n** ) and carriage return ( **\r** ) character escape sequences used in string literals,
character literals or text blocks. These characters are commonly used as line separators, and portability may suffer if they are hardcoded.
 **Example:** </p>
<pre> **
  String count = 'first\nsecond\rthird';
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Native method" _note="
Reports methods declared  **native** . Native methods are inherently unportable.
<!-- tooltip end -->
" ></outline><outline text="Use of 'java.lang.ProcessBuilder' class" _note="
Reports uses of  **java.lang.ProcessBuilder** ,
which might be unportable between operating systems because
paths to executables, environment variables, command-line arguments and
their escaping might vary depending on the OS.
<!-- tooltip end -->
" ></outline><outline text="Use of 'sun.*' classes" _note="
Reports uses of classes from the  **sun.***  hierarchy.
Such classes are non-portable between different JVMs.
<!-- tooltip end -->
" ></outline><outline text="Use of AWT peer class" _note="
Reports uses of AWT peer classes. Such classes represent
native windowing system widgets, and will be non-portable between different windowing
systems.
 **Example:** </p>
<pre> **
  import java.awt.peer.ButtonPeer;
  abstract class Sample implements ButtonPeer {
    public void foo() {
        Sample sample;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Use of concrete JDBC driver class" _note="
Reports uses of specific JDBC driver classes. Use of such classes will
bind your project to a specific database and driver, defeating the purpose of JDBC and
resulting in loss of portability.
 **Example:** </p>
<pre> **
  import java.sql.Driver;
  abstract class Sample implements Driver {
    public void foo() {
        Sample sample;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline></outline><outline text="Probable bugs" ><outline text="'assert' statement with side effects" _note="  
Reports  **assert**  statements that cause side effects.

  Since assertions can be switched off,
  these side effects are not guaranteed, which can cause subtle bugs. Common unwanted side effects detected by this inspection are
  modifications of variables and fields. When methods calls are involved, they are analyzed one level deep.</p>
 **Example:** </p>
<pre> **
  assert i++ &lt; 10;
** </pre>

" ></outline><outline text="'equal()' instead of 'equals()'" _note="
Reports declarations of  **equal()**  with a single parameter.
Normally, this is a typo and  **equals()**  is actually intended.
A quick-fix is suggested to rename the method to  **equals** .</p>
 **Example:** </p>
<pre> **
  class Main {
    public boolean equal(Object obj) {
      return true;
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Main {
    public boolean equals(Object obj) {
      return true;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'equals()' and 'hashCode()' not paired" _note="
Reports classes that override the
 **equals()**  method but do not override the
 **hashCode()**  method or vice versa, which can potentially lead to problems
when the class is added to a  **Collection**  or a  **HashMap** .
The quick-fix generates the default implementation for an absent method.</p>
Example:</p>
<pre> **
class StringHolder {
  String s;
  @Override public int hashCode() {
    return s != null ? s.hashCode() : 0;
  }
}
** </pre>
After the quick-fix is applied:</p>
<pre> **
class StringHolder {
  String s;
  @Override public int hashCode() {
    return s != null ? s.hashCode() : 0;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (!(o instanceof StringHolder)) return false;
    StringHolder holder = (StringHolder)o;
    if (s != null ? !s.equals(holder.s) : holder.s != null) return false;
    return true;
  }
}
** </pre>

" ></outline><outline text="'equals()' between objects of inconvertible types" _note="
Reports calls to  **equals()**  where the target and argument are
of incompatible types.
While such a call might theoretically be useful, most likely it is a bug.</p>
 **Example:** </p>
<pre> **
  new HashSet&lt;String&gt;().equals(new TreeSet&lt;Integer&gt;());
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'equals()' called on 'StringBuilder'" _note="
Reports  **equals()**  calls on  **StringBuilder**  or  **StringBuffer**  instances.
The  **equals()**  method is not overridden in these classes, so it may return  **false**  even when the contents of the two objects are the same.
If the reference equality is intended, it's better to use  **==**  to avoid confusion.</p>
Example:</p>
<pre> **
  public void test(StringBuilder sb1, StringBuilder sb2) {
    boolean result = sb1.equals(sb2); // Suspicious
  }
** </pre>
<!-- tooltip end -->
<small>New in 2017.2</small></p>
" ></outline><outline text="'equals()' called on array" _note="
Reports  **equals()**  calls that compare two arrays.
Calling  **equals()**  on an array compares identity and is equivalent to using  **==** .
  Use  **Arrays.equals()**  to compare the contents of two arrays, or  **Arrays.deepEquals()**  for
  multi-dimensional arrays.</p>
 **Example:** </p>
<pre> **
  void sample(int[] first, int[] second){
    if (first.equals(second)) return;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void sample(int[] first, int[] second){
    if (Arrays.equals(first, second)) return;
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="'equals()' called on itself" _note="
Reports calls to  **equals()**  or  **compareTo()**  where an object is compared for equality
with itself.
According to the method contracts, these operations will always return
   **true**  for  **equals()**  or  **0**  for  **compareTo()** . The inspection also checks
  the calls to  **Objects.equals()** ,  **Objects.deepEquals()** ,
   **Arrays.equals()** ,  **Comparator.compare** , and the like.</p>
 **Example:** </p>
<pre> **
  class Foo {
    boolean foo(Object o) {
        return o.equals(o); // warning
    }
    boolean bar(String[] ss) {
        return Arrays.equals(ss, ss); // warning
    }
}
** </pre>
<!-- tooltip end -->

" ></outline><outline text="'equals()' method which does not check class of parameter" _note="
Reports  **equals()**  methods that do not check the type of their parameter.
Failure to check the type of the parameter
  in the  **equals()**  method may result in latent errors if the object is used in an untyped collection.</p>
 **Example:** </p>
<pre> **
  class MyClass {
    int x;
    @Override
    public boolean equals(Object obj) {
      // equals method should return false if obj is not MyClass
      return ((MyClass)obj).x == x;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'hashCode()' called on array" _note="
Reports incorrect hash code calculation for arrays.
In order to
  correctly calculate the hash code for an array, use:</p>
<ul>
  <li> **Arrays.hashcode()**  for linear arrays</li>
  <li> **Arrays.deepHashcode()**  for multidimensional arrays</li>
</ul>
These methods should also be used with  **Objects.hash()**  when
the sequence of input values includes arrays, for example:
 **Objects.hash(string, Arrays.hashcode(array))** 
<!-- tooltip end -->


" ></outline><outline text="'instanceof' with incompatible interface" _note="
Reports  **instanceof**  expressions where
the compared type is an interface, and the compared expression has a class type that neither
implements the compared interface, nor has any visible subclasses which implement the compared interface.

  Although that might be intended, normally such a construct is most likely an error, where
  the resulting  **instanceof**  expression always evaluates to  **false** .
</p>
 **Example:** </p>
<pre> **
  interface I1 {}
  interface I2 {}
  interface I3 extends I1 {}
  static class Sub1 implements I1 {}
  static class Sub2 extends Sub1 implements I2 {
    void test(Sub1 sub1) {
      if (sub1 instanceof I3) { // here 'I3' is incompatible interface
      }
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="'Iterator.hasNext()' which calls 'next()'" _note="
Reports implementations of  **Iterator.hasNext()**  or  **ListIterator.hasPrevious()**  that call
 **Iterator.next()**  or  **ListIterator.previous()**  on the iterator instance. Such calls are almost certainly an error, as methods
like  **hasNext()**  should not modify the iterators state, while  **next()**  should.
 **Example:** </p>
<pre> **
  class MyIterator implements Iterator&lt;Integer&gt; {
    public boolean hasNext() {
      return next() != null;
    }
  }
** </pre>
" ></outline><outline text="'Iterator.next()' which can't throw 'NoSuchElementException'" _note="
Reports implementations of  **Iterator.next()** 
that cannot throw  **java.util.NoSuchElementException** .

  Such implementations violate the contract of  **java.util.Iterator** ,
  and may result in subtle bugs if the iterator is used in a non-standard way.
</p>
 **Example:** </p>
<pre> **
  class Numbers implements Iterator&lt;Integer&gt; {
    @Override
    public Integer next() { //warning
        if (hasNext()) {
            return generateNext();
        } else {
            return null; //throw NoSuchElementException instead
        }
    }
    ...
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'Math.random()' cast to 'int'" _note="
Reports calls to  **Math.random()**  which are immediately
cast to  **int** . 
Casting a  **double**  between  **0.0**  (inclusive) and
   **1.0**  (exclusive) to  **int**  will always round down to zero. The value
  should first be multiplied by some factor before casting it to an  **int**  to
  get a value between zero (inclusive) and the multiplication factor (exclusive).
  Another possible solution is to use the  **nextInt()**  method of
   **java.util.Random** .</p>
 **Example:** </p>
<pre> **   **int**  r = ( **int** )Math.random() * 10;
** </pre>
After the quick fix is applied:</p>
<pre> **   **int**  r = ( **int** )(Math.random() * 10);
** </pre>
  <!-- tooltip end -->

" ></outline><outline text="'ScheduledThreadPoolExecutor' with zero core threads" _note="
Reports any  **java.util.concurrent.ScheduledThreadPoolExecutor**  instances in which
 **corePoolSize**  is set to zero via the  **setCorePoolSize**  method or
the object constructor.

  A  **ScheduledThreadPoolExecutor**  with zero core threads will run nothing.
</p>
 **Example:** </p>
<pre> **
  void foo(int corePoolSize) {
      if (corePoolSize != 0) return;
      ThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(corePoolSize); // warning
      executor.setCorePoolSize(corePoolSize); // warning
  }
** </pre>

" ></outline><outline text="'String.equals()' called with 'CharSequence' argument" _note="
Reports calls to  **String.equals()**  with a  **CharSequence**  as the argument.

   **String.equals()**  can only return  **true**  for  **String**  arguments.
  To compare the contents of a  **String**  with a non- **String**   **CharSequence**  argument,
  use the  **contentEquals()**  method.</p>
 **Example:** </p>
<pre> **
  boolean equals(String s, CharSequence ch) {
    return s.equals(ch);
  }
** </pre>
After quick-fix is applied:</p>
<pre> **
  boolean equals(String s, CharSequence ch) {
    return s.contentEquals(ch);
  }
** </pre>
<!-- tooltip end -->

<small>New in 2017.3</small>
" ></outline><outline text="Array comparison using '==', instead of 'Arrays.equals()'" _note="
Reports operators  **==**  and  **!=**  used to test for array equality.
In most cases, testing for the equality of array contents is intended,
which can be done with the  **java.util.Arrays.equals()**  method.

  A quick-fix is suggested to replace  **==**  with  **java.util.Arrays.equals()** .
</p>
 **Example:** </p>
<pre> **
  void foo(Object[] x, Object[] y) {
    boolean comparison = x == y;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void foo(Object[] x, Object[] y) {
    boolean comparison = Arrays.equals(x, y);
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Call to 'toString()' on array" _note="
Reports arrays used in  **String**  concatenations or passed as parameters to  **java.io.PrintStream** 
methods, such as  **System.out.println()** .

  Usually, the content of the array is meant to be used and not the array object itself.
</p>
 **Example:** </p>
<pre> **
  void print(Object[] objects) {
    System.out.println(objects);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void print(Object[] objects) {
    System.out.println(Arrays.toString(objects));
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Call to default 'toString()'" _note="
Reports calls to  **toString()**  that use the default implementation
from  **java.lang.Object** .
The default implementation is rarely intended but may be used by accident.</p>

  Calls to  **toString()**  on objects with  **java.lang.Object** ,
  interface or abstract class type are ignored by this inspection.
</p>
 **Example:** </p>
<pre> **
  class Bar {
      void foo1(Bar bar) {
          String s = bar.toString(); // warning
          /* ... */
      }
      void foo2(Object obj) {
          String s = obj.toString(); // no warning here
          /* ... */
      }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Cast conflicts with 'instanceof'" _note="
Reports type cast expressions that are preceded by an  **instanceof**  check for a different type.

  Although this might be intended, such a construct is most likely an error, and will
  result in a  **java.lang.ClassCastException**  at runtime.
</p>
 **Example:** </p>
<pre> **
  class Main {
    int whenCharSequenceCastToNumber(Object o){
      if (o instanceof CharSequence) {
        return ((Number) o).intValue();
      }
      return 0;
    }
    int earlyReturnWhenNotCharSequence(Object o){
      if (!(o instanceof CharSequence)) return 0;
      return ((Number)o).intValue();
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Casting to incompatible interface" _note="
Reports type cast expressions where
the cast type is an interface and the cast expression has a class type that neither
implements the cast interface, nor has any visible subclasses that implement the cast interface.

  Although this might be intended, such a construct is most likely an error, and will
  result in a  **java.lang.ClassCastException**  at runtime.
</p>
 **Example:** </p>
<pre> **
  interface A {}
  interface Z {}
  static class C {}
  void x(C c) {
    if (c instanceof Z) {
      A a = ((A)c); // cast to incompatible interface 'A'
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Cleaner captures object reference" _note="
Reports  **Runnable**  passed to a  **Cleaner.register()**  capturing reference that leads to a memory leak.
Possible sources of this problem:</p>
<ul>
  <li>Lambda using non-static methods, fields, or  **this**  itself</li>
  <li>Non-static inner class (anonymous or not) always captures this reference</li>
  <li>Instance method reference</li>
  <li>Access to outer class non-static members from non-static inner class</li>
</ul>
<!-- tooltip end -->
Sample of code that will be reported: </p>
<pre> **
  int fileDescriptor;
  Cleaner.Cleanable cleanable = Cleaner.create().register(this, () -> {
    System.out.println('adsad');
    //<i>this</i> is captured via <i>fileDescriptor</i>
    fileDescriptor = 0;
  });
** </pre>
This inspection only reports if the language level of the project or module is 9 or higher.</p>
<small>New in 2018.1</small></p>
" ></outline><outline text="Collection added to itself" _note="
Reports cases where the argument of a method call on a  **java.util.Collection** 
or  **java.util.Map**  is the collection or map itself.
Such situations may occur as a result of copy-paste in code with raw types.

 **Example:** </p>
<pre> **
  ArrayList list = new ArrayList&lt;&gt;();
  list.add(list); // warning here
  return list.hashCode(); // throws StackOverflowError
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Comparable implemented but 'equals()' not overridden" _note="
Reports classes that implement  **java.lang.Comparable** 
but do not override  **equals()** .

  If  **equals()** 
  is not overridden, the  **equals()**  implementation is not consistent with
  the  **compareTo()**  implementation. If an object of such a class is added
  to a collection such as  **java.util.SortedSet** , this collection will violate
  the contract of  **java.util.Set** , which is defined in terms of
   **equals()** .
</p>
 **Example:** </p>
<pre> **
  class Length implements Comparable&lt;Length> {
    private int cm = 0;
    @Override
    public int compareTo(@NotNull Length o) {
      if (cm == o.cm) return 0;
      return cm &lt; o.cm ? -1 : 1;
    }
  }
** </pre>
After the quick fix is applied:</p>
<pre> **
  class Length implements Comparable&lt;Length> {
    private int cm = 0;
    @Override
    public int compareTo(@NotNull Length o) {
      if (cm == o.cm) return 0;
      return cm &lt; o.cm ? -1 : 1;
    }
    @Override
    public boolean equals(Object o) {
      return o instanceof Length && compareTo((Length) o) == 0;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Confusing 'main()' method" _note="
Reports methods that are named 'main', but do not have the
 **public static void main(String[])**  signature.
Such methods may be confusing, as methods named 'main'
  are expected to be application entry points.</p>
 **Example:** </p>
<pre> **
  class Main {
    void main(String[] args) {} //a warning here because there are no 'public static' modifiers
  }
** </pre>
A quick-fix that renames such methods is available only in the editor.</p>
<!-- tooltip end -->


" ></outline><outline text="Confusing argument to varargs method" _note="
Reports calls to variable arity methods that have a single argument
in the vararg parameter position, which is either a  **null**  or an array of a subtype of the vararg parameter.
Such an argument may be confusing as it is unclear if a varargs or non-varargs call is desired.
 **Example:** </p>
<pre> **
  String[] ss = new String[]{'foo', 'bar'};
  System.out.printf('%s', ss);
** </pre>
In this example only the first element of the array will be printed, not the entire array.</p>
<!-- tooltip end -->

" ></outline><outline text="Confusing primitive array argument to varargs method" _note="
Reports any calls to a variable arity method where the call has a primitive array in
the variable arity parameter position (for example,  **System.out.printf('%s', new int[]{1, 2, 3})** ).
Such a primitive-array argument may be confusing, as it will be wrapped as a single-element array, rather than each individual
element being boxed, as might be expected.
<!-- tooltip end -->
 **Example:** </p>
<pre> **
  String.format('%s', new int[]{1, 2, 3});
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String.format('%s', (Object) new int[]{1, 2, 3});
** </pre>
" ></outline><outline text="Constant condition in 'assert' statement" _note="
Reports  **assert**  statement conditions that are constants.  **assert** 
statements with constant conditions will either always fail or always succeed.
Such statements might be left over after a refactoring and are probably not intended.
 **Example:** </p>
<pre> **
    void foo() {
        assert true;
    }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Constant conditions & exceptions" _note="
Reports code constructs that always produce the same result, may throw exceptions, or violates nullability contracts.
Examples:</p>
<pre> **if (array.length &lt; index) {
  System.out.println(array[index]);
} // Array index is always out of bounds
if (str == null) System.out.println('str is null');
System.out.println(str.trim());
// the last statement may throw an NPE
@NotNull
Integer square(@Nullable Integer input) {
    // the method contract is violated
    return input == null ? null : input * input;
}** </pre>

  The inspection behavior may be controlled by a number of annotations, such as 
  <a href='https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html'>nullability</a> annotations,
   **<a href='https://www.jetbrains.com/help/idea/contract-annotations.html'>@Contract</a>**  annotation, 
   **@Range**  annotation and so on.
</p>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Suggest @Nullable annotation for methods/fields/parameters where nullable values are used**  option to warn when a
    nullable value is passed as an argument to a method with a non-annotated parameter,
    stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating
    the  **@Nullable**  annotation. You can also configure nullability annotations using the  **Configure Annotations**  button.</li>
  <li>Use the  **Treat non-annotated members and parameters as @Nullable**  option to assume that non-annotated members can be null,
    so they must not be used in non-null context.</li>
  <li>Use the  **Report not-null required parameter with null-literal argument usages**  option to report method parameters that cannot be
    null (e.g. immediately dereferenced in the method body), but there are call sites where a  **null**  literal is passed.</li>
  <li>Use the  **Report nullable methods that always return a non-null value**  option to report methods that are annotated as
   **@Nullable** , but always return non-null value. In this case, it's suggested that you change the annotation to  **@NotNull** .</li>
  <li>Use the  **Don't report assertions with condition statically proven to be always true**  option to avoid reporting assertions that were
    statically proven to be always true. This also includes conditions like  **if (alwaysFalseCondition) throw new IllegalArgumentException();** .</li>
  <li>Use the  **Ignore assert statements**  option to control how the inspection treats  **assert**  statements. By default, the option
    is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored
    (-da mode).</li>
  <li>Use the  **Warn when reading a value guaranteed to be constant**  option to add warnings on reading variables that contain some constant values,
    for example:  **true** ,  **false** , or  **null** .</li>
  <li>Use the  **Report problems that happen only on some code paths**  option to control whether to report problems that may happen only
    on some code path. If this option is disabled, warnings like <i>exception is possible</i> will not be reported. The inspection will report
    only warnings like <i>exception will definitely occur</i>. This mode may greatly reduce the number of false-positives, especially if the code
    is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most
    important problems in legacy code bases.
  </li>
</ul>

" ></outline><outline text="Contract issues" _note="
Reports issues in method  **@Contract**  annotations. The types of issues that can be reported are:
<ul>
<li>Errors in contract syntax</li>
<li>Contracts that do not conform to the method signature (wrong parameter count)</li>
<li>Method implementations that contradict the contract (e.g. return  **true**  when the contract says  **false** )</li>
</ul>
Example:</p>
<pre> **
  // method has no parameters, but contract expects 1
  @Contract('_ -> fail')
   **void**  x() {
     **throw**  new AssertionError();
  }
** </pre>
" ></outline><outline text="Copy constructor misses field" _note="
Reports copy constructors that don't copy all the fields of the class.

   **final**  fields with initializers and  **transient**  fields are considered unnecessary to copy.
</p>
 **Example:** </p>
<pre> **
  class Point {
    private int x;
    private int y;
    Point(int x, int y) {
      this.x = x;
      this.y = y;
    }
    Point(Point other) {
      // fields x and y are not initialized
    }
  }
** </pre>
<!-- tooltip end -->
<small>New in 2018.1</small>
" ></outline><outline text="Covariant 'equals()'" _note="
Reports  **equals()**  methods taking an argument type other than
 **java.lang.Object**  if the containing class does not have other overloads of
 **equals()**  that take  **java.lang.Object**  as
its argument type.

  A covariant version of  **equals()**  does not override the
   **Object.equals(Object)**  method. It may cause unexpected
  behavior at runtime. For example, if the class is used to construct
  one of the standard collection classes, which expect that the
   **Object.equals(Object)**  method is overridden.
</p>
 **Example:** </p>
<pre> **
  class Foo {
      public boolean equals(Foo foo) {  // warning
          return false;
      }
  }
  class Bar {
      public boolean equals(Bar bar) {  // no warning here
          return false;
      }
      @Override
      public boolean equals(Object obj) {
          return false;
      }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Duplicated delimiters in java.util.StringTokenizer" _note="
Reports either a  **StringTokenizer**  constructor or a  **nextToken**  method call that
contains duplicate characters in the delimiter argument, e.g.  **tokenizer.nextToken('\n\n')** .
" ></outline><outline text="Infinite recursion" _note="
Reports methods that call themselves infinitely unless an exception is thrown.

  Methods reported by this inspection cannot return normally.
  While such behavior may be intended, in many cases this is just an oversight.
</p>
 **Example:** </p>
<pre> **  int baz() {
      return baz();
  }** </pre>
<!-- tooltip end -->

" ></outline><outline text="Inner class referenced via subclass" _note="
Reports accesses of inner and nested classes where the call is qualified
by a subclass of the declaring class, rather than the declaring class itself.

  Java allows such qualification, but such accesses may indicate a subtle confusion of inheritance and overriding.
</p>
 **Example:** </p>
<pre> **
  class Super {
    static class Inner {}
  }
  class Sub extends Super {
    void test() {
      Sub.Inner s = new Sub.Inner(); // 'Inner' class is declared in 'Super' class, but referenced via 'Sub' class
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Super {
    static class Inner {}
  }
  class Sub extends Super {
    void test() {
      Super.Inner s = new Super.Inner();
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Instantiation of utility class" _note="
Reports instantiation of utility classes using the  **new**  keyword.

  In utility classes, all fields and methods are  **static** .
  Instantiation of such classes is most likely unnecessary and indicates a mistake.</p>
 **Example:** </p>
<pre> **
  class MyUtils {
    public static double cube(double x) {
      return x * x * x;
    }
  }
  class Main {
    public static void main(String[] args) {
      // Instantiation of utility class
      MyUtils utils = new MyUtils();
    }
  }
** </pre>

  To prevent utility classes from being instantiated,
  it's recommended to use a  **private**  constructor.
</p>
<!-- tooltip end -->
" ></outline><outline text="Invalid method reference used for 'Comparator'" _note="
Reports method references mapped to the  **Comparator**  interface that don't fulfill its contract.

Some method references, like  **Integer::max** , can be mapped to the  **Comparator**  interface.
However, using them as  **Comparator**  is meaningless and the result might be unpredictable.
</p>
Example:</p>
<pre> **
  ArrayList&lt;Integer&gt; ints = foo();
  ints.sort(Math::min);
** </pre>
After the quick-fix is applied:</p>
<pre> **
  ArrayList&lt;Integer&gt; ints = foo();
  ints.sort(Comparator.reverseOrder());
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Iterable is used as vararg" _note="
Reports suspicious usages of  **Collection**  or  **Iterable**  in vararg method calls.
For example, in the following method:</p>
<pre> **
  &lt;T&gt; boolean contains(T needle, T... haystack) {...}
** </pre>
a call like</p>
<pre> **
  if(contains('item', listOfStrings)) {...}
** </pre>
looks suspicious as the list will be wrapped into a single element array.
  Such code can be successfully compiled and will likely run without
  exceptions, but it's probably used by mistake.</p>
<!-- tooltip end -->
<small>New in 2019.2</small></p>
" ></outline><outline text="Loop executes zero or billions of times" _note="
Reports loops that cannot be completed without an index overflow or loops that don't loop at all.
It usually happens because of a mistake in the update operation.
Example:</p>
<pre> **
  void foo(int s) {
    for (int i = s; i > 12; i++) { // i-- should be here
      System.out.println(i);
    }
  }
** </pre>
<!-- tooltip end -->
<small>New in 2019.1</small></p>
" ></outline><outline text="Magic Constant" _note="
Reports expressions that can be replaced with 'magic' constants.
Example 1:</p>
<pre> **
  // Bare literal '2' is used, warning:
  Font font = new Font('Arial', 2)
** </pre>
Example 2:</p>
<pre> **
  // Predefined constant is used, good:
  Font font = new Font('Arial', Font.ITALIC)
** </pre>

  When possible, the quick-fix inserts an appropriate predefined constant.
</p>
<!-- tooltip end -->

  The behavior of this inspection is controlled by  **org.intellij.lang.annotations.MagicConstant**  annotation.
  Some standard Java library methods are pre-annotated, but you can use this annotation in your code as well.
</p>

" ></outline><outline text="Malformed format string" _note="
Reports format strings that don't comply with the standard Java syntax.
By default, the inspection considers a compile-time constant as a format string if it's used as an argument to the corresponding methods on
 **java.util.Formatter** ,  **java.lang.String** ,  **java.io.PrintWriter**  or  **java.io.PrintStream** .
</p>
 **Example:** </p>
<pre> **
  String.format('x = %d, y = %d', 42);
** </pre>
<!-- tooltip end -->
Use the inspection settings to mark additional classes and methods as related to string formatting.</p>
" ></outline><outline text="Meaningless record annotation" _note="
Reports annotations used on record components that have no effect.
This can happen in two cases:</p>
<ul>
  <li>The reported annotation has the METHOD target, but the corresponding accessor is explicitly defined.</li>
  <li>The reported annotation has the PARAMETER target, but the canonical constructor is explicitly defined.</li>
</ul>
Example:</p>
<pre> **
@Target(ElementType.METHOD)
@interface A { }
  
// The annotation will not appear in bytecode at all,
// as it should be propagated to the accessor but accessor is explicitly defined 
record R(@A int x) {
  public int x() { return x; }
}
** </pre>
<!-- tooltip end -->
<small>New in 2021.1</small></p>
" ></outline><outline text="Mismatched case in 'String' operation" _note="
Reports  **String**  method calls that always return the same value ( **-1**  or  **false** )
because a lowercase character is searched in an uppercase-only string or vice versa.
Reported methods include  **equals** ,  **startsWith** ,  **endsWith** ,  **contains** ,
   **indexOf** , and  **lastIndexOf** .</p>
 **Example:** </p>
<pre>
  if (columnName.toLowerCase().equals('ID')) {...}
</pre>
<!-- tooltip end -->
<small>New in 2019.3</small></p>
" ></outline><outline text="Mismatched query and update of 'StringBuilder'" _note="
Reports  **StringBuilder**  or  **StringBuffer**  objects whose contents are read but not written to,
or written to but not read.
Such inconsistent reads and writes are pointless and probably indicate
  dead, incomplete, or erroneous code.</p>
 **Example:** </p>
<pre> **
  public void m1() {
    StringBuilder sb = new StringBuilder();
    sb.append('a');
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Mismatched query and update of collection" _note="
Reports collections whose contents are either queried and
not updated, or updated and not queried.
<!-- tooltip end -->

  Such inconsistent queries and updates are pointless and may indicate
  either dead code or a typo.
</p>

  Use the inspection settings to specify name patterns that correspond to update/query methods.
  Query methods that return an element are automatically detected, and only
  those that write data to an output parameter (for example, an  **OutputStream** ) need to be specified.

 **Example:** </p>
Suppose you have your custom  **FixedStack**  class with method  **store()** :
<pre> **
  public class FixedStack&lt;T&gt; extends Collection&lt;T&gt; {
    public T store(T t) {
      // implementation
    }
  }
** </pre>
You can add  **store**  to the update methods table in order to report mismatched queries like:
<pre> **
  void test(int i) {
    FixedStack&lt;Integer&gt; stack = new FixedStack&lt;&gt;();
    stack.store(i);
  }
** </pre>
" ></outline><outline text="Mismatched read and write of array" _note="
Reports arrays whose contents are read but not updated,
or updated but not read. Such inconsistent reads and writes are pointless and probably indicate
dead, incomplete or erroneous code.
<!-- tooltip end -->
 **Example:** </p>
<pre> **
  final int[] bar = new int[3];
  bar[2] = 3;
** </pre>


" ></outline><outline text="New object is compared using '=='" _note="
Reports code that applies  **==**  or  **!=**  to a newly allocated object
instead of calling  **equals()** .

  The references to newly allocated objects cannot point at existing objects,
  thus the comparison will always evaluate to  **false** . The inspection may also report newly
  created objects returned from simple methods.
</p>
 **Example:** </p>
<pre> **
  void test(Object obj) {
    if (new Object() == obj) {...}
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void test(Object obj) {
    if (new Object().equals(obj)) {...}
  }
** </pre>
<!-- tooltip end -->

  <small>New in 2018.3</small>
</p>
" ></outline><outline text="Non-final field referenced in 'compareTo()'" _note="
Reports access to a non- **final**  field inside a  **compareTo()**  implementation.

  Such access may result in  **compareTo()** 
  returning different results at different points in the object's lifecycle, which may in turn cause problems when
  using the standard collections classes, for example  **java.util.TreeSet** .
</p>

  A quick-fix to make the field  **final**  is available
  only when there is no write access to the field, otherwise no fixes are suggested.
</p>
 **Example:** </p>
<pre> **
  class Foo implements Comparable&lt;Foo&gt;{
    private int index;
    Foo(int idx) {
      index = idx;
    }
    @Override
    public int compareTo(Foo foo) {
     return Integer.compare(this.index, foo.index);
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo implements Comparable&lt;Foo&gt;{
    private final int index;
    Foo(int idx) {
      index = idx;
    }
    @Override
    public int compareTo(Foo foo) {
      return Integer.compare(this.index, foo.index);
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Non-final field referenced in 'equals()'" _note="
Reports implementations of  **equals()**  that access
non- **final**  variables. Such access may result in  **equals()** 
returning different results at different points in the object's lifecycle, which may in turn cause problems when
using the standard collections classes.
 **Example:** </p>
<pre> **
  public class Person {
    private String lastName;
    @Override
    public boolean equals(Object obj) {
      ...
      Person other = (Person) obj;
      if (lastName == null) {
        if (!lastName.equals(other.lastName)) {
        return false;
      ...
      }
    }
  }
  ** 
</pre>
<!-- tooltip end -->

" ></outline><outline text="Non-final field referenced in 'hashCode()'" _note="
Reports implementations of  **hashCode()**  that access
non- **final**  variables.

  Such access may result in  **hashCode()** 
  returning different values at different points in the object's lifecycle, which may in turn cause problems when
  using the standard collections classes.
</p>
 **Example:** </p>
<pre> **
  class Drink {
    String name;
    Drink(String name) { this.name = name; }
    @Override public int hashCode() {
      return Objects.hash(name); //warning
    }
  }
  ...
    Drink coffee = new Drink('Coffee');
    priceMap.put(coffee, 10.0);
    coffee.name = 'Tea';
    double coffeePrice = priceMap.get(coffee); //not found
** </pre>
A quick-fix is suggested to make the field final:</p>
<pre> **
  class Drink {
    final String name;
    ...
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Non-short-circuit boolean expression" _note="
Reports usages of the non-short-circuit forms of boolean 'and' and 'or' ( **&amp;** 
and  **|** ).
Although the non-short-circuit versions are occasionally useful, in most cases the short-circuit forms ( **&amp;&amp;** 
and  **||** ) are intended and such unintentional usages may lead to subtle bugs.

  A quick-fix is suggested to use the short-circuit versions.
</p>
 **Example:** </p>
<pre> **
  void foo(boolean x, boolean y) {
    if (x | y) { /**/ }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void foo(boolean x, boolean y) {
    if (x || y) { /**/ }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Non-short-circuit operation consumes infinite stream" _note="
Reports non-short-circuit operations consuming an infinite stream. Such operations can be completed only by throwing an exception.
Example:</p>
<pre> **
  Stream.iterate(0, i -> i + 1).collect(Collectors.toList())
** </pre>
" ></outline><outline text="Nullability problems" ><outline text="@NotNull field is not initialized" _note="
Reports fields annotated as not-null that are not initialized in the constructor.
Example:</p>
<pre> **public class MyClass {
  private @NotNull String value;
  public void setValue(@NotNull String value) {
    this.value = value;
  }
  public @NotNull String getValue() {
    return value;
  }
  }** </pre>

  Such fields may violate the not-null constraint. In the example above, the  **setValue**  parameter is annotated as not-null, but
   **getValue**  may return null if the setter was not called.
</p>
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Ignore fields which could be initialized implicitly**  option to control whether a warning should be issued if the field could be initialized implicitly
    (e.g. via a dependency injection).</li>
  <li>Use the  **Ignore fields initialized in setUp() method**  option to control whether a warning should be issued if the field is written in the test case  **setUp()**  method.</li>
</ul>
" ></outline><outline text="@NotNull/@Nullable problems" _note="
Reports problems related to nullability annotations.
 **Examples:** </p>
<ul>
  <li>Overriding methods are not annotated:
    <pre> **
abstract class A {
  @NotNull abstract String m();
}
class B extends A {
    String m() { return 'empty string'; }
}
    ** </pre>
  </li>
  <li>Annotated primitive types:  **@NotNull int myFoo;**  </li>
  <li>Both  **@Nullable**  and  **@NotNull**  are present on the same member:  **@Nullable @NotNull String myFooString;** </li>
  <li>Collection of nullable elements is assigned into a collection of non-null elements:
    <pre> **
void testList(List&lt;@Nullable String> nullableList) {
   List&lt;@NotNull String> list2 = nullableList;
}
    ** </pre>
  </li>
</ul>
<!-- tooltip end -->
Use the  **Configure Annotations**  button to specify nullability annotations and the checkboxes to fine-tune where the inspection should provide warnings.</p>
This inspection only reports if the language level of the project or module is 5 or higher, 
  and nullability annotations are available on the classpath.</p>

" ></outline><outline text="Return of 'null'" _note="
Reports  **return**  statements with  **null**  return values.
While occasionally useful, this construct may make the code more prone
to failing with a  **NullPointerException** .

  If a method is designed to return  **null** , it is suggested to mark it with the
   **@Nullable**  annotation - such methods will be ignored by this inspection.
</p>
 **Example:** </p>
<pre> **
  class Person {
    public String getName () {
      return null;
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Person {
    @Nullable
    public String getName () {
      return null;
    }
  }
** </pre>

  If the return type is  **java.util.Optional** , an additional quick-fix to convert
   **null**  to  **Optional.empty()**  is suggested.
</p>
<!-- tooltip end -->

  Use the following options to configure the inspection:
</p>
<ul>
  <li>
    Whether to ignore  **private**  methods.
    This will also ignore return of  **null**  from anonymous classes and lambdas.
  </li>
  <li>
    Whether  **null**  values on array returns, collection
    object returns, plain object returns, or a combination of the three should be reported.
    Return of  **null**  in methods with return type  **java.util.Optional**  are always reported.
  </li>
  <li>
    Click  **Configure annotations**  to specify which annotations should be considered 'nullable'.
  </li>
</ul>

" ></outline><outline text="Return value is outside of declared range" _note="
Reports numeric values returned from methods that don't conform to the declared method return range.
You can declare method return range using a number of annotations:
<ul>
  <li> **org.jetbrains.annotations.Range**  from JetBrains annotations package (specify 'from' and 'to')</li>
  <li> **org.checkerframework.common.value.qual.IntRange**  from Checker Framework annotations package (specify 'from' and 'to')</li>
  <li> **org.checkerframework.checker.index.qual.GTENegativeOne**  from Checker Framework annotations package (range is '>= -1')</li>
  <li> **org.checkerframework.checker.index.qual.NonNegative**  from Checker Framework annotations package (range is '>= 0')</li>
  <li> **org.checkerframework.checker.index.qual.Positive**  from Checker Framework annotations package (range is '> 0')</li>
  <li> **javax.annotation.Nonnegative**  from JSR 305 annotations package (range is '>= 0')</li>
  <li> **javax.validation.constraints.Min**  (specify minimum value)</li>
  <li> **javax.validation.constraints.Max**  (specify maximum value)</li>
</ul>
Example:</p>
<pre> **
  @Range(from = 0, to = Integer.MAX_VALUE) int getValue() {
    // Warning: -1 is outside of declared range
    return -1;
  }
** </pre>
<!-- tooltip end -->
<small>New in 2021.2</small></p>

" ></outline></outline><outline text="Number comparison using '==', instead of 'equals()'" _note="
Reports code that uses  **==**  or  **!=**  instead of  **equals()**  to test for  **Number**  equality.

  With auto-boxing, it is easy
  to make the mistake of comparing two instances of a wrapper type instead of two primitives, for example  **Integer**  instead of
   **int** .
</p>
 **Example:** </p>
<pre> **  void foo(Integer a, Integer b) {
    final boolean bool = a == b;
  }
** </pre>
If  **a**  is known to be non-null, then it's safe to apply the 'unsafe' quick-fix and get the result similar to the following:</p>
<pre> **  void foo(Integer a, Integer b) {
    final boolean bool = a.equals(b);
  }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Object comparison using '==', instead of 'equals()'" _note="
Reports code that uses  **==**  or  **!=**  rather than  **equals()**  to test for  **Object**  equality.
Comparing objects using  **==**  or  **!=**  is often a bug, because it compares objects by identity instead of
  equality.
  Comparisons to  **null**  are not reported.
  Array,  **String**  and  **Number**  comparisons are reported by separate inspections.
</p>
 **Example:** </p>
<pre> **   **if**  (list1 == list2) {
     **return** ;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **   **if**  (Object.equals(list1, list2)) {
     **return** ;
  }
** </pre>
<!-- tooltip end -->

Use the inspection settings to configure exceptions for this inspection.</p>
" ></outline><outline text="Optional.get() is called without isPresent() check" _note="
Reports calls to  **get()**  on an  **Optional**  without checking that it has a value.
Calling  **Optional.get()**  on an empty  **Optional**  instance will throw an exception.</p>
 **Example:** </p>
<pre> **
   **void**  x(List&lt;Integer> list) {
     **final**  Optional&lt;Integer> optional =
      list.stream().filter(x -> x > 10).findFirst();
     **final**  Integer result = optional.get(); // problem here
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Overwritten Map, Set, or array element" _note="
Reports code that overwrites a  **Map**  key, a  **Set**  element, or an array element in a sequence of
 **add** / **put**  calls or using a Java 9 factory method like  **Set.of**  (which will result in runtime exception).
This usually occurs due to a copy-paste error.</p>
 **Example:** </p>
<pre> **
  map.put('A', 1);
  map.put('B', 2);
  map.put('C', 3);
  map.put('D', 4);
  map.put('A', 5); // duplicating key 'A', overwrites the previously written entry
** </pre>
<!-- tooltip end -->
<small>New in 2017.3</small></p>
" ></outline><outline text="Redundant operation on empty container" _note="
Reports redundant operations on empty collections, maps or arrays.

  Iterating, removing elements, sorting,
  and some other operations on empty collections have no effect and can be removed. Also, they may be a signal of a bug.</p>
 **Example:** </p>
<pre> **
  if (numbers.isEmpty()){
    //error due to the missed negation
    int max = numbers.stream().max(Comparator.naturalOrder()).get();
    ...
  }
** </pre>
<!-- tooltip end -->
<small>New in 2019.1</small></p>
" ></outline><outline text="Reference checked for 'null' is not used inside 'if'" _note="
Reports references to variables that are checked for nullability
in the condition of an  **if**  statement or
conditional expression but not used inside that
 **if**  statement.

  Usually this either means that
  the check is unnecessary or that the variable is not referenced inside the
   **if**  statement by mistake.
</p>
 **Example:** </p>
<pre> **
  void test(Integer i) {
    if (i != null) { // here 'i' is not used inside 'if' statement
      System.out.println();
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Reflective access to a source-only annotation" _note="
Reports attempts to reflectively check for the presence of a non-runtime annotation.
Using  **Class.isAnnotationPresent()**  to test for an annotation
  whose retention policy is set to  **SOURCE**  or  **CLASS** 
  (the default) will always have a negative result. This mistake is easy to overlook.</p>
 **Example:** </p>
<pre> **
  {
    getClass().isAnnotationPresent(SourceAnnotation.class); //always false
  }
  @Retention(RetentionPolicy.SOURCE)
  @interface SourceAnnotation {}
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Result of method call ignored" _note="
Reports method calls whose result is ignored.
For many methods, ignoring the result is perfectly
  legitimate, but for some it is almost certainly an error. Examples of methods where ignoring
  the result is likely an error include  **java.io.inputStream.read()** ,
  which returns the number of bytes actually read, and any method on
   **java.lang.String**  or  **java.math.BigInteger** . These methods do not produce side-effects and thus pointless
  if their result is ignored.
</p>
The calls to the following methods are inspected:</p>
<ul>
  <li>Simple getters (which do nothing except return a field)</li>
  <li>Methods specified in the settings of this inspection</li>
  <li>Methods annotated with  **org.jetbrains.annotations.Contract(pure=true)** </li>
  <li>Methods annotated with .*. **CheckReturnValue** </li>
  <li>Methods in a class or package annotated with  **javax.annotation.CheckReturnValue** </li>
  <li>Optionally, all non-library methods</li>
</ul>
Calls to methods annotated with Error Prone's or AssertJ's  **@CanIgnoreReturnValue**  annotation are not reported.
<!-- tooltip end -->

  Use the inspection settings to specify the classes to check.
  Methods are matched by name or name pattern using Java regular expression syntax.
  For classes, use fully-qualified names. Each entry applies to both the class and all its inheritors.


" ></outline><outline text="Result of object allocation ignored" _note="
Reports object allocations where the allocated object is ignored and neither assigned to a variable nor used in another way.

  Such allocation expressions are legal in Java, but are usually either unintended, or
  evidence of a very odd object initialization strategy.
</p>
<!-- tooltip end -->

  Use the options to list classes whose allocations should be ignored by this inspection.

" ></outline><outline text="Sorted collection with non-comparable elements" _note="
Reports construction of sorted collections, for example  **TreeSet** , that rely on natural ordering,
whose element type doesn't implement the  **Comparable**  interface.
It's unlikely that such a collection will work properly.</p>

  A false positive is possible if the collection element type is a non-comparable super-type,
  but the collection is intended to only hold comparable sub-types. Even if this is the case,
  it's better to narrow the collection element type or declare the super-type as  **Comparable**  because the mentioned approach is error-prone.
</p>
<!-- tooltip end -->

  The inspection also reports cases when the collection element is a type parameter which is not declared as  **extends Comparable** .
  You can suppress the warnings on type parameters using the provided option (for example, to keep the API compatibility).
</p>

  <small>New in 2018.3</small>
</p>
" ></outline><outline text="Statement with empty body" _note="
Reports  **if** ,  **while** ,  **do** ,  **for** , and  **switch**  statements
with empty bodies.
While occasionally intended, such code is confusing and is often the result of a typo.</p>
<!-- tooltip end -->
This inspection is disabled in JSP files.</p>
" ></outline><outline text="Static field referenced via subclass" _note="
Reports accesses to static fields where the call is
qualified by a subclass of the declaring class, rather than by the declaring class itself.

  Java allows such qualification, but such accesses may indicate a subtle confusion of inheritance and overriding.
</p>
 **Example:** </p>
<pre> **
  class Parent {
    static int foo = 0;
  }
  class Child extends Parent { }
  void bar() {
    System.out.println(Child.foo);
  }
** </pre>
After the quick-fix is applied, the result looks like this:</p>
<pre> **
  class Parent {
    static int foo = 0;
  }
  class Child extends Parent { }
  void bar() {
    System.out.println(Parent.foo);
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Static method referenced via subclass" _note="
Reports static method calls where the call is qualified
by a subclass of the declaring class, rather than by the declaring class itself.

  Java allows such qualification for classes, but such calls
  may indicate a subtle confusion of inheritance and overriding.
</p>
 **Example:** </p>
<pre> **
  class Parent {
    public static void print(String str) {}
  }
  class Child extends Parent {}
  Child.print('Hello, world!');
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Parent.print('Hello, world!');
** </pre>
<!-- tooltip end -->

" ></outline><outline text="String comparison using '==', instead of 'equals()'" _note="
Reports code that uses of  **==**  or  **!=**  to compare strings.

  These operators determine referential equality instead of comparing content.
  In most cases, strings should be compared using  **equals()** ,
  which does a character-by-character comparison when the strings are different objects.</p>
 **Example:** </p>
<pre> **
  void foo(String s, String t) {
    final boolean b = t == s;
  }
** </pre>
If  **t**  is known to be non-null, then it's safe to apply the 'unsafe' quick-fix and get the result similar to the following:</p>
<pre> **
  void foo(String s, String t) {
    final boolean b = t.equals(s);
  }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="String concatenation as argument to 'format()' call" _note="
Reports non-constant string concatenations used as a format string argument.

  While occasionally intended, this is usually a misuse of a formatting method
  and may even cause security issues if the variables used in the concatenated string
  contain special characters like  **%** .
</p>

  Also, sometimes this could be the result
  of mistakenly concatenating a string format argument by typing a  **+**  when a  **,**  was meant.
</p>
 **Example:** </p>
<pre> **
  static String formatGreeting(String userName) {
    return String.format('Hello, ' + userName);
  }
** </pre>

  Here, the  **userName**  will be interpreted as a part of format string, which may result
  in  **IllegalFormatException**  (for example, if  **userName**  is  **'%'** ) or
  in using an enormous amount of memory (for example, if  **userName**  is  **'%2000000000%'** ).
  The call should be probably replaced with  **String.format('Hello, %s', userName);** .
</p>

  This inspection checks calls to formatting methods on
   **java.util.Formatter** ,
   **java.lang.String** ,
   **java.io.PrintWriter** ,
  or  **java.io.PrintStream** .
</p>
<!-- tooltip end -->
" ></outline><outline text="String concatenation as argument to 'MessageFormat.format()' call" _note="
Reports non-constant string concatenations used as an argument to a call to
 **MessageFormat.format()** .

  While occasionally intended, this is usually a misuse of the formatting method
  and may even cause unexpected exceptions if the variables used in the concatenated string contain
  special characters like  **{** .
</p>

  Also, sometimes this could be the result
  of mistakenly concatenating a string format argument by typing a  **+**  when a  **,**  was meant.
</p>
 **Example:** </p>
<pre> **
  String formatGreeting(String userName, int balance) {
    return MessageFormat.format('Hello, ' + userName + '! Your balance is {0}.', balance);
  }
** </pre>

  Here, the  **userName**  will be interpreted as a part of the format string, which may result
  in  **IllegalArgumentException**  (for example, if  **userName**  is  **'{'** ).
  This call should be probably replaced with  **MessageFormat.format('Hello, {0}! Your balance is {1}.', userName, balance)** .
</p>
<!-- tooltip end -->

" ></outline><outline text="StringBuilder constructor call with 'char' argument" _note="
Reports calls to  **StringBuffer**  and  **StringBuilder**  constructors with  **char**  as the argument.
In this case,  **char**  is silently cast to an integer and interpreted as the initial capacity of the buffer.
 **Example:** </p>
<pre> **
  new StringBuilder('(').append('1').append(')');
** </pre>
After the quick-fix is applied:</p>
<pre> **
  new StringBuilder('(').append('1').append(')');
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Subtraction in 'compareTo()'" _note="
Reports subtraction in
 **compareTo()**  methods and methods implementing  **java.util.Comparator.compare()** .

  While it is a common idiom to
  use the results of integer subtraction as the result of a  **compareTo()** 
  method, this construct may cause subtle and difficult bugs in cases of integer overflow.
  Comparing the integer values directly and returning  **-1** ,  **0** , or  **1**  is a better practice in most cases.
</p>

  Subtraction on floating point values that is immediately cast to integral type is also reported because precision loss is possible due to
  rounding.
</p>

  The inspection doesn't report when it's statically determined that value ranges are limited, and overflow never occurs.
  Additionally, subtraction on  **int**  numbers greater than or equal to  **0**  will never overflow.
  Therefore, this inspection tries not to warn in those cases.
</p>

  Methods that always return zero or greater can be marked with the
   **javax.annotation.Nonnegative**  annotation or specified in this inspection's options.
</p>
 **Example:** </p>
<pre> **
  class DoubleHolder implements Comparable&lt;DoubleHolder&gt; {
    double d;
    public int compareTo(DoubleHolder that) {
        return (int)(this.d - that.d);
    }
 }
** </pre>
A no-warning example because  **String.length()**  is known to be non-negative:</p>
<pre> **
  class A implements Comparable&lt;A&gt; {
    final String s = '';
    public int compareTo(A a) {
        return s.length() - a.s.length();
    }
 }
** </pre>
<!-- tooltip end -->

  Use the options to list methods that are safe to use inside a subtraction.
  Methods are safe when they return an  **int**  value that is always greater than or equal to  **0** .
</p>

" ></outline><outline text="Suspicious 'Arrays' method calls" _note="
Reports calls to non-generic-array manipulation methods like  **Arrays.fill()**  with mismatched argument types.
Such calls don't do anything useful and are likely to be mistakes.
 **Example:** </p>
<pre> **
  int foo(String[] strings) {
    return Arrays.binarySearch(strings, 1);
  }
** </pre>
<!-- tooltip end -->
<small>New in 2017.2</small></p>
" ></outline><outline text="Suspicious 'Class.getClass()' call" _note="
Reports  **getClass()**  methods that are called on a  **java.lang.Class**  instance.
This is usually a mistake as the result is always equivalent to  **Class.class** .
If it's a mistake, then it's better to remove the  **getClass()**  call and use the qualifier directly.
  If the behavior is intended, then it's better to write  **Class.class**  explicitly to avoid confusion.</p>
Example:</p>
<pre> **
  void test(Class&lt;?&gt; clazz) {
    String name = clazz.getClass().getName();
  }
** </pre>
After one of the possible quick-fixes is applied:</p>
<pre> **
  void test(Class&lt;?&gt; clazz) {
    String name = clazz.getName();
  }
** </pre>
<!-- tooltip end -->
<small>New in 2018.2</small></p>
" ></outline><outline text="Suspicious 'Collection.toArray()' call" _note="
Reports suspicious calls to  **Collection.toArray()** .
The following types of calls are considered suspicious:</p>
<ul>
  <li>
    when the type of the array
    argument is not the same as the array type to which the result is casted.
  </li>
  <li>
    when the type of the array argument does not match the type parameter in the collection declaration.
  </li>
</ul>
 **Example:** </p>
<pre> **
void m1(List list) {
  Number[] ns = (Number[]) list.toArray(new String[0]);
}
void m2(List&lt;Number&gt; list) {
  Number[] ns = list.toArray(new String[0]);
}
** </pre>

" ></outline><outline text="Suspicious 'Comparator.compare()' implementation" _note="
Reports problems in  **Comparator.compare()**  implementations.
The following cases are reported:</p>
<ul>
  <li>
    A parameter is not used. Most likely this is a typo and the other parameter is compared
    with itself, or the method is not implemented correctly.
  </li>
  <li>
    It's evident that the comparator does not return  **0**  for the same elements. Such a comparator violates the contract
    and can produce unpredictable results when equal elements are encountered. In particular,
    sorting may fail with an exception on some data.</li>
</ul>
 **Example:** </p>
<pre> **
  Comparator&lt;String&gt; lambda =
    (a, b) -&gt; a.length() &gt; b.length()
              ? 0
              : Math.random() &gt; 0.5 ? -1 : 1;
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Suspicious 'List.remove()' in loop" _note="
Reports  **list.remove(index)**  calls inside an ascending counted loop.

  This is suspicious as the list becomes
  shorter after the removal, and the next element gets skipped. A simple fix is to decrease the index variable
  after the removal,
  but probably removing via an iterator or using the  **removeIf()**  method (Java 8 and later) is a more robust alternative.
  If you don't expect that  **remove()**  will be called more than once in a loop, consider adding a  **break**  after it.
</p>

 **Example:** </p>
<pre> **  public static void main(String[] args) {
    process(new ArrayList&lt;>(
      Arrays.asList('1', '2', '|', '3', '4')));
  }
  static void process(List&lt;String&gt; list) {
    for (int i = 0; i &lt; list.size(); i++) {
      if (list.get(i).equals('|')) {
        list.remove(i);
        continue;
      }
      System.out.println(list.get(i));
    }
  }
** </pre>
The code looks like  **1 2 3 4**  is going to be printed, but in reality,  **3**  will be skipped in the output.</p>
<!-- tooltip end -->
<small>New in 2018.2</small></p>
" ></outline><outline text="Suspicious 'System.arraycopy()' call" _note="
Reports suspicious calls to  **System.arraycopy()** .
Such calls are suspicious when:</p>
<ul>
<li>the source or destination is not of an array type
<li>the source and destination are of different types
<li>the copied chunk length is greater than  **src.length - srcPos** 
<li>the copied chunk length is greater than  **dest.length - destPos** 
<li>the ranges always intersect when the source and destination are the same array
</ul>
 **Example:** </p>
<pre> **
  void foo() {
    int[] src = new int[] { 1, 2, 3, 4 };
    System.arraycopy(src, 0, src, 1, 2); // warning: Copying to the same array with intersecting ranges
  }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Suspicious array cast" _note="
Reports suspicious array casts.
An array cast is considered suspicious when it casts to a more specific array type. Such a cast is legal at compile
time but may fail with a  **ClassCastException**  at runtime.
 **Example:** </p>
<pre> **
  Number[] numbers = new Number[]{1L, 2L, 4L};
  Long[] longs = (Long[])numbers;
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Suspicious collections method calls" _note="
Reports method calls on parameterized collections, where the actual argument type does not
correspond to the collection's elements type.
 **Example:** </p>
<pre> **
  List&lt;Integer&gt; list = getListOfElements();
  list.remove(''); // remove is highlighted
** </pre>
<!-- tooltip end -->

  In the inspection settings, you can disable warnings for potentially correct code like the following:
</p>
<pre> **
  public boolean accept(Map&lt;Integer, String&gt; map, Object key) {
    return map.containsKey(key);
  }
** </pre>

" ></outline><outline text="Suspicious date format pattern" _note="
Reports date format patterns that are likely used by mistake.
The following patterns are reported:</p>
<ul>
  <li>Uppercase 'Y', unless 'w' appears nearby. It stands for 'Week year' that is almost always
    the same as normal 'Year' (lowercase 'y' pattern), but may point to the next year
    at the end of December.</li>
  <li>Uppercase 'M' (month) close to 'H', 'K', 'h', or 'k' (hour). It's likely that a lowercase 'm' (minute) was intended.</li>
  <li>Lowercase 'm' (minute) close to 'y' (year) or 'd' (day in month). It's likely that an uppercase 'M' (month) was intended.</li>
  <li>Uppercase 'D' (day in year) close to 'M', or 'L' (month). It's likely that a lowercase 'd' (day in month) was intended.</li>
  <li>Uppercase 'S' (milliseconds) close to 'm' (minutes). It's likely that a lowercase 's' (seconds) was intended.</li>
</ul>

  Examples:
   **new SimpleDateFormat('YYYY-MM-dd')** : likely  **'yyyy-MM-dd'**  was intended.
   **new SimpleDateFormat('yyyy-MM-DD')** : likely  **'yyyy-MM-dd'**  was intended.
   **new SimpleDateFormat('HH:MM')** : likely  **'HH:mm'**  was intended.
</p>
<!-- tooltip end -->
<small>New in 2020.1</small></p>
" ></outline><outline text="Suspicious indentation after control statement without braces" _note="
Reports suspicious indentation of statements after a control statement without braces.

  Such indentation can make it look like the statement is inside the control statement,
  when in fact it will be executed unconditionally after the control statement.
</p>
 **Example:** </p>
<pre> **
  class Bar {
      void foo(int i) {
          if (i == 0)
              System.out.println('foo');
              System.out.println('bar'); // warning
          if (i == 1);
              System.out.println('great'); // warning
          if (i == 42)
              System.out.println('answer');
                  System.out.println('question'); // warning
      }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Suspicious integer division assignment" _note="
Reports assignments whose right side is a division that shouldn't be truncated to integer.
While occasionally intended, this construction is often buggy.</p>
 **Example:** </p>
<pre> **
  int x = 18;
  x *= 3/2; // doesn't change x because of the integer division result
** </pre>

This code should be replaced with:
<pre> **
  int x = 18;
  x *= 3.0/2;
** </pre>
<!-- tooltip end -->

  In the inspection options, you can disable warnings for suspicious but possibly correct divisions,
  for example, when the dividend can't be calculated statically.
<pre> **
  void calc(int d) {
     int x = 18;
     x *= d/2;
  }
** </pre>

  <small>New in 2019.2</small>
</p>
" ></outline><outline text="Suspicious InvocationHandler implementation" _note="
Reports implementations of  **InvocationHandler**  that do not proxy standard
 **Object**  methods like  **hashCode()** ,  **equals()** , and  **toString()** .
Failing to handle these methods might cause unexpected problems upon calling them on a proxy instance.</p>
 **Example:** </p>
<pre> **
  InvocationHandler myHandler = (proxy, method, params) -&gt; {
    System.out.println('Hello World!');
     **return**  null;
  };
  Runnable myProxy = (Runnable) Proxy.newProxyInstance(
    Thread.currentThread().getContextClassLoader(),
     **new**  Class[] {Runnable.class}, myHandler
  );
** </pre>

  This code snippet is designed to only proxy the  **Runnable.run()**  method.
  However, calls to any  **Object**  methods, like  **hashCode()** , are proxied as well.
  This can lead to problems like a  **NullPointerException** , for example, when adding  **myProxy**  to a  **HashSet** .
</p>
<!-- tooltip end -->
<small>New in 2020.2</small>
" ></outline><outline text="Suspicious regex expression argument" _note="
Reports calls to
 **String.replaceAll()**  or  **String.split()**  where the first argument is a single regex meta character argument.

  The regex meta characters are one of  **.$|()[{^?*+\** . They have a special meaning in regular expressions.
  For example, calling  **'ab.cd'.replaceAll('.', '-')**  produces  **'-----'** , because the dot matches any character.
  Most likely the escaped variant  **'\\.'**  was intended instead.
</p>

 **Example:** </p>
<pre> **
  s.replaceAll('.', '-');
** </pre>
After the quick-fix is applied:</p>
<pre> **
  s.replaceAll('\\.', '-');
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Suspicious ternary operator in varargs method call" _note="
Reports vararg method calls that use a ternary operator with mixed array and non-array branches.

When compiled, both branches are wrapped in arrays. As a result, the array branch is turned into
a two-dimensional array, which may indicate a problem.
</p>

The quick-fix wraps the non-array branch in an array to prevent the compiler from doing the conversion.
</p>
<!-- tooltip end -->
 **Example:** </p>
<pre> **
    static void bar(boolean flag) {
        Object[] a = {1, 2};
        Object b = 'hello';
        foo(flag ? a : b);
    }
    static void foo(Object... obj) {
    }
** </pre>

After the quick-fix: </p>
<pre> **
    static void bar(boolean flag) {
        Object[] a = {1, 2};
        Object b = 'hello';
        foo(flag ? a : new Object[]{b});
    }
    static void foo(Object... obj) {
    }
** </pre>

<small>New in 2020.3</small></p>
" ></outline><outline text="Suspicious usage of compare method" _note="
Reports comparisons of the result of  **Comparator.compare()**  or  **Comparable.compareTo()**  calls with non-zero constants.
By contract, these methods can return any integer (not just -1, 0 or 1),
  so comparing against particular numbers is bad practice. Some widely used comparison methods (e.g.  **String.compareTo()** )
  actually return values outside the [-1..1] range, and such a comparison may cause incorrect program behavior.
Example:</p>
<pre> **
  void validate(String s1, String s2) {
    // Comparing to 1 is incorrect
    if (s1.compareTo(s2) == 1) {
      throw new IllegalArgumentException('Incorrect order');
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void validate(String s1, String s2) {
    if (s1.compareTo(s2) > 0) {
      throw new IllegalArgumentException('Incorrect order');
    }
  }
** </pre>
<!-- tooltip end -->
<small>New in 2017.2</small></p>
" ></outline><outline text="Suspicious variable/parameter name combination" _note="
Reports assignments and function calls in which the name of the target variable or the function parameter does not match the name of the value assigned to it.
Example 1:</p>
<pre> **
   **int**  x = 0;
   **int**  y = x; // x is used as a y-coordinate
  ** </pre>
Example 2:</p>
<pre> **
   **int**  x = 0, y = 0;
  // x is used as a y-coordinate and y as an x-coordinate
  Rectangle rc =  **new**  Rectangle(y, x, 20, 20);
** </pre>
<!-- tooltip end -->
Configure the inspection:</p>
Use the  **Group of names**  area to specify the names which should not be used together: an error is reported
if the parameter name or assignment target name contains words from one group and the name of the assigned or passed
variable contains words from a different group.
Use the  **Ignore methods**  area to specify the methods that should not be checked but have a potentially suspicious name.
For example, the  **Integer.compare()**  parameters are named  **x**  and  **y**  but are unrelated to coordinates.
" ></outline><outline text="Text label in 'switch' statement" _note="
Reports labeled statements inside of  **switch**  statements.
While occasionally intended, this construction is often the result of a typo.
 **Example:** </p>
<pre> **
  switch (x) {
      case 1:
      case2:   //warning: Text label 'case2:' in 'switch' statement
      case 3:
          break;
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Throwable not thrown" _note="
Reports instantiations of  **Throwable**  or its subclasses, where the created  **Throwable** 
is never actually thrown.
Additionally, this inspection reports method calls that return instances of  **Throwable**  or its subclasses,
when the result of the method call is not thrown.
Calls to methods annotated with the Error Prone's or AssertJ's  **@CanIgnoreReturnValue**  annotation will not be reported.</p>
 **Example:** </p>
<pre> **
    void leftBehind() throws Throwable {
        RuntimeException e = new RuntimeException('throw me');
        // ...
    }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unsafe call to 'Class.newInstance()'" _note="
Reports calls to  **java.lang.Class.newInstance()** .

  This method propagates exceptions thrown by
  the no-arguments constructor, including checked exceptions. Usages of this method
  effectively bypass the compile-time exception checking that would
  otherwise be performed by the compiler.
</p>

  A quick-fix is suggested to replace the call with a call to the
   **java.lang.reflect.Constructor.newInstance()**  method, which
  avoids this problem by wrapping any exception thrown by the constructor in a
  (checked)  **java.lang.reflect.InvocationTargetException** .
</p>
 **Example:** </p>
<pre> **
  clazz.newInstance()
** </pre>
After the quick-fix is applied:</p>
<pre> **
  clazz.getConstructor().newInstance();
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Unused assignment" _note="
Reports assignment values that are not used after the assignment.
If the assignment value is unused, it's better to remove the assignment to shorten the code and avoid redundant allocations.
The following cases are reported:</p>
<ul>
  <li>The variable never gets read after the assignment.</li>
  <li>The variable is always overwritten with a new value before it is read.</li>
  <li>The variable initializer is redundant (for one of the two reasons above).</li>
</ul>
<!-- tooltip end -->
Configure the inspection:</p>

Use the  **Report redundant initializers**  option to report redundant initializers:
</p>
<pre> **
  int getI() {
    int i = 0; // redundant initialization
    i = 2;
    return i;
  }
** </pre>

Use the  **Report ++i when may be replaced with (i + 1)**  option to report the cases when  **++i**  expression
may be replaced with  **i + 1** :
</p>
<pre> **
  int preInc(int i) {
    int res = i;
    return ++res;
  }
** </pre>

Use the  **Report i++ when changed value is not used afterwards**  option to report the cases when the result of  **i++**  expression
is not used later:
</p>
<pre> **
  int postInc(int i) {
    int res = i;
    return res++;
  }
** </pre>

" ></outline><outline text="Use of index 0 in JDBC ResultSet" _note="
Reports attempts to access column 0 of  **java.sql.ResultSet**  or  **java.sql.PreparedStatement** .
For historical reasons, columns of  **java.sql.ResultSet**  and  **java.sql.PreparedStatement** 
are numbered starting with  **1** , rather than with  **0** , and accessing column 0 is a common error in JDBC programming.
 **Example:** </p>
<pre> **
  String getName(ResultSet rs) {
     **return**  rs.getString(0);
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Use of Properties object as a Hashtable" _note="
Reports calls to the following methods on  **java.util.Properties**  objects:
<ul>
  <li> **java.util.Hashtable#put** </li>
  <li> **java.util.Hashtable#putIfAbsent** </li>
  <li> **java.util.Hashtable#putAll** </li>
  <li> **java.util.Hashtable#get** </li>
</ul>

  For historical reasons,  **java.util.Properties**  inherits  **java.util.Hashtable** ,
  but using those methods is discouraged to prevent corruption of properties values of types other than  **String** .
</p>

  Although  **java.util.Properties#putAll**  overrides  **java.util.Hashtable#putAll**  it doesn't get reported when
  both the key and the value parameters in the map are of the  **String**  type.
</p>
 **Example:** </p>
<pre> **
  Object f(Properties props) {
    props.put('hello', 'world');
    props.putIfAbsent('hello', 'world');
    props.putAll(new HashMap&lt;&gt;());
    return props.get('Hello');
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Object f(Properties props) {
    props.setProperty('hello', 'world');
    props.putIfAbsent('hello', 'world');
    props.putAll(new HashMap&lt;&gt;());
    return props.getProperty('hello');
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Use of shallow or 'Objects' methods with arrays" _note="
Reports expressions that seem to use an inappropriate method for determining array equality or calculating their hashcode.
The following method calls are reported:</p>
<ul>
  <li> **Object.equals()**  for any arrays</li>
  <li> **Arrays.equals()**  for multidimensional arrays</li>
  <li> **Arrays.hashCode()**  for multidimensional arrays</li>
</ul>
<!-- tooltip end -->


" ></outline><outline text="Whitespace may be missing in string concatenation" _note="
Reports string concatenations with missing whitespaces, that is where the left-hand side
ends with a Unicode letter or digit and the right-hand side starts with a Unicode letter or digit.
 **Example:** </p>
<pre> **
  String sql = 'SELECT column' +
               'FROM table';
** </pre>
<!-- tooltip end -->

  Use the  **Ignore concatenations with variable strings**  option to only report
  when both the left and right side of the concatenation are literals.
</p>
" ></outline><outline text="Write-only object" _note="
Reports objects that are modified but never queried.
The inspection relies on the method mutation contract, which could be inferred
  or pre-annotated for some library methods. This inspection does not report collections, maps, and string builders, as these types
  are reported by other more precise inspections.
</p>
Example:</p>
<pre> **
  AtomicReference&lt;String&gt; ref = new AtomicReference&lt;&gt;();
  ref.set('hello'); // ref is never used again
** </pre>
<!-- tooltip end -->

  Use the  **Ignore impure constructors**  option to control whether to process objects created by constructor or method whose purity is not known.
  Unchecking the option may introduce some false-positives if the object reference is intentionally leaked during the construction.
</p>
 **<small>New in 2021.2</small>** 
" ></outline><outline text="Wrong package statement" _note="
Detects  **package**  statements that do not correspond to the project directory structure.
Also, reports classes without  **package**  statements if the class is not located directly in
source root directory.
While it's not strictly mandated by Java language, it's good to keep classes 
from package  **com.example.myapp**  inside the  **com/example/myapp**  directory under 
  the source root. Failure to do this may confuse code readers and make some tools working incorrectly.</p>
" ></outline></outline><outline text="Properties files" ><outline text="Invalid property key" _note="
Reports invalid arguments that are passed to methods with parameters annotated as  **@PropertyKey** .
These arguments should be valid property keys in corresponding properties files.
Also, the inspection verifies that the  **resourceBundle** 
  argument of the  **@PropertyKey**  annotation is an existing resource bundle.</p>

  Use the quick-fix to create a new property or to select an existing one.
</p>
Example:</p>
<pre> **
  @PropertyKey(resourceBundle = 'myBundle') String value = 'invalid.key';
** </pre>

" ></outline></outline><outline text="Reflective access" ><outline text="MethodHandle/VarHandle type mismatch" _note="
Reports  **MethodHandle**  and  **VarHandle**  factory method calls that don't match any method or field.
Also reports arguments to  **MethodHandle.invoke()**  and similar methods, that don't match the  **MethodHandle**  signature
  and arguments to  **VarHandle.set()**  that don't match the  **VarHandle**  type.
  <!-- tooltip end -->

Examples:</p>
<pre>
  MethodHandle mh = MethodHandles.lookup().findVirtual(
      MyClass.class, 'foo', MethodType.methodType(void.class, int.class));
  <i>// the argument should be an  **int**  value</i>
  mh.invoke(myObj, ' **abc** ');
</pre>

<pre>
  <i>// the argument should be  **String** .class</i>
  VarHandle vh = MethodHandles.lookup().findVarHandle(
      MyClass.class, 'text',  **int** .class);
</pre>

<pre>
  VarHandle vh = MethodHandles.lookup().findVarHandle(
      MyClass.class, 'text', String.class);
  <i>// the argument should be a  **String**  value</i>
  vh.set(myObj,  **42** );
</pre>

  <small>New in 2017.2</small>
</p>
" ></outline><outline text="Reflective access across modules issues" _note="
Reports  **Class.forName()**  and  **ClassLoader.loadClass()**  calls
which try to access classes that aren't visible in the current scope due to Java 9 module accessibility rules.
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 9 or higher.</p>
" ></outline><outline text="Reflective access to nonexistent/not visible class member" _note="
Reports reflective access to fields and methods that don't exist or aren't visible.
Example:</p>
<pre> **
  Field stringHashField() throws NoSuchFieldException {
    return String.class.getField('hash');
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Field stringHashField() throws NoSuchFieldException {
    return String.class.getDeclaredField('hash');
  }
** </pre>
<!-- tooltip end -->

  With a  **final**  class, it's clear if there is a field or method with the specified name in the class.
</p>

  With non- **final**  classes, it's possible that a subclass has a field or method with that name, so there could be false positives.
  Use the inspection's settings to get rid of such false positives everywhere or with specific classes.
</p>
<small>New in 2017.2</small></p>
" ></outline><outline text="Reflective invocation arguments mismatch" _note="
Reports cases in which the arguments provided to  **Method.invoke()**  and  **Constructor.newInstance()** 
do not match the signature specified in  **Class.getMethod()**  and  **Class.getConstructor()** .
Example:</p>
<pre> **
  Method m = myObj.getClass().getMethod('myMethod',  **int** .class);
  <i>// the argument should be an  **int**  value</i>
  m.invoke(myObj, ' **abc** ');
** </pre>
<!-- tooltip end -->
<small>New in 2017.2</small></p>
" ></outline></outline><outline text="Resource management" ><outline text="'Channel' opened but not safely closed" _note="
Reports  **Channel**  resources that are not safely closed, including any instances created by calling
 **getChannel()**  on a file or socket resource.

  By default, the inspection assumes that the resources can be closed by any method with
  'close' or 'cleanup' in its name.
</p>
 **Example:** </p>
<pre> **
  void send(Socket socket) throws IOException {
    SocketChannel channel = socket.getChannel(); //warning
    channel.write(ByteBuffer.wrap('message'.getBytes()));
  }
** </pre>
<!-- tooltip end -->

  Use the following options to configure the inspection:
</p>
<ul>
  <li>
    Whether a  **Channel**  resource is allowed to be opened inside a  **try** 
    block. This style is less desirable because it is more verbose than opening a  **Channel** 
    in front of a  **try**  block.
  </li>
  <li>
    Whether the resource can be closed by any method call with the resource passed as argument.
  </li>
</ul>
" ></outline><outline text="AutoCloseable used without 'try'-with-resources" _note="
Reports  **AutoCloseable**  instances which are not used in a try-with-resources statement, also known as
<i>Automatic Resource Management</i>.

  This means that the 'open resource before/in  **try** , close in  **finally** ' style that had been used before
  try-with-resources became available, is also reported.
  This inspection is meant to replace all <i>opened but not safely closed</i> inspections when developing in Java 7 and higher.
</p>
 **Example:** </p>
<pre> **
  private static void foo() throws IOException {
    InputStream profile = Thread.currentThread().getContextClassLoader().getResourceAsStream('/someFile');
    System.out.println(profile.read());
  }
** </pre>
<!-- tooltip end -->

  Use the following options to configure the inspection:
</p>
<ul>
  <li>
    List subclasses of  **AutoCloseable**  that do not need to be closed and should be ignored by this inspection.
    <br/>
     **Note** : The inspection will still report streams returned from the  **java.nio.file.Files**  methods  **lines()** ,
     **walk()** ,  **list()**  and  **find()** ,
    even when  **java.util.stream.Stream**  is listed to be ignored.
    These streams contain an associated I/O resource that needs to be closed.
  </li>
  <li>
    List methods returning  **AutoCloseable**  that should be ignored when called.
  </li>
  <li>
    Whether to ignore an  **AutoCloseable**  if it is the result of a method call.
    When this option is enabled, the results of factory methods will also be ignored.
  </li>
  <li>
    Whether the inspection should report if an  **AutoCloseable**  instance is passed as a method call argument.
    If this option is enabled, the inspection assumes the resource is closed in the called method.
    Method calls inside a  **finally**  block with 'close' in the name and an
     **AutoCloseable**  argument will not be ignored.
  </li>
  <li>
    Whether to ignore method references to constructors of resource classes.
  </li>
  <li>
    Whether to ignore methods that return a resource and whose name starts with 'get'.
    This can reduce false positives because most of the getters do not transfer the ownership of the resource,
    and their call sites are not responsible for closing the resource.
  </li>
</ul>
" ></outline><outline text="Hibernate resource opened but not safely closed" _note="
Reports calls to the  **openSession()**  method if the returned  **org.hibernate.Session**  resource is not safely closed.

  By default, the inspection assumes that the resources can be closed by any method with
  'close' or 'cleanup' in its name.
</p>
 **Example:** </p>
<pre> **
  void doHibernateQuery(SessionFactory factory) {
    Session session = factory.openSession(); //warning
    session.createQuery('...');
  }
** </pre>
<!-- tooltip end -->

  Use the following options to configure the inspection:
</p>
<ul>
  <li>
    Whether a  **org.hibernate.Session**  resource is allowed to be opened inside a  **try** 
    block. This style is less desirable because it is more verbose than opening a resource
    in front of a  **try**  block.
  </li>
  <li>
    Whether the resource can be closed by any method call with the resource passed as argument.
  </li>
</ul>
" ></outline><outline text="I/O resource opened but not safely closed" _note="
Reports I/O resources that are not safely closed. I/O resources checked
by this inspection include  **java.io.InputStream** ,
 **java.io.OutputStream** ,  **java.io.Reader** ,
 **java.io.Writer** ,  **java.util.zip.ZipFile** ,  **java.io.Closeable**  and  **java.io.RandomAccessFile** .

  I/O resources wrapped by other I/O resources are not reported, as the wrapped resource will be closed by the wrapping resource.
</p>

  By default, the inspection assumes that the resources can be closed by any method with
  'close' or 'cleanup' in its name.
</p>
 **Example:** </p>
<pre> **
  void save() throws IOException {
    FileWriter writer = new FileWriter('filename.txt'); //warning
    writer.write('sample');
  }
** </pre>
<!-- tooltip end -->

  Use the following options to configure the inspection:
</p>
<ul>
  <li>List I/O resource classes that do not need to be closed and should be ignored by this inspection.</li>
  <li>
    Whether an I/O resource is allowed to be opened inside a  **try** block.
    This style is less desirable because it is more verbose than opening a resource in front of a  **try**  block.
  </li>
  <li>
    Whether the resource can be closed by any method call with the resource passed as argument.
  </li>
</ul>
" ></outline><outline text="JDBC resource opened but not safely closed" _note="
Reports JDBC resources that are not safely closed. JDBC resources reported
by this inspection include  **java.sql.Connection** ,
 **java.sql.Statement** ,  **java.sql.PreparedStatement** ,
 **java.sql.CallableStatement** , and  **java.sql.ResultSet** .

  By default, the inspection assumes that the resources can be closed by any method with
  'close' or 'cleanup' in its name.
</p>
 **Example:** </p>
<pre> **
  ResultSet findAllElements(Connection connection) throws SQLException {
    PreparedStatement statement = connection.prepareStatement('SELECT * FROM TABLE');//statement is not closed
    statement.execute();
    return statement.getResultSet();
  }
** </pre>
<!-- tooltip end -->

  Use the following options to configure the inspection:
</p>
<ul>
  <li>
    Whether a JDBC resource is allowed to be opened inside a  **try** 
    block. This style is less desirable because it is more verbose than opening a resource
    in front of a  **try**  block.
  </li>
  <li>
    Whether the resource can be closed by any method call with the resource passed as argument.
  </li>
</ul>
" ></outline><outline text="JNDI resource opened but not safely closed" _note="
Reports JNDI resources that are not safely closed. JNDI resources reported
by this inspection include  **javax.naming.InitialContext** ,
and  **javax.naming.NamingEnumeration** .

  By default, the inspection assumes that the resources can be closed by any method with
  'close' or 'cleanup' in its name.
</p>
 **Example:** </p>
<pre> **
  Object findObject(Properties properties, String name) throws NamingException {
    Context context = new InitialContext(properties); //context is not closed
    return context.lookup(name);
  }
** </pre>
<!-- tooltip end -->

  Use the following options to configure the inspection:
</p>
<ul>
  <li>
    Whether a JNDI Resource is allowed to be opened inside a  **try**  block.
    This style is less desirable because it is more verbose than opening a resource in front of a  **try**  block.
  </li>
  <li>
    Whether the resource can be closed by any method call with the resource passed as argument.
  </li>
</ul>
" ></outline><outline text="Socket opened but not safely closed" _note="
Reports socket resources that are not safely closed. Socket resources reported
by this inspection include  **java.net.Socket** ,
 **java.net.DatagramSocket** , and  **java.net.ServerSocket** .

  By default, the inspection assumes that the resources can be closed by any method with
  'close' or 'cleanup' in its name.
</p>
 **Example:** </p>
<pre> **
  byte[] getMessage(ServerSocket socket) throws IOException {
    Socket client = socket.accept(); //socket is not closed
    return client.getInputStream().readAllBytes();
  }
** </pre>
<!-- tooltip end -->

  Use the following options to configure the inspection:
</p>
<ul>
  <li>
    Whether a socket is allowed to be opened inside a  **try**  block.
    This style is less desirable because it is more verbose than opening a resource in front of a  **try**  block.
  </li>
  <li>
    Whether the resource can be closed by any method call with the resource passed as argument.
  </li>
</ul>
" ></outline><outline text="Use of DriverManager to get JDBC connection" _note="
Reports any uses of  **java.sql.DriverManager** 
to acquire a JDBC connection. 

   **java.sql.DriverManager** 
  has been superseded by  **javax.sql.Datasource** , which
  allows for connection pooling and other optimizations.
</p>
 **Example:** </p>
<pre> **  Connection conn = DriverManager.getConnection(url, username, password);
** </pre>
<!-- tooltip end -->
" ></outline></outline><outline text="Security" ><outline text="'public static' array field" _note="
Reports  **public**   **static**  array fields.

  Such fields are often used to store arrays of constant values. Still, they represent a security
  hazard, as their contents may be modified, even if the field is declared  **final** .</p>
 **Example:** </p>
<pre> **
  public static String[] allowedPasswords = {'foo', 'bar'};
** </pre>
<!-- tooltip end -->


" ></outline><outline text="'public static' collection field" _note="
Reports modifiable  **public**   **static**  Collection fields.
Even though they are often used to store collections of constant values, these fields nonetheless represent a security
  hazard, as their contents may be modified even if the field is declared as  **final** .</p>
 **Example:** </p>
<pre> **
  public static final List&lt;String&gt; EVENTS = new ArrayList&lt;&gt;();
  ** 
</pre>
<!-- tooltip end -->

  Use the table in the  **Options**  section to specify methods returning unmodifiable collections.
   **public**   **static**  collection fields initialized with these methods will not be reported.
" ></outline><outline text="Access of system properties" _note="
Reports code that accesses system properties using one of the following methods:
<ul>
  <li>
     **System.getProperties()** ,  **System.setProperty()** ,
     **System.setProperties()** ,  **System.clearProperties()** 
  </li>
  <li>
     **Integer.getInteger()** 
  </li>
  <li>
     **Boolean.getBoolean()** 
  </li>
</ul>

While accessing the system properties is not a security risk in itself, it is often found in malicious code.
Code that accesses system properties should be closely examined in any security audit.
" ></outline><outline text="Call to 'Connection.prepare*()' with non-constant string" _note="
Reports calls to  **java.sql.Connection.prepareStatement()** ,  **java.sql.Connection.prepareCall()** , or any of their
variants which take a dynamically-constructed string as the statement to prepare.

  Constructed SQL statements are a common source of
  security breaches. By default, this inspection ignores compile-time constants.
</p>
 **Example:** </p>
<pre> **
  String bar() { return 'bar'; }
  Connection connection = DriverManager.getConnection('', '', '');
  connection.('SELECT * FROM user WHERE name='' + bar() + ''');
** </pre>
<!-- tooltip end -->
Use the inspection settings to consider any  **static**   **final**  fields as constants. Be careful, because strings like the
following will be ignored when the option is enabled:
<pre> **
  static final String SQL = 'SELECT * FROM user WHERE name='' + getUserInput() + ''';
** </pre>
" ></outline><outline text="Call to 'Runtime.exec()' with non-constant string" _note="
Reports calls to  **java.lang.Runtime.exec()**  which take a dynamically-constructed string as the command to execute.

  Constructed execution strings are a common source of security breaches.
  By default, this inspection ignores compile-time constants.
</p>
 **Example:** </p>
<pre> **
  String i = getUserInput();
  Runtime runtime = Runtime.getRuntime();
  runtime.exec('foo' + i); // reports warning
** </pre>
<!-- tooltip end -->

Use the inspection settings to consider any  **static**   **final**  fields as constant.
Be careful, because strings like the following will be ignored when the option is enabled:
<pre> **
  static final String COMMAND = 'ping ' + getDomainFromUserInput() + ''';
** </pre>

" ></outline><outline text="Call to 'Statement.execute()' with non-constant string" _note="
Reports calls to  **java.sql.Statement.execute()**  or any
of its variants which take a dynamically-constructed string as the query to execute.
Constructed SQL statements are a common source of security breaches.
  By default, this inspection ignores compile-time constants.</p>
 **Example:** </p>
<pre> **
  ResultSet execute(Statement statement, String name) throws SQLException {
    return statement.executeQuery('select * from ' + name); // reports warning
  }
** </pre>
<!-- tooltip end -->

Use the inspection options to consider any  **static**   **final**  fields as constant.
Be careful, because strings like the following will be ignored when the option is enabled:
<pre> **
  private static final String SQL = 'SELECT * FROM user WHERE name='' + getUserInput() + ''';
** </pre>

" ></outline><outline text="Call to 'System.loadLibrary()' with non-constant string" _note="
Reports calls to  **java.lang.System.loadLibrary()** ,  **java.lang.System.load()** ,  **java.lang.Runtime.loadLibrary()** 
and  **java.lang.Runtime.load()** 
which take a dynamically-constructed string as the name of the library.

  Constructed library name strings are a common source of security breaches.
  By default, this inspection ignores compile-time constants.</p>
 **Example:** </p>
<pre> **
  void test(int i) {
    System.loadLibrary('foo' + i);
  }
** </pre>
<!-- tooltip end -->

Use the inspection settings to consider any  **static final**  fields as constant.
Be careful, because strings like the following will be ignored when the option is enabled:
</p>
<pre> **
  private static final String LIBRARY = getUserInput();
** </pre>
" ></outline><outline text="Call to 'System.setSecurityManager()'" _note="
Reports calls to  **System.setSecurityManager()** .
While often benign, any call to  **System.setSecurityManager()**  should be closely examined in any security audit.</p>
" ></outline><outline text="ClassLoader instantiation" _note="
Reports instantiations of the  **java.lang.ClassLoader**  class.
While often benign, any instantiations of  **ClassLoader**  should be closely examined in any security audit.</p>
 **Example:** </p>
<pre> **    Class&lt;?&gt; loadExtraClass(String name) throws Exception {
      try(URLClassLoader loader =
          new URLClassLoader(new URL[]{new URL('extraClasses/')})) {
        return loader.loadClass(name);
      }
    }
  ** 
</pre>
<!-- tooltip end -->
" ></outline><outline text="Cloneable class in secure context" _note="
Reports classes which may be cloned.

  A class
  may be cloned if it supports the  **Cloneable**  interface,
  and its  **clone()**  method is not defined to immediately
  throw an error. Cloneable classes may be dangerous in code intended for secure use.
</p>
 **Example:** </p>
 **class SecureBean implements Cloneable {}** 
After the quick-fix is applied:</p> **class SecureBean {}** 

When the class extends an existing cloneable class or implements a cloneable interface,
  then after the quick-fix is applied, the code may look like: 
<pre> **class SecureBean extends ParentBean {
    @Override
    protected SecureBean clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException();
    }
}
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Custom 'ClassLoader' is declared" _note="
Reports user-defined subclasses of  **java.lang.ClassLoader** .

  While not necessarily representing a security hole, such classes should be thoroughly
  inspected for possible security issues.
</p>
<!-- tooltip end -->

" ></outline><outline text="Custom 'SecurityManager'" _note="
Reports user-defined subclasses of  **java.lang.SecurityManager** .

  While not necessarily representing a security hole, such classes should be thoroughly
  and professionally inspected for possible security issues.
</p>
 **Example:** </p>
<pre> **
  class CustomSecurityManager extends SecurityManager {
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Design for extension" _note="
Reports methods which are not  **static** ,  **private** ,  **final**  or  **abstract** , and whose bodies
are not empty.

  Coding in a style that avoids such methods protects the contracts of classes from being broken by their subclasses. The
  benefit of this style is that subclasses cannot corrupt the state of the superclass by forgetting to call the super method. The cost is
  that
  subclasses are limited in their flexibility, in particular they cannot prevent execution of code in the superclass. Use the quick-fix to
  add
  the missing modifiers.</p>
 **Example:** </p>
<pre> **
  class Foo {
    public boolean equals(Object o) { return true; }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo {
    public final boolean equals(Object o) { return true; }
  }
** </pre>
This inspection is intended for code that is going to be used in secure environments, and is probably not appropriate for less restrictive environments.
<!-- tooltip end -->
" ></outline><outline text="Insecure random number generation" _note="
Reports any uses of  **java.lang.Random**  or
 **java.lang.Math.random()** .

  In secure environments,
   **java.secure.SecureRandom**  is a better choice, since is offers cryptographically secure
  random number generation.
</p>
 **Example:** </p>
<pre> **
  long token = new Random().nextLong();
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Non-final 'clone()' in secure context" _note="
Reports  **clone()**  methods without the  **final**  modifier.

  Since  **clone()**  can be used to instantiate objects without using a constructor, allowing the  **clone()** 
  method to be overridden may result in corrupted objects, and even in security exploits. This may be prevented by making the
   **clone()**  method or the enclosing class itself  **final** .
</p>
 **Example:** </p>
<pre> **
  class Main implements Cloneable {
    @Override
    protected Object clone() throws CloneNotSupportedException {
      return super.clone();
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Serializable class in secure context" _note="
Reports classes that may be serialized or deserialized.

  A class may be serialized if it supports the  **Serializable**  interface,
  and its  **readObject()**  and  **writeObject()**  methods are not defined to always
  throw an exception. Serializable classes may be dangerous in code intended for secure use.
</p>
 **Example:** </p>
<pre> **
  class DeserializableClass implements Serializable { // the class doesn't contain 'writeObject()' method throwing an exception
    private int sensitive = 736326;
    private void readObject(ObjectInputStream in) {
        throw new Error();
    }
}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class DeserializableClass implements Serializable {
    private int sensitive = 736326;
    private void readObject(ObjectInputStream in) {
        throw new Error();
    }
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        throw new java.io.NotSerializableException('DeserializableClass');
    }
  }
** </pre>
<!-- tooltip end -->

  Use the following options to configure the inspection:
</p>
<ul>
  <li>
    List classes whose inheritors should not be reported by this inspection.
    This is meant for classes that inherit
     **Serializable**  from a superclass but are not intended for serialization.
    Note that it still may be more secure to add  **readObject()**  and  **writeObject()**  methods
    which always throw an exception, instead of ignoring those classes.
  </li>
  <li>
    Whether to ignore serializable anonymous classes.
  </li>
</ul>
" ></outline></outline><outline text="Serialization issues" ><outline text="'@Serial' annotation used on wrong member" _note="
Reports methods and fields in the  **Serializable**  and  **Externalizable** 
classes that are not suitable to be annotated with the  **java.io.Serial**  annotation.
 **Examples:** </p>
<pre> **
class Test implements Serializable {
  @Serial // The annotated field is not a part of serialization mechanism because it's not final
  private static long serialVersionUID = 7874493593505141603L;
  @Serial // The annotated method is not a part of the serialization mechanism because it's not private
  void writeObject(ObjectOutputStream out) throws IOException {
  }
}
** </pre>
<pre> **
class Test implements Externalizable {
  @Serial // The annotated method is not a part of the serialization mechanism as it's inside Externalizable class
  private void writeObject(ObjectOutputStream out) throws IOException {
  }
}
** </pre>
For information about all valid cases, refer the documentation for  **java.io.Serial** .</p>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 14 or higher.
<small>New in 2020.3</small></p>
" ></outline><outline text="'readObject()' or 'writeObject()' not declared 'private'" _note="
Reports  **Serializable**  classes where the  **readObject** 
or  **writeObject**  methods are not declared private.
There is no reason these methods should ever have a higher visibility than  **private** .

  A quick-fix is suggested to make the corresponding method  **private** .
</p>
 **Example:** </p>
<pre> **
  public class Test implements Serializable {
    public void readObject(ObjectInputStream stream) {
      /* ... */
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  public class Test implements Serializable {
    private void readObject(ObjectInputStream stream) {
      /* ... */
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'readResolve()' or 'writeReplace()' not declared 'protected'" _note="
Reports classes that implement  **java.io.Serializable**  where the  **readResolve()** 
or  **writeReplace()**  methods are not declared  **protected** .

  Declaring  **readResolve()**  and  **writeReplace()**  methods  **private** 
  can force subclasses to silently ignore them, while declaring them
   **public**  allows them to be invoked by untrusted code.
</p>

  If the containing class is declared  **final** , these methods can be declared  **private** .
</p>
 **Example:** </p>
<pre> **
  class ClassWithSerialization implements Serializable {
    public Object writeReplace() { // warning: 'writeReplace()' not declared protected
        ...
    }
  }
  ** 
</pre>
<!-- tooltip end -->

" ></outline><outline text="'record' contains ignored members" _note="
Reports serialization methods or fields defined in a  **record**  class.
Serialization methods include  **writeObject()** ,  **readObject()** ,  **readObjectNoData()** ,  **writeExternal()** , and
   **readExternal()**  and the field  **serialPersistentFields** .
  These members are not used for the serialization or deserialization of records and therefore unnecessary.
 **Examples:** </p>
<pre> **
  record R1() implements Serializable {
    // The field is ignored during record serialization
    @Serial
    private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0];
    // The method is ignored during record serialization
    @Serial
    private void writeObject(ObjectOutputStream out) throws IOException {
    }
  }
** </pre>
<pre> **
  record R2() implements Externalizable {
    // The method is ignored during record serialization
    @Override
    public void writeExternal(ObjectOutput out) throws IOException {
    }
    // The method is ignored during record serialization
    @Override
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
    }
  }
** </pre>
<!-- tooltip end -->
This inspection applies to language level 14 or higher.</p>
<small>New in 2020.3</small></p>
" ></outline><outline text="'Serializable' object implicitly stores non-'Serializable' object" _note="
Reports any references to local non- **Serializable**  variables
outside  **Serializable**  lambdas, local and anonymous classes.

  When a local variable is referenced from an anonymous class, its value
  is stored in an implicit field of that class. The same happens
  for local classes and lambdas. If the variable is of a
  non- **Serializable**  type, serialization will fail.
</p>
 **Example:** </p>
<pre> **
  interface A extends Serializable {
      abstract void foo();
  }
  class B {}
  class C {
      void foo() {
          B b = new B();
          A a = new A() {
              @Override
              public void foo() {
                  System.out.println(b); // warning
              }
          };
      }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="'serialPersistentFields' field not declared 'private static final ObjectStreamField[]'" _note="
Reports  **Serializable**  classes whose  **serialPersistentFields**  field
is not declared as  **private static final ObjectStreamField[]** .

  If a  **serialPersistentFields**  field is not declared with those modifiers,
  the serialization behavior will be as if the field was not declared at all.
</p>
 **Example:** </p>
<pre> **
  class List implements Serializable {
    private List next;
    ObjectStreamField[] serialPersistentFields = {new ObjectStreamField('next', List.class)};
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="'serialVersionUID' field not declared 'private static final long'" _note="
Reports  **Serializable**  classes whose  **serialVersionUID**  field
is not declared  **private static final long** .
 **Example:** </p>
<pre> **
  class SampleClass implements Serializable {
    private long serialVersionUID = 1; // field of a Serializable class is not declared 'private static final long'
    public SampleClass() {
        System.out.println(serialVersionUID);
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="@Serial annotation could be used" _note="
Reports methods and fields in the  **Serializable**  and  **Externalizable** 
classes that are suitable to be annotated with the  **java.io.Serial**  annotation. The quick-fix adds the annotation.
 **Example:** </p>
<pre> **
class Main implements Serializable {
  private static final long serialVersionUID = 7874493593505141603L;
  private void writeObject(ObjectOutputStream out) throws IOException {
  }
}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Main implements Serializable {
    @Serial
    private static final long serialVersionUID = 7874493593505141603L;
    @Serial
    private void writeObject(ObjectOutputStream out) throws IOException {
    }
}
** </pre>
 **Example:** </p>
<pre> **
  class Main implements Externalizable {
    protected Object readResolve() throws ObjectStreamException {
      return 'SomeObject';
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Main implements Externalizable {
    @Serial
    protected Object readResolve() throws ObjectStreamException {
        return 'SomeObject';
    }
  }
** </pre>
<!-- tooltip end -->
For more information about all possible cases, refer the documentation for  **java.io.Serial** .</p>
This inspection applies to the language level of the project or module 14 or higher.</p>
<small>New in 2020.3</small></p>
" ></outline><outline text="Comparator class not declared Serializable" _note="
Reports classes that implement  **java.lang.Comparator** ,
but do not implement  **java.io.Serializable** .

  If a non-serializable comparator is used to construct an ordered collection such
  as a  **java.util.TreeMap**  or  **java.util.TreeSet** , then the
  collection will also be non-serializable. This can result in unexpected and
  difficult-to-diagnose bugs.
</p>

  Since subclasses of  **java.lang.Comparator**  are often stateless,
  simply marking them serializable is a small cost to avoid such issues.
</p>
 **Example:** </p>
<pre> **
  class Foo implements Comparator { // warning
      @Override
      public int compare(Object o1, Object o2) {
          /* ... */
      }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Foo implements Comparator, Serializable { // no warning here
      @Override
      public int compare(Object o1, Object o2) {
          /* ... */
      }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Externalizable class with 'readObject()' or 'writeObject()'" _note="
Reports  **Externalizable**  classes that define  **readObject()** 
or  **writeObject()**  methods. These methods are not called for serialization of
 **Externalizable**  objects.
 **Example:** </p>
<pre> **
  abstract class Crucial implements Externalizable {
    int value;
    private void readObject(ObjectInputStream in) {
      value = in.readInt();
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Externalizable class without 'public' no-arg constructor" _note="
Reports  **Externalizable**  classes without a public no-argument constructor.
When an  **Externalizable**  object is reconstructed, an instance is created using the public
  no-arg constructor before the  **readExternal**  method called. If a public
  no-arg constructor is not available, a  **java.io.InvalidClassException**  will be
  thrown at runtime.
  <!-- tooltip end -->
" ></outline><outline text="Instance field may not be initialized by 'readObject()'" _note="
Reports fields that are not guaranteed to be initialized after the object is
deserialized by the  **readObject()**  method.
The inspection doesn't report transient fields.</p>

  Note: This inspection uses a very conservative control flow algorithm, and may incorrectly report fields
  as uninitialized.
</p>
 **Example:** </p>
<pre> **
class DataObject implements Serializable {
  String s; // s is not initialized in readObject
  int i;
  private void readObject(ObjectInputStream stream) throws IOException {
    i = stream.readInt();
  }
}
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Non-serializable class with 'readObject()' or 'writeObject()'" _note="
Reports non- **Serializable**  classes that define  **readObject()** 
or  **writeObject()**  methods. Such methods in that context normally indicate an error.
 **Example:** </p>
<pre> **
  public class SampleClass {
    private void readObject(ObjectInputStream str) {}
    private void writeObject(ObjectOutputStream str) {}
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Non-serializable class with 'serialVersionUID'" _note="
Reports non- **Serializable**  classes that define a  **serialVersionUID** 
field. A  **serialVersionUID**  field in that context normally indicates an error
because the field will be ignored and the class will not be serialized.
 **Example:** </p>
<pre> **
  public class IWantToSerializeThis {
    private static final long serialVersionUID = 2669293150219020249L;
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Non-serializable field in a Serializable class" _note="
Reports non-serializable fields in classes that implement  **java.io.Serializable** . Such fields will result
in runtime exceptions if the object is serialized.

  Fields declared
   **transient**  or  **static** 
  are not reported, nor are fields of classes that have a  **writeObject**  method defined.
</p>

  This inspection assumes fields of the types
   **java.util.Collection**  and
   **java.util.Map**  to be
   **Serializable** , unless the types
  they are declared in are non- **Serializable** .
</p>
 **Example:** </p>
<pre> **
  class NonSerializableClass {}
  public class SerializableClass implements Serializable {
      NonSerializableClass clazz; // warning: Non-serializable field 'clazz' in a Serializable class
      static NonSerializableClass staticClazz; // no warnings
  }
  ** 
</pre>
<!-- tooltip end -->

  Use the following options to configure the inspection:
</p>
<ul>
  <li>
    List classes whose inheritors should not be reported by this inspection.
    This is meant for classes that inherit
     **Serializable**  from a superclass but are not intended for serialization.
  </li>
  <li>
    List annotations that will make the inspection ignore the annotated fields.
  </li>
  <li>
    Whether to ignore fields initialized with an anonymous class.
  </li>
</ul>

" ></outline><outline text="Non-serializable object bound to HttpSession" _note="
Reports objects of classes not implementing  **java.io.Serializable**  used as arguments to
 **javax.servlet.http.HttpSession.setAttribute()**  or
 **javax.servlet.http.HttpSession.putValue()** .

  Such objects will not be serialized if the  **HttpSession**  is passivated or migrated,
  and may result in difficult-to-diagnose bugs.
</p>

  This inspection assumes objects of the types  **java.util.Collection**  and
   **java.util.Map**  to be  **Serializable** ,
  unless type parameters are non- **Serializable** .
</p>
 **Example:** </p>
<pre> **
  void foo(HttpSession session) {
      session.setAttribute('foo', new NonSerializable());
  }
  static class NonSerializable {}
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Non-serializable object passed to ObjectOutputStream" _note="
Reports non- **Serializable**  objects used as arguments to
 **java.io.ObjectOutputStream.write()** . Such calls will result in runtime exceptions.

  This inspection assumes objects of the types  **java.util.Collection**  and
   **java.util.Map**  to be  **Serializable** , unless the types
  they are declared in are non- **Serializable** .
</p>
 **Example:** </p>
<pre> **
  public class IWantToSerializeThis {
    public static void main(String[] args) throws IOException {
      try(var stream = new ObjectOutputStream(Files.newOutputStream(Paths.get('output')))) {
        // Warning -- will fail with NotSerializableException
        stream.writeObject(new IWantToSerializeThis());
      }
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Serializable class with unconstructable ancestor" _note="
Reports  **Serializable**  classes whose closest non-serializable ancestor doesn't have
a no-argument constructor. Such classes cannot be deserialized and will fail with an  **InvalidClassException** .
 **Example:** </p>
<pre> **
  class Ancestor {
    private String name;
    Ancestor(String name) {
      this.name = name;
    }
  }
  // warning on this class because the superclass is not
  // serializable, and its constructor takes arguments
  class Descendant extends Ancestor implements Serializable {
    Descendant() {
      super('Bob');
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Serializable class without 'readObject()' and 'writeObject()'" _note="
Reports  **Serializable**  classes
that do not implement  **readObject()**  and  **writeObject()**  methods.

  If  **readObject()**  and  **writeObject()**  methods are not implemented,
  the default serialization algorithms are used,
  which may be sub-optimal for performance and compatibility in many environments.
</p>
<!-- tooltip end -->

  Use the following options to configure the inspection:
</p>
<ul>
  <li>
    List classes whose inheritors should not be reported by this inspection.
    This is meant for classes that inherit
     **Serializable**  from a superclass but are not intended for serialization.
  </li>
  <li>
    Whether to ignore  **Serializable**  classes without non-static fields.
  </li>
  <li>
    Whether to ignore  **Serializable**  anonymous classes.
  </li>
</ul>
" ></outline><outline text="Serializable non-'static' inner class with non-Serializable outer class" _note="
Reports non-static inner classes that implement  **Serializable** 
and are declared inside a class that doesn't implement  **Serializable** .

  Such classes are unlikely to serialize correctly due to implicit references to the outer class.
</p>
 **Example:** </p>
<pre> **
  class A {
    class Main implements Serializable {
    }
  }
** </pre>
<!-- tooltip end -->
Use the following options to configure the inspection:</p>
<ul>
  <li>
    List classes whose inheritors should not be reported by this inspection.
    This is meant for classes that inherit
     **Serializable**  from a superclass but are not intended for serialization.
  </li>
  <li>
    Whether to ignore  **Serializable**  anonymous classes.
  </li>
</ul>
" ></outline><outline text="Serializable non-static inner class without 'serialVersionUID'" _note="
Reports non-static inner classes that implement  **java.io.Serializable** , but do not define a  **serialVersionUID**  field.

  Without a  **serialVersionUID**  field, any change to the class will make previously
  serialized versions unreadable. It is strongly recommended that  **Serializable** 
  non-static inner classes have a  **serialVersionUID**  field, otherwise the default
  serialization algorithm may result in serialized versions being incompatible between
  compilers due to differences in synthetic accessor methods.
</p>

  A quick-fix is suggested to add the missing  **serialVersionUID**  field.
</p>
 **Example:** </p>
<pre> **
  class Outer {
      class Inner implements Serializable {}
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Outer {
      class Inner implements Serializable {
          private static final long serialVersionUID = -7004458730436243902L;
      }
  }
** </pre>
<!-- tooltip end -->
Use the following options to configure the inspection:</p>
<ul>
  <li>
    List classes whose inheritors should not be reported by this inspection.
    This is meant for classes that inherit
     **Serializable**  from a superclass but are not intended for serialization.
  </li>
  <li>
    Whether to ignore  **Serializable**  anonymous classes.
  </li>
</ul>
" ></outline><outline text="Transient field in non-serializable class" _note="
Reports  **transient**  fields in classes that do not implement  **java.io.Serializable** .
 **Example:** </p>
<pre> **
  public class NonSerializableClass {
    private transient String password; // warning: Field 'password' is marked 'transient', in non-Serializable class
  }
  ** 
</pre>
After the quick-fix is applied:</p>
<pre> **
  public class NonSerializableClass {
    private String password;
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Transient field is not initialized on deserialization" _note="
Reports  **transient**  fields that
are initialized during normal object construction, but whose class does not have a
 **readObject**  method.

  As  **transient**  fields are not serialized they need
  to be initialized separately in a  **readObject()**  method
  during deserialization.
</p>

  Any  **transient**  fields that
  are not initialized during normal object construction are considered to use the default
  initialization and are not reported by this inspection.
</p>
 **Example:** </p>
<pre> **
  class Person implements Serializable {
    transient String name = 'Default'; //warning, can actually be a null after deserialization
    transient String surname; //null is considered the default value and not reported
  }
** </pre>
<!-- tooltip end -->
" ></outline></outline><outline text="Test frameworks" ><outline text="'assertEquals()' between objects of inconvertible types" _note="
Reports calls to assertion methods where the 'expected' and 'actual' arguments are of incompatible types.
Such calls often indicate that there is a bug in the test.
  This inspection checks the relevant JUnit, TestNG, and AssertJ methods.</p>
 **Examples:** </p>
<pre> **
  assertEquals('1', 1);
  assertNotSame(new int[0], 0);
  // weak warning, may just test the equals() contract
  assertThat(foo).as('user type').isNotEqualTo(bar);
** </pre>
" ></outline><outline text="Assertion is masked via 'catch'" _note="
Reports assert statements and test framework assertions that are masked using catch blocks.
Such assertions will never fail, as  **AssertionError**  will be caught and silently ignored.
 **Example 1:** </p>
<pre> **
void javaAssertion() {
  try {
    ...
    assert 1 == 2; // the assertion is silently ignored
  } catch (AssertionError e) {}
}
** </pre>
 **Example 2:** </p>
<pre> **
@Test
void testWithAssertJ() {
  try {
    ...
    assertThat(1).as('test').isEqualTo(2); // the assertion is silently ignored
  } catch (AssertionError e) {}
}
** </pre>
 **Example 3:** </p>
<pre> **
@Test
void testWithJunit() {
  try {
    ...
    assertEquals(1, 2); // the assertion is silently ignored
  } catch (AssertionError e) {}
}
** </pre>
<!-- tooltip end -->
<small>New in 2020.3</small></p>
" ></outline><outline text="Constant assert argument" _note="
Reports constant arguments in  **assertTrue()** ,  **assertFalse()** ,
 **assertNull()** , and  **assertNotNull()**  calls.

  Calls to these methods with
  constant arguments will either always succeed or always fail.
  Such statements can easily be left over after refactoring and are probably not intended.
</p>
 **Example:** </p>
<pre> **
  assertNotNull('foo');
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Message missing on assertion" _note="
Reports calls to  **assertXXX()**  or  **fail()**  without an error message string argument.
An error message on assertion failure may help clarify the test case's intent.
 **Example:** </p>
<pre> **
  assertTrue(checkValid());
** </pre>
After the quick-fix is applied:</p>
<pre> **assertTrue(checkValid(), '|');** </pre>

  The message argument is added before or after the existing arguments according to the assertions framework that you use.
</p>
<!-- tooltip end -->

" ></outline><outline text="Misordered 'assertEquals()' arguments" _note="
Reports calls to  **assertEquals()**  that have the expected argument and the actual argument in the wrong order.

  For JUnit 3, 4, and 5 the correct order is  **(expected, actual)** .
  For TestNG the correct order is  **(actual, expected)** .
</p>

  Such calls will behave fine for assertions that pass, but may give confusing error reports on failure.
  Use the quick-fix to flip the order of the arguments.
</p>
 **Example (JUnit):** </p>
<pre> **
  assertEquals(actual, expected)
** </pre>
After the quick-fix is applied:</p>
<pre> **
  assertEquals(expected, actual)
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Simplifiable assertion" _note="
Reports any  **assert**  calls that can be replaced with simpler and equivalent calls.
<table>
  <tr><th>Example</th><th>&rarr;</th><th>Replacement</th></tr>
  <tr>
    <td> **assertEquals( **true** , x());** </td>
    <td></td>
    <td> **assertTrue(x());** </td>
  </tr>
  <tr>
    <td> **assertTrue(y() != null);** </td>
    <td></td>
    <td> **assertNotNull(y());** </td>
  </tr>
  <tr>
    <td> **assertTrue(z == z());** </td>
    <td></td>
    <td> **assertSame(z, z());** </td>
  </tr>
  <tr>
    <td> **assertTrue(a.equals(a()));** </td>
    <td></td>
    <td> **assertEquals(a, a());** </td>
  </tr>
  <tr>
    <td> **assertTrue( **false** );** </td>
    <td></td>
    <td> **fail();** </td>
  </tr>
</table>
<!-- tooltip end -->
" ></outline></outline><outline text="TestNG" ><outline text="Data provider problems" _note="
Reports references to data provider methods that do not exist or are not accessible.
<!-- tooltip end -->
Example:</p>
<pre> **
public class InstanceDataProviderFromForeignClass {
  // method data() doesn't exist in class A
  @Test(dataProvider = 'data', dataProviderClass = A.class)
  public void test() {
  }
}
class A { }
** </pre>
After the quick-fix is applied:</p>
<pre> **
//the needed data() method is created in class A
class A {
  @DataProvider
  public Object[][] data() {
    return new Object[][]{};
  }
}
** </pre>
" ></outline><outline text="Duplicated data provider names" _note="
Reports  **TestNG**  data providers with equal names if  **org.testng.TestNGException**  has occurred.
Example:</p>
<pre> **
  public class DuplicatedDataProviders {
    @DataProvider
    public Object[][] intTestData() { // duplicate 1
      return new Integer[][]{
        new Integer[]{1, 1},
      };
    }
    @DataProvider(name = 'intTestData')
    public Object[][] someTestData() { // duplicate 2
      return new Integer[][]{
        new Integer[]{1, 1},
      };
    }
    @Test(dataProvider = 'intTestData')
    public void testIsOK(Integer key, Integer value) {
      assertEquals(key, value);
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Expected exception never thrown in test method body" _note="
Reports checked exceptions expected by a TestNG test method that are never thrown inside the method body.
 **Example:** </p>
<pre> **
  @Test(expectedExceptions = Exception.class) // warning: Expected 'Exception' never thrown
  public void testEngineIsRunning() {
    assertTrue(engine.isRunning());
  }
  ** 
</pre>
<!-- tooltip end -->
" ></outline><outline text="Illegal method name passed to 'dependsOnMethods'" _note="
Reports illegal method names passed to the  **dependsOnMethods**  attribute in the  **@Test**  annotation.
A method name is considered illegal if it can't be resolved into a valid, accessible  **@Test**  annotated method in the current class
  or any of its parent classes.</p>
Example:</p>
<pre> **
  public class SampleTest {
    @Test(dependsOnMethods = 'testSpellignError')
    public void testSample() {}
    @Test
    public void testSpellingError(){}
  }
** </pre>
" ></outline><outline text="Invalid data provider return type" _note="
Reports methods marked with  **@DataProvider**  annotation that doesn't return  **Object[][]**  or  **Iterator&lt;Object&gt;** .
If another type is returned, TestNG throws an exception.
Example:</p>
<pre> **
public class TestNgTest {
  @DataProvider(name = 'Languages')
  List&ltString&gt getData() {
    return List.of('Java', 'Kotlin');
  }
  @Test(dataProvider = 'Languages')
  public void testData(String language) {
    System.out.println(language);
  }
}
** </pre>
" ></outline><outline text="JUnit Test can be converted to TestNG" _note="
Reports any JUnit-based test class that can be converted into TestNG based unit test.
Example:</p>
<pre> **
import org.junit.Test;
import static org.junit.Assert.*;
public class ExampleTest {
  @Test
  public void testExample(){
    assertEquals(2 + 2, 4);
  }
}
** </pre>
After the quick-fix is applied:</p>
<pre> **
import org.testng.Assert;
import org.testng.annotations.Test;
public class ExampleTest {
  @Test
  public void testExample(){
    Assert.assertEquals(4, 2 + 2);
  }
}
** </pre>
" ></outline><outline text="Old TestNG annotation @Configuration is used" _note="
Reports TestNG  **org.testng.annotations.Configuration**  annotations.
It's better to configure a test suite with the modern  **@BeforeXXX** / **@AfterXXX**  annotations.</p>
Example:</p>
<pre> **
  public class Test {
    @Configuration(beforeSuite = true, afterTest = true)
    public void afterBefore(){
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  public class Test {
    @AfterTest()
    @BeforeSuite()
    public void afterBefore(){
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="TestNG Javadoc can be converted to annotations" _note="
Asserts your TestNG tests with Javadoc annotations and converts them to JDK annotations.
Example:</p>
<pre> **
  /**
    * @testng.before-test
  */
  public void sample() {}
** </pre>
After the quick-fix is applied:</p>
<pre> **
  @BeforeTest
  public void sample() {}
** </pre>
    <!-- tooltip end -->

" ></outline><outline text="Undeclared test" _note="
Reports test classes that are not registered in  **testing.xml** . This is often a mistake because such tests won't be executed.
" ></outline><outline text="Undefined group name" _note="
Reports undefined group names passed to the  **dependsOnGroups**  or  **groups**  attributes in the  **@Test**  annotation.
The quick-fix adds an undefined name to a list of known groups.</p>
<!-- tooltip end -->
Use the  **Defined Groups**  field to define a comma-separated list of known groups.</p>
" ></outline></outline><outline text="Threading issues" ><outline text="'await()' not called in loop" _note="
Reports  **java.util.concurrent.locks.Condition.await()**  not being called inside a loop.

   **await()**  and related methods are normally used to suspend a thread until some condition becomes true.
  As the thread could have been woken up for a different reason,
  the condition should be checked after the  **await()**  call returns.
  A loop is a simple way to achieve this.
</p>
 **Example:** </p>
<pre> **
  void acquire(Condition released) throws InterruptedException {
    released.await();
  }
** </pre>
Good code should look like this:</p>
<pre> **
  void acquire(Condition released) throws InterruptedException {
    while (acquired) {
      released.await();
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'await()' without corresponding 'signal()'" _note="
Reports calls to  **Condition.await()** ,
for which no call to a corresponding  **Condition.signal()**  or  **Condition.signalAll()**  can be found.

  Calling  **Condition.await()**  in a thread without corresponding  **Condition.signal()**  may cause the thread
  to become disabled until it is interrupted or 'spurious wakeup' occurs.
</p>
Only calls that target fields of the current class are reported by this inspection.</p>
 **Example:** </p>
<pre> **
  class Queue {
    private final Condition isEmpty = ...;
    void add(Object elem) {
      // ...
      // isEmpty.signal();
      // ...
    }
    void remove(Object elem) throws InterruptedException {
      // ...
      isEmpty.await(); // 'await()' doesn't contain corresponding 'signal()'/'signalAll()' call
      // ...
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="'notify()' or 'notifyAll()' called on 'java.util.concurrent.locks.Condition' object" _note="
Reports calls to  **notify()**  or  **notifyAll()**  made on
 **java.util.concurrent.locks.Condition**  object.

  This is probably a programming error, and some variant of the  **signal()**  or
   **signalAll()**  method was intended instead, otherwise  **IllegalMonitorStateException**  may occur.
</p>
 **Example:** </p>
<pre> **
  class C {
    final Lock l = new ReentrantLock();
    final Condition c = l.newCondition();
    void release() {
      l.lock();
      try {
        c.notifyAll(); // probably 'signalAll()' was intended here
      } finally {
        l.unlock();
      }
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="'notify()' or 'notifyAll()' without corresponding state change" _note="
Reports  **Object.notify()**  or  **Object.notifyAll()**  being called without any detectable state change occurring.

  Normally,  **Object.notify()**  and  **Object.notifyAll()**  are used to inform other threads that a state change has
  occurred. That state change should occur in a synchronized context that contains the  **Object.notify()**  or
   **Object.notifyAll()**  call, and prior to the call. While not having such a state change isn't necessarily incorrect, it is
  certainly worth examining.
</p>
 **Example:** </p>
<pre> **
  synchronized (this) {
    notify();
  }
  // no state change
  synchronized (this) {
    notify(); // this notify might be redundant
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="'notify()' without corresponding 'wait()'" _note="
Reports calls to  **Object.notify()**  or  **Object.notifyAll()**  for which no call to a corresponding
 **Object.wait()**  can be found.
Only calls that target fields of the current class are reported by this inspection.</p>
 **Example:** </p>
<pre> **
  synchronized (synList) {
    synList.notify(); //synList.wait() is never called
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'signal()' without corresponding 'await()'" _note="
Reports calls to  **Condition.signal()**  or  **Condition.signalAll()** 
for which no call to a corresponding  **Condition.await()**  can be found.
Only calls that target fields of the current class are reported by this inspection.</p>
 **Example:** </p>
<pre> **
  class Queue {
    private final Condition isEmpty = ...;
    void add(Object elem) {
      // ...
      isEmpty.signal(); // warning: Call to 'signal()' without corresponding 'await()'
      // ...
    }
    void remove(Object elem) throws InterruptedException {
      // ...
      //      isEmpty.await();
      // ...
    }
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="'synchronized' method" _note="
Reports the  **synchronized**  modifier on methods.

  There are several reasons a  **synchronized**  modifier on a method may be a bad idea:
</p>
<ol>
  <li>
    As little work as possible should be performed under a lock. Therefore it is often better to use a  **synchronized**  block and
    keep there only the code that works with shared state.
  </li>
  <li>
    Synchronization becomes a part of a method's interface. This makes a transition to a different locking mechanism difficult.
  </li>
  <li>
    Keeping track of what is locking a particular object gets harder.
  </li>
  <li>
    The DoS (denial-of-service) attack becomes feasible either on purpose or unknowingly when inheriting the method's class.
  </li>
</ol>

  As an alternative, consider synchronizing on a  **private final**  lock object, access to which can be completely controlled.
</p>
A quick-fix is provided to wrap the method body with  **synchronized(this)** .</p>
 **Example:** </p>
<pre> **
  class Main {
    public synchronized void fooBar() {
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Main {
    public void fooBar() {
      synchronized (this) {
      }
    }
  }
** </pre>
<!-- tooltip end -->
You can configure the following options for this inspection:</p>
<ol>
  <li><strong>Include native methods</strong> - include native methods into the inspection's scope.</li>
  <li><strong>Ignore methods overriding a synchronized method</strong> -
    do not report methods that override a  **synchronized**  method.</li>
</ol>

" ></outline><outline text="'ThreadLocalRandom' instance might be shared" _note="
Reports  **java.util.concurrent.ThreadLocalRandom**  instances which might be shared between threads.

  A  **ThreadLocalRandom**  should not be shared between threads because that is not thread-safe.
  The inspection reports instances that are assigned to a field used as a method argument,
  or assigned to a local variable and used in anonymous or nested classes as they might get shared between threads.
</p>

  Usages of  **ThreadLocalRandom**  should typically look like  **ThreadLocalRandom.current().nextInt(...)** 
  (or  **nextDouble(...)**  etc.).
  When all usages are in this form,  **ThreadLocalRandom**  instances cannot be used accidentally by multiple threads.
</p>
 **Example:** </p>
<pre> **
    class Main {
      void printRandomNumbersAsync() {
        ThreadLocalRandom random = ThreadLocalRandom.current();
        CompletableFuture.supplyAsync(() -&gt; generateNumbers(random))
          .thenAccept(numbers -&gt; System.out.println(Arrays.toString(numbers)));
      }
      private int[] generateNumbers(Random random) {
        return random.ints(1000, 0, 100).toArray();
      }
    }
  ** </pre>
<!-- tooltip end -->

  Use the options to list methods that are safe to be passed to  **ThreadLocalRandom**  instances as an argument.
  It's possible to use regular expressions for method names.
</p>
" ></outline><outline text="'wait()' called on 'java.util.concurrent.locks.Condition' object" _note="
Reports calls to  **wait()**  made on a  **java.util.concurrent.locks.Condition** 
object. This is probably a programming error, and some variant of the  **await()**  method was intended instead.
 **Example:** </p>
<pre> **
  void acquire(Condition released) throws InterruptedException {
    while (acquired) {
      released.wait();
    }
  }
** </pre>
Good code would look like this:</p>
<pre> **
  void acquire(Condition released) throws InterruptedException {
    while (acquired) {
      released.await();
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'wait()' not called in loop" _note="
Reports calls to  **wait()**  that are not made inside a loop.

   **wait()**  is normally used to suspend a thread until some condition becomes true.
  As the thread could have been waken up for a different reason,
  the condition should be checked after the  **wait()**  call returns.
  A loop is a simple way to achieve this.
</p>
 **Example:** </p>
<pre> **
  class BoundedCounter {
    private int count;
    synchronized void inc() throws InterruptedException {
      if (count >= 10) wait();
      ++count;
    }
  }
** </pre>
Good code should look like this:</p>
<pre> **
  class BoundedCounter {
    private int count;
    synchronized void inc() throws InterruptedException {
      while (count >= 10) wait();
      ++count;
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'wait()' or 'await()' without timeout" _note="
Reports calls to  **Object.wait()**  or  **Condition.await()**  without specifying a timeout.

  Such calls may be dangerous in high-availability programs, as failures in one
  component may result in blockages of the waiting component
  if  **notify()** / **notifyAll()** 
  or  **signal()** / **signalAll()**  never get called.
</p>
 **Example:** </p>
<pre> **
  void foo(Object bar) throws InterruptedException {
    bar.wait();
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'wait()' or 'notify()' is not in synchronized context" _note="
Reports calls to  **wait()** ,  **notify()** , and  **notifyAll()** 
that are not made inside a corresponding synchronized statement or synchronized method.

  Calling these methods on an object
  without holding a lock on that object causes  **IllegalMonitorStateException** .
  Such a construct is not necessarily an error, as the necessary lock may be acquired before
  the containing method is called, but it's worth looking at.
</p>
 **Example:** </p>
<pre> **
  class Sync {
    private final Object lock = new Object();
    void test() throws InterruptedException {
      synchronized (this) {
        lock.wait(); // 'lock.wait()' is not synchronized on 'lock'
      }
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'wait()' while holding two locks" _note="
Reports calls to  **wait()**  methods that may occur while the current thread is holding two locks.

  Since calling  **wait()**  only releases one lock on its target,
  waiting with two locks held can easily lead to a deadlock.
</p>
 **Example:** </p>
<pre> **
  synchronized (lockA) {
    synchronized (lockB) {
      lockB.wait(); //warning
      //thread A is stuck here holding lockA
    }
  }
  synchronized (lockA) { //thread B can't enter the block and release thread A
    lockB.notify();
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'wait()' without corresponding 'notify()'" _note="
Reports calls to  **Object.wait()** , for which no call to the corresponding  **Object.notify()**  or
 **Object.notifyAll()**  can be found.
This inspection only reports calls with qualifiers referencing fields of the current class.</p>
 **Example:** </p>
<pre> **
  public class Foo {
    public Object foo = new Object();
    void bar() throws InterruptedException {
      this.foo.wait();
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="'while' loop spins on field" _note="
Reports  **while**  loops that spin on the
value of a non- **volatile**  field, waiting for it to be changed by another thread.

In addition to being potentially extremely CPU intensive when little work is done inside the loop, such
loops are likely to have different semantics from what was intended. The Java Memory Model allows such loop to never complete even
if another thread changes the field's value.
</p>
 **Example:** </p>
<pre> **
  class SpinsOnField {
    boolean ready = false;
    void run() {
      while (!ready) { // the loop may never complete even after markAsReady call
                       // from the other thread
      }
      // do some work
    }
    void markAsReady() {
      ready = true;
    }
  }
** </pre>

Additionally, since Java 9 it's recommended to call  **Thread.onSpinWait()**  inside a spin loop
on a  **volatile**  field, which may significantly improve performance on some hardware.
</p>
<!-- tooltip end -->

Use the inspection options to only report empty  **while**  loops.

" ></outline><outline text="Access to static field locked on instance data" _note="
Reports access to non-constant static fields that are
locked on either  **this**  or an instance field of  **this** .

  Locking a static field on instance data does not prevent the field from being
  modified by other instances, and thus may result in unexpected race conditions.
</p>
 **Example:** </p>
<pre> **
  static String test;
  public void foo() {
      synchronized (this) {
          System.out.println(test); // warning
      }
  }
** </pre>

  There is a quick-fix that allows ignoring static fields of specific types.
  You can manage those ignored types in the inspection options.
</p>
<!-- tooltip end -->

  Use the inspection options to specify which classes used for static fields should be ignored.

" ></outline><outline text="AtomicFieldUpdater field not declared 'static final'" _note="
Reports fields of types:
<ul>
  <li> **java.util.concurrent.atomic.AtomicLongFieldUpdater** </li>
  <li> **java.util.concurrent.atomic.AtomicIntegerFieldUpdater** </li>
  <li> **java.util.concurrent.atomic.AtomicReferenceFieldUpdater** </li>
</ul>
that are not  **static final** .
Because only one atomic field updater is needed for updating a  **volatile**  field in all instances
of a class, it can almost always be  **static** .

Making the updater  **final**  allows the JVM to optimize access for improved performance.</p>

 **Example:** </p>
<pre> **
  class Main {
    private volatile int id;
    private AtomicIntegerFieldUpdater&lt;Main&gt; idFieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Main.class, 'id');
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Main {
    private volatile int id;
    private static final AtomicIntegerFieldUpdater&lt;Main&gt; idFieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Main.class, 'id');
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Busy wait" _note="
Reports calls to  **java.lang.Thread.sleep()**  that occur inside loops.
Such calls
  are indicative of 'busy-waiting'. Busy-waiting is often inefficient, and may result in unexpected deadlocks
  as busy-waiting threads do not release locked resources.</p>
 **Example:** </p>
<pre> **
  class X {
     volatile int x;
     public void waitX() throws Exception {
      while (x &gt; 0) {
        Thread.sleep(10);//warning: Call to 'Thread.sleep()' in a loop, probably busy-waiting
      }
    }
  }
** </pre>
<!-- tooltip end -->


" ></outline><outline text="Call to 'notify()' instead of 'notifyAll()'" _note="
Reports calls to  **Object.notify()** . While occasionally useful, in almost all cases
 **Object.notifyAll()**  is a better choice because calling  **Object.notify()**  may lead to deadlocks.
See Doug Lea's <i>Concurrent Programming in Java</i> for a discussion.
" ></outline><outline text="Call to 'signal()' instead of 'signalAll()'" _note="
Reports calls to  **java.util.concurrent.locks.Condition.signal()** . While occasionally useful, in almost all cases
 **signalAll()**  is a better and safer choice.
<!-- tooltip end -->
" ></outline><outline text="Call to 'System.runFinalizersOnExit()'" _note="
Reports calls to  **System.runFinalizersOnExit()** .

  This call is one of the most dangerous in the Java language. It is inherently non-thread-safe,
  may result in data corruption, a deadlock, and may affect parts of the program far removed from its call point.
  It is deprecated and was removed in JDK 11, and its use is strongly discouraged.
</p>
This inspection only reports if the language level of the project or module is less than 11.</p>
<!-- tooltip end -->
" ></outline><outline text="Call to 'Thread.setPriority()'" _note="
Reports calls to  **Thread.setPriority()** .
Modifying priorities of threads is an inherently non-portable operation, as no guarantees
are given in the Java specification of how priorities are used in scheduling threads, or even
whether they are used at all.
<!-- tooltip end -->
" ></outline><outline text="Call to 'Thread.sleep()' while synchronized" _note="
Reports calls to  **java.lang.Thread.sleep()**  methods that occur
within a  **synchronized**  block or method.

   **sleep()**  within a
   **synchronized**  block may result in decreased performance, poor scalability, and possibly
  even deadlocking. Consider using  **wait()**  instead,
  as it will release the lock held.
</p>
 **Example:** </p>
<pre> **
  synchronized (lock) {
    Thread.sleep(100);
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Call to 'Thread.start()' during object construction" _note="
Reports calls to  **start()**  on  **java.lang.Thread** 
or any of its subclasses during object construction.

  While occasionally useful, such constructs should be avoided due to inheritance issues.
  Subclasses of a class that launches a thread during the object construction will not have finished
  any initialization logic of their own before the thread has launched.
</p>
This inspection does not report if the class that starts a thread is declared  **final** .</p>
 **Example:** </p>
<pre> **
  class MyThread extends Thread {
    MyThread() {
      start();
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Call to 'Thread.stop()', 'suspend()' or 'resume()'" _note="
Reports calls to  **Thread.stop()** ,
 **Thread.suspend()** , and  **Thread.resume()** .

  These calls are inherently prone to data corruption and deadlocks, and their use is strongly discouraged.
  It is better to use cooperative cancellation instead of  **stop** , and
  interruption instead of direct calls to  **suspend**  and  **resume** .
</p>
<!-- tooltip end -->
" ></outline><outline text="Call to 'Thread.yield()'" _note="
Reports calls to  **Thread.yield()** .

  The behavior of  **yield()**  is non-deterministic and platform-dependent, and it is rarely appropriate to use this method.
  Its use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect.
</p>
 **Example:** </p>
<pre> **
  public static void main(String[] args) {
    Runnable r = () -> {
      for (int i = 0; i &lt; 10; i++) {
        System.out.println(i);
        Thread.yield();
      }
    };
    new Thread(r).start();
    new Thread(r).start();
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Call to a native method while locked" _note="
Reports calls  **native**  methods within a  **synchronized**  block or method.

  When possible, it's better to keep calls to  **native**  methods out of the synchronized context
  because such calls cause an expensive context switch and may lead to performance issues.
</p>
 **Example:** </p>
<pre> **
  native void nativeMethod();
  void example(){
    synchronized (lock){
      nativeMethod();//warning
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Class directly extends 'java.lang.Thread'" _note="
Reports classes that directly extend  **java.lang.Thread** .
It is usually recommended to prefer composition over inheritance to create more reusable code that is easier to modify later.
 **Example:** </p>
<pre> **
  class MainThread extends Thread {
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Double-checked locking" _note="
Reports <a href='https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html'>double-checked locking</a>.

  Double-checked locking tries to initialize a field on demand and in a thread-safe manner while avoiding the cost of synchronization.
  Unfortunately it is not thread-safe when used on a field that is not declared  **volatile** .
  When using Java 1.4 or earlier, double-checked locking doesn't work even with  **volatile**  fields.
  Read the article linked above for the detailed explanation of the problem.
</p>

  Example of an incorrect double-checked locking:
</p>
<pre> **
  class Foo {
    private Helper helper = null;
    public Helper getHelper() {
      if (helper == null)
        synchronized(this) {
          if (helper == null) helper = new Helper();
        }
        return helper;
      }
    }
    // other functions and members...
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Empty 'synchronized' statement" _note="
Reports  **synchronized**  statements with empty bodies.

  Empty  **synchronized**  statements are sometimes used to wait for other threads to
  release a particular resource. However, there is no guarantee that the same resource
  won't be acquired again right after the empty  **synchronized**  statement finishes.
  For proper synchronization, the resource should be utilized inside the  **synchronized**  block.
</p>

  Also, an empty  **synchronized**  block may appear after a refactoring
  when redundant code was removed. In this case, the  **synchronized**  block
  itself will be redundant and should be removed as well.
</p>
Example:</p>
<pre> **
  synchronized(lock) {}
** </pre>

  A quick-fix is suggested to remove the empty synchronized statement.
</p>
<!-- tooltip end -->

  This inspection is disabled in JSP files.


" ></outline><outline text="Field accessed in both synchronized and unsynchronized contexts" _note="
Reports non-final fields that are accessed in both  **synchronized**  and
non- **synchronized**  contexts.
 **volatile**  fields as well as accesses in constructors and initializers are ignored by this inspection.

  Such 'partially synchronized' access is often the result of a coding oversight
  and may lead to unexpectedly inconsistent data structures.
</p>
 **Example:** </p>
<pre> **
  public class Program {
    Console console; // warning: Field 'console' is accessed in both synchronized and unsynchronized contexts
    public synchronized void execute() {
      console.print('running');
    }
    public void check() {
      console.check();
    }
  }
** 
</pre>
<!-- tooltip end -->

  Use the option to specify if simple getters and setters are counted as accesses too.


" ></outline><outline text="Inconsistent AtomicFieldUpdater declaration" _note="
Reports issues with  **AtomicLongFieldUpdater** ,
 **AtomicIntegerFieldUpdater** , or  **AtomicReferenceFieldUpdater**  fields (the  **java.util.concurrent.atomic**  package).
The reported issues are identical to the runtime problems that can happen with atomic field updaters:
  specified field not found, specified field not accessible, specified field has a wrong type, and so on.</p>
 **Examples:** </p>
<ul>
  <li><pre> **
  class A {
    private static volatile int value = 0;
    private static final AtomicIntegerFieldUpdater updater =
    AtomicIntegerFieldUpdater.newUpdater((A.class), 'value'); // warning: Field 'value' has 'static' modifier
  }
  ** </pre></li>
  <li><pre> **
  class B {
    private static final AtomicIntegerFieldUpdater updater =
      AtomicIntegerFieldUpdater.newUpdater(B.class, 'value'); // warning: No field named 'value' found in class 'B'
  }
  ** </pre></li>
</ul>
<!-- tooltip end -->

" ></outline><outline text="Instantiating a Thread with default 'run()' method" _note="
Reports code that instantiates  **Thread**  without specifying
a  **Runnable**  parameter or overriding the  **run()**  method.

  Such threads do nothing useful.
</p>
<!-- tooltip end -->
" ></outline><outline text="Lock acquired but not safely unlocked" _note="
Reports  **java.util.concurrent.locks.Lock**  resources that are not acquired in front of a
 **try**  block or not unlocked in the corresponding  **finally**  block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed.
 **Example:** </p>
<pre> **
  lock.lock(); // will be reported since the 'finally' block is missing
  try {
    doSmthWithLock();
  } catch (IOException e) {
    throw new UncheckedIOException(e);
  }
  lock.unlock();
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Method with single synchronized block can be replaced with synchronized method" _note="
Reports methods whose body contains a single  **synchronized**  statement.
A lock expression for this  **synchronized**  statement must be equal to
 **this**  for instance methods or  **[ClassName].class**  for static methods.

  To improve readability of such methods,
  you can remove the  **synchronized**  wrapper and mark the method as  **synchronized** .
</p>
 **Example:** </p>
<pre> **
  public int generateInt(int x) {
    synchronized (this) {
      return 1;
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  public synchronized int generateInt(int x) {
    return 1;
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Nested 'synchronized' statement" _note="
Reports nested  **synchronized**  statements.
It is recommended to avoid nested synchronization if possible, because in some cases it may lead to a deadlock.
 **Example:** </p>
<pre> **
  synchronized (lockA){
    //thread 1 is waiting for lockB
    synchronized (lockB){ //warning
    }
  }
  ...
  synchronized (lockB) {
    //thread 2 is waiting for lockA
    synchronized (lockA) { //warning
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Non-atomic operation on volatile field" _note="
Reports non-atomic operations on volatile fields.

  An example of a non-atomic operation is updating the field using the increment operator.
  As the operation involves read and write, and other modifications may happen in between, data may become corrupted.
  The operation can be made atomic by surrounding it with a  **synchronized**  block or
  using one of the classes from the  **java.util.concurrent.atomic**  package.
</p>
 **Example:** </p>
<pre> **
  private volatile int v = 1;
  void foo() {
    v = 2 * v;
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Non-private field accessed in synchronized context" _note="
Reports non- **final** , non- **private**  fields that are accessed in a synchronized context.

  A non- **private**  field cannot be guaranteed to always be accessed in a synchronized manner, and such 'partially synchronized'
  access may result in unexpectedly inconsistent data structures.
</p>
 **Example:** </p>
<pre> **
  class Bar {
    public String field1;
  }
  public Bar myBar;
  synchronized public void sample() {
   myBar.field1 = 'bar';
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Non-thread-safe static field access" _note="
Reports access to  **static**  fields that are of a non-thread-safe type.

  When a  **static**  field is accessed from an instance method or a non-synchronized block,
  multiple threads can access that field.
  This can lead to unspecified side effects, like exceptions and incorrect results.
</p>
 **Example:** </p>
<pre> **
  class Sample {
    private static final SimpleDateFormat df = new SimpleDateFormat('yyyy-MM-dd');
    String method() {
      return df.format('');
    }
  }
** </pre>
<!-- tooltip end -->

  You can specify which types should be considered not thread-safe.
  Only fields with these exact types or initialized with these exact types are reported,
  because there may exist thread-safe subclasses of these types.
</p>

" ></outline><outline text="Static initializer references subclass" _note="
Reports classes that refer to their subclasses in static initializers or static fields.
Such references can cause JVM-level deadlocks in multithreaded environment, when one thread tries to load the superclass
  and another thread tries to load the subclass at the same time.</p>
 **Example:** </p>
<pre> **
  class Parent {
    static final Child field = new Child();
  }
  class Child extends Parent { }
** </pre>
" ></outline><outline text="Synchronization on 'getClass()'" _note="
Reports synchronization on a call to  **getClass()** .

  If the class containing the synchronization is subclassed, the subclass
  will
  synchronize on a different class object. Usually the call to  **getClass()**  can be replaced with a class literal expression, for
  example  **String.class** . An even better solution is synchronizing on a  **private static final**  lock object, access to
  which can be completely controlled.
</p>
 **Example:** </p>
<pre> ** synchronized(getClass()) {}
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Synchronization on 'static' field" _note="
Reports synchronization on  **static**  fields. While not strictly incorrect,
synchronization on  **static**  fields can lead to bad performance because of contention.

" ></outline><outline text="Synchronization on 'this'" _note="
Reports synchronization on  **this**  or  **class**  expressions.
The reported constructs include  **synchronized**  blocks and calls to  **wait()** ,
 **notify()**  or  **notifyAll()** .
There are several reasons synchronization on  **this**  or  **class**  expressions may be a bad idea:</p>
<ol>
  <li>
    it makes synchronization a part of the external interface of the class,
    which makes a future change to a different locking mechanism difficult,
  </li>
  <li>
    it becomes hard to track just who is locking on a given object,
  </li>
  <li>
    it makes a denial-of-service attack possible, either on purpose or it can happen easily by accident when subclassing.
  </li>
</ol>
As an alternative, consider synchronizing on a  **private final**  lock object, access to which can be completely controlled.</p>
 **Example:** </p>
<pre> **
  public void print() {
    synchronized(this) { // warning: Lock operations on 'this' may have unforeseen side-effects
      System.out.println('synchronized');
    }
  }
  ** </pre>
<!-- tooltip end -->
" ></outline><outline text="Synchronization on a Lock object" _note="
Reports  **synchronized**  blocks that lock on an instance of  **java.util.concurrent.locks.Lock** .
Such synchronization is almost certainly unintended, and appropriate versions of  **.lock()** 
and  **.unlock()**  should be used instead.
 **Example:** </p>
<pre> **
  final ReentrantLock lock = new ReentrantLock();
  public void foo() {
    synchronized (lock) {}
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Synchronization on a non-final field" _note="
Reports  **synchronized**  statement lock expressions
that consist of a non- **final**  field reference.
Such statements are unlikely to have useful semantics, as different
threads may acquire different locks even when operating on the same object.
<!-- tooltip end -->
 **Example:** </p>
<pre> **
  private Object o;
  public void foo() {
    synchronized (o) // synchronization on a non-final field
    { }
  }
** </pre>
" ></outline><outline text="Synchronization on an object initialized with a literal" _note="
Reports  **synchronized**  blocks that lock on an object initialized with a literal.

  String literals are interned and  **Character** ,  **Boolean**  and  **Number**  literals can be allocated from a cache.
  Because of this, it is possible that some other part of the system, which uses an object initialized with the same literal, is actually
  holding a reference to the exact same object. This can create unexpected dead-lock situations, if the lock object was thought to be private.
</p>
 **Example:** </p>
<pre> **
  class Main {
    final String mutex = 'Mutex';
    void method() {
      synchronized (mutex) {
      }
    }
  }
** </pre>
<!-- tooltip end -->

  Use the <strong>Warn on all possible literals</strong> option to report any synchronization on
   **String** ,  **Character** ,  **Boolean**  and  **Number**  objects.
</p>
" ></outline><outline text="Synchronization on local variable or method parameter" _note="
Reports synchronization on a local variable or parameter. 

  It is very difficult to guarantee correct operation when such synchronization is used.
  It may be possible to improve such code, for example, by controlling access using a synchronized wrapper class or by synchronizing on a
  field.</p>
 **Example:** </p>
<pre> **
  void bar() {
    final Object lock = new Object();
    synchronized (lock) { }
  }
** </pre>

" ></outline><outline text="ThreadLocal field not declared static final" _note="
Reports fields of type  **java.lang.ThreadLocal**  that are not declared  **static final** .

  In the most common case, a  **java.lang.ThreadLocal**  instance associates state with a thread.
  A non-static non-final  **java.lang.ThreadLocal**  field associates state with an instance-thread combination.
  This is usually unnecessary and quite often is a bug that can cause memory leaks and incorrect behavior.
</p>

  A quick-fix is suggested to make the field  **static final** .

 **Example:** </p>
<pre> **
  private ThreadLocal tl = ThreadLocal.withInitial(() -> Boolean.TRUE);
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unconditional 'wait()' call" _note="
Reports  **wait()**  being called unconditionally within a synchronized context.

  Normally,  **wait()**  is used to block a thread until some condition is true. If
   **wait()**  is called unconditionally, it often indicates that the condition was
  checked before a lock was acquired. In that case a data race may occur, with the condition
  becoming true between the time it was checked and the time the lock was acquired.
</p>

  While constructs found by this inspection are not necessarily incorrect, they are certainly worth examining.
</p>
 **Example:** </p>
<pre> **
  class Bar {
      void foo() throws InterruptedException {
          synchronized (this) {
              wait(); // warning
          }
      }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unsynchronized method overrides synchronized method" _note="
Reports non- **synchronized**  methods overriding  **synchronized**  methods.

  The overridden method will not be automatically synchronized if the superclass method
  is declared as  **synchronized** . This may result in unexpected race conditions when using the subclass.
</p>
 **Example:** </p>
<pre> **
  class Super {
    synchronized void process() {}
  }
  class Sub extends Super {
    // Unsynchronized method 'process()' overrides synchronized method
    void process() {}
  }  
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Volatile array field" _note="
Reports array fields that are declared  **volatile** . Such declarations
may be confusing because accessing the array itself follows the rules for  **volatile** 
fields, but accessing the array's contents does not.
 **Example:** </p>
<pre> **
  class Data {
    private volatile int[] idx = new int[0];
  }
** </pre>

  If such volatile access is needed for array contents, consider using
   **java.util.concurrent.atomic**  classes instead:
</p>
<pre> **
  class Data {
    private final AtomicIntegerArray idx = new AtomicIntegerArray(new int[0]);
  }
** </pre>
<!-- tooltip end -->
" ></outline></outline><outline text="toString() issues" ><outline text="Class does not override 'toString()' method" _note="
Reports classes without a  **toString()**  method.
" ></outline><outline text="Field not used in 'toString()' method" _note="
Reports any fields that are not used in the  **toString()**  method of a class.
This inspection can help discover the
fields that were added after the  **toString()**  method was created and for which the  **toString()**  method was not
  updated. The quick-fix regenerates the  **toString()**  method.</p>

In the  **Generate | toString()**  dialog, it is possible to exclude fields from this check.
This inspection will also check for problems with getter methods if the <em>Enable getters in code generation</em> option is enabled there.
Example:</p>
<pre> **
   **public class**  Relevant {
     **private**  String name; // not used in toString()
     **private int**  index;
     **private int**  length;
    @Override
     **public**  String toString() {
         **return**  'Relevant{' + 'index=' + index +
          ', length=' + length + '}';
    }
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
   **public class**  Relevant {
     **private**  String name;
     **private int**  index;
     **private int**  length;
    @Override
     **public**  String toString() {
         **return**  'Relevant{' + 'name='' + name + '\'' +
          ', index=' + index + ', length=' + length + '}';
    }
  }
** </pre>
" ></outline></outline><outline text="Verbose or redundant code constructs" ><outline text="'StringBuilder' can be replaced with 'String'" _note="
Reports usages of  **StringBuffer** ,  **StringBuilder** , or  **StringJoiner** 
which can be replaced with a single  **String**  concatenation.
Using  **String**  concatenation
  makes the code shorter and simpler.</p>

This inspection only reports when the suggested replacement does not result in significant
performance drawback on modern JVMs. In many cases,  **String**  concatenation may perform better.
</p>
 **Example:** </p>
<pre> **
  StringBuilder result = new StringBuilder();
  result.append('i = ');
  result.append(i);
  result.append(';');
  return result.toString();
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String result = 'i = ' + i + ';';
  return result;
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Comparator method can be simplified" _note="
Reports redundant  **Comparator**  combinator constructs which can be simplified.
Example:</p>
<pre> **
  c.thenComparing(Comparator.comparing(function));
  Comparator.comparing(Map.Entry::getKey);
  Collections.max(list, Comparator.reverseOrder());
** </pre>
After the quick-fixes are applied:</p>
<pre> **
  c.thenComparing(function)
  Map.Entry.comparingByKey()
  Collections.min(list, Comparator.naturalOrder());
** </pre>
<!-- tooltip end -->
<small>New in 2018.1</small></p>
" ></outline><outline text="Condition is covered by further condition" _note="
Reports conditions that become redundant as they are completely covered by a subsequent condition.
For example, in the  **value != -1 && value > 0**  condition, the first part is redundant:
if it's false, then the second part is also false.
Or in a condition like  **obj != null && obj instanceof String** ,
  the null-check is redundant as  **instanceof**  operator implies non-nullity.</p>
<!-- tooltip end -->
<small>New in 2018.3</small></p>
" ></outline><outline text="Duplicate branches in 'switch'" _note="
Reports  **switch**  statements or expressions that contain the same code in different branches
and suggests merging the duplicate branches.
Example:</p>
<pre> **
   **switch**  (n) {
     **case**  1:
      System.out.println(n);
       **break** ;
     **case**  2:
      System.out.println(n);
       **break** ;
     **default** :
      System.out.println('default');
  }
** </pre>
Can be replaced with:</p>
<pre> **
   **switch**  (n) {
     **case**  1:
     **case**  2:
      System.out.println(n);
       **break** ;
     **default** :
      System.out.println('default');
  }
** </pre>
<!-- tooltip end -->
<small>New in 2019.1</small></p>
" ></outline><outline text="Excessive lambda usage" _note="
Reports if a trivial lambda expression is used in cases in which there's an alternative method that behaves in the same way, but accepts a concrete value
instead of a lambda.
This inspection helps simplify the code.</p>
Example:</p>
<pre> **
  Optional.orElseGet(() -> null)
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Optional.orElse(null)
** </pre>
<!-- tooltip end -->
<small>New in 2017.1</small></p>
" ></outline><outline text="Excessive range check" _note="
Reports condition chains in which a value range is checked and these condition chains can be simplified to a single check.
The quick-fix replaces a condition chain with a simplified expression:</p>
Example:</p>
<pre> **
  x > 2 && x &lt; 4
** </pre>
After the quick-fix is applied:</p>
<pre> **
  x == 3
** </pre>
Example:</p>
<pre> **
  arr.length == 0 || arr.length > 1
** </pre>
After the quick-fix is applied:</p>
<pre> **
  arr.length != 1
** </pre>
<!-- tooltip end -->
<small>New in 2019.1</small></p>
" ></outline><outline text="Explicit array filling" _note="
Reports loops that can be replaced with  **Arrays.setAll()**  or  **Arrays.fill()**  calls.
This inspection suggests replacing loops with  **Arrays.setAll()**  if the language level of the project or module is 8 or higher.
  Replacing loops with  **Arrays.fill()**  is possible with any language level.</p>
Example:</p>
<pre> **
  for (int i=0; i&lt;array.length; i++) {
     array[i] = calc(i);
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Arrays.setAll(array, this::calc);
** </pre>
<!-- tooltip end -->
<small>New in 2017.1</small></p>
" ></outline><outline text="Manual min/max calculation" _note="
Reports cases where the minimum or the maximum of two numbers can be calculated using
a  **Math.max()**  or  **Math.min()**  call instead of doing it manually.
Example:</p>
<pre> **
  public int min(int a, int b) {
    return b &lt; a ? b : a;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  public int min(int a, int b) {
    return Math.min(a, b);
  }
** </pre>
<!-- tooltip end -->

  Use the  **Disable for float and double**  option to disable this inspection for  **double**  and  **float** .
  This is useful because the quick-fix may slightly break semantics for  **float** /
   **double**  when handling  **NaN** . Nevertheless, in most cases it will actually fix
  the subtle bug when users do not care about  **NaN** .
</p>
<small>New in 2019.2</small></p>
" ></outline><outline text="Multiple occurrences of the same expression" _note="
Reports multiple equivalent occurrences of the same expression within a method (or constructor, or class initializer)
if the result of the expression can be reused.

  The expression is reported if it's free of side effects and its result is always the same (in terms of  **Object.equals()** ).
  The examples of such expressions are  **a + b** ,  **Math.max(a, b)** ,  **a.equals(b)** ,
   **s.substring(a,b)** . To make sure the result is always the same, it's verified that the variables used in the expression don't
  change their values between the occurrences of the expression.</p>

  Such expressions may contain methods of immutable classes like  **String** ,  **BigDecimal** , and so on,
  and of utility classes like  **Objects** ,  **Math**  (except  **random()** ).
  The well-known methods, such as  **Object.equals()** ,  **Object.hashCode()** ,  **Object.toString()** ,
   **Comparable.compareTo()** , and  **Comparator.compare()**  are OK as well because they normally don't have
  any observable side effects.
</p>
<!-- tooltip end -->

  Use the  **Expression complexity threshold**  option to specify the minimal expression complexity threshold. Specifying bigger
  numbers will remove reports on short expressions.
</p>
<small>New in 2018.3</small></p>
" ></outline><outline text="Null-check method is called with obviously non-null argument" _note="
Reports if a null-checking method (for example,  **Objects.requireNonNull**  or  **Assert.assertNotNull** ) is
called on the value that is obviously non-null (for example, a newly created object). Such a check is redundant and may indicate
a programming error.
<!-- tooltip end -->
New in 2017.2</p>
" ></outline><outline text="Optional call chain can be simplified" _note="
Reports  **Optional**  call chains that can be simplified. Here are several examples of possible simplifications:
<ul>
  <li> **optional.map(x -> true).orElse(false)**  &rarr;  **optional.isPresent()** </li>
  <li> **optional.map(x -> Optional.of(x.trim())).orElseGet(Optional::empty)**  &rarr;  **optional.map(String::trim)** </li>
  <li> **optional.map(x -> (String)x).orElse(null)**  &rarr;  **(String) optional.orElse(null)** </li>
  <li> **Optional.ofNullable(optional.orElse(null))**  &rarr;  **optional** </li>
  <li> **val = optional.orElse(null); val != null ? val : defaultExpr **  &rarr;  **optional.orElse(defaultExpr)** </li>
  <li> **val = optional.orElse(null); if(val != null) expr(val) **  &rarr;  **optional.ifPresent(val -> expr(val))** </li>
</ul>
<!-- tooltip end -->
<small>New in 2017.2</small></p>
" ></outline><outline text="Redundant 'compare()' method call" _note="
Reports comparisons in which the  **compare**  method is superfluous.
Example:</p>
<pre> **
  boolean result = Integer.compare(a, b) == 0;
** </pre>
After the quick-fix is applied:</p>
<pre> **
  boolean result = a == b;
** </pre>
<!-- tooltip end -->
<small>New in 2018.2</small></p>
" ></outline><outline text="Redundant 'File' instance creation" _note="
Reports redundant  **File**  creation in one of the following constructors when only  **String**  path can be used:  **FileInputStream** ,  **FileOutputStream** ,
 **FileReader** ,  **FileWriter** ,  **PrintStream** ,  **PrintWriter** ,  **Formatter** .
Example:</p>
<pre> **
InputStream is = new FileInputStream(new File('in.txt'));
** </pre>
After quick-fix is applied:</p>
<pre> **
InputStream is = new FileInputStream('in.txt');
** </pre>
<!-- tooltip end -->
<small>New in 2020.3</small></p>

" ></outline><outline text="Redundant 'isInstance()' or 'cast()' call" _note="
Reports redundant calls of  **java.lang.Class**  methods.
For example,  **Xyz.class.isInstance(object)**  can be replaced with  **object instanceof Xyz** .
The instanceof check is preferred: even though the performance will probably be the same as these methods are intrinsics,
they better indicate a static check.</p>
<!-- tooltip end -->
<small>New in 2018.2</small></p>
" ></outline><outline text="Redundant array creation" _note="
Reports arrays that are created specifically to be passed as a varargs parameter.
Example:</p>
 **Arrays.asList(new String[]{'Hello', 'world'})** </p>
The quick-fix replaces the array initializer with individual arguments:</p>
 **Arrays.asList('Hello', 'world')** </p>

" ></outline><outline text="Redundant Collection operation" _note="
Reports unnecessarily complex collection operations which have simpler alternatives.
Example:</p>
<pre> **
  void f(String[] array, Collection&lt;String&gt; collection) {
    String[] strings = Arrays.asList(array).subList(0, 10).toArray(new String[0]);
    boolean contains = collection.containsAll(Collections.singletonList('x'));
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  void f(String[] array, Collection&lt;String&gt; collection) {
    String[] strings = Arrays.copyOf(array, 10);
    boolean contains = collection.contains('x');
  }
** </pre>
<!-- tooltip end -->
<small>New in 2018.1</small></p>
" ></outline><outline text="Redundant step in Stream or Optional call chain" _note="
Reports redundant Stream or Optional calls like  **map(x -&gt; x)**  or  **filter(x -&gt; true)** ,
redundant  **sorted**  or  **distinct** .
<!-- tooltip end -->
Note that a mapping operation in code like  **streamOfIntegers.map(Integer::valueOf)** 
  works as  **requireNonNull**  check:
  if the stream contains  **null** , it throws a  **NullPointerException** , thus it's not absolutely redundant.
  Disable the  **Report redundant boxing in Stream.map**  option if you do not want such cases to be reported.</p>
This inspection only reports if the language level of the project or module is 8 or higher.</p>
" ></outline><outline text="Redundant String operation" _note="
Reports redundant  **String**  constructors and calls to methods like  **toString()**  or  **substring()** 
when they can be replaced with a simplified expression.
For example, calls to these methods can be safely removed in cases
  like  **'string'.substring(0)** ,  **'string'.toString()** , or
   **new StringBuilder().toString().substring(1,3)** .</p>
Example:</p>
<pre> **
  System.out.println(new String('message'));
** </pre>
After the quick-fix is applied:</p>
<pre> **
  System.out.println('message');
** </pre>

  Note that the quick-fix removes the redundant constructor, and this may affect  **String**  referential equality.
  If you need to preserve it even though it is considered bad practice, suppress the warning or configure the settings to ignore
  redundant  **String**  constructors.
</p>
<!-- tooltip end -->
<small>New in 2018.1</small></p>
" ></outline><outline text="Redundant type arguments" _note="
Reports all calls to parametrized methods in which explicit argument types
can be omitted since they will be unambiguously inferred by the compiler.

  Using redundant type arguments makes code superfluous and thus less readable.
</p>
Example:</p>
<pre> **
  List&lt;String&gt; list = Arrays.&lt;String&gt;asList('Hello', 'World');
** </pre>
A quick-fix is provided to remove redundant type arguments:</p>
<pre> **
  List&lt;String&gt; list = Arrays.asList('Hello', 'World');
** </pre>

" ></outline><outline text="Redundant type cast" _note="
Reports unnecessary cast expressions.

Example:</p>
<pre> **
  static Object toObject(String s) {
    return (Object) s;
  }
** </pre>
<!-- tooltip end -->

  Use the checkbox below to ignore clarifying casts e.g., casts in collection calls where  **Object**  is expected:
<pre> **
  static void removeFromList(List&lt;String&gt; l, Object o) {
    l.remove((String)o);
  } 
** </pre>

" ></outline><outline text="Redundant usage of unmodifiable collection wrappers" _note="
Reports redundant calls to unmodifiable collection wrappers within the
 **Collections**  class.
If the argument that is passed to an unmodifiable
  collection wrapper is already immutable, such a wrapping becomes redundant.</p>
Example:</p>
<pre> **
  Collections.unmodifiableList(Collections.singletonList('abc'));
** </pre>
In order to detect the methods that return unmodifiable collections, the
inspection uses the  **org.jetbrains.annotations.Unmodifiable** 
and  **org.jetbrains.annotations.UnmodifiableView**  annotations.
Use them to extend the inspection to your own unmodifiable collection
  wrappers.</p>
<!-- tooltip end -->
<small>New in 2020.3</small></p>

" ></outline><outline text="Simplifiable collector" _note="
Reports collectors that can be simplified.
In particular, some cascaded  **groupingBy**  collectors can be expressed by using a
  simpler  **toMap**  collector, which is also likely to be more performant.</p>
Example:</p>
<pre> **
  Collectors.groupingByConcurrent(String::length, Collectors.collectingAndThen(Collectors.maxBy(String::compareTo), Optional::get));
** </pre>
After the quick-fix is applied:</p>
<pre> **
  Collectors.toConcurrentMap(String::length, Function.identity(), BinaryOperator.maxBy(String::compareTo));
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 8 or higher.</p>
<small>New in 2017.1</small></p>
" ></outline><outline text="Stream API call chain can be simplified" _note="
Reports stream API call chains that can be simplified.
Simplification will often avoid some temporary object creation during collection traversal.

  The inspection replaces the following call chains:
</p>
<ul>
  <li> **collection.stream().forEach()**  &rarr;  **collection.forEach()** </li>
  <li> **collection.stream().collect(toList/toSet/toCollection())**  &rarr;  **new CollectionType&lt;&gt;(collection)** </li>
  <li> **collection.stream().toArray()**  &rarr;  **collection.toArray()** </li>
  <li> **Arrays.asList().stream()**  &rarr;  **Arrays.stream()**  or  **Stream.of()** </li>
  <li> **IntStream.range(0, array.length).mapToObj(idx -> array[idx])**  &rarr;  **Arrays.stream(array)** </li>
  <li> **IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))**  &rarr;  **list.stream()** </li>
  <li> **Collections.singleton().stream()**  &rarr;  **Stream.of()** </li>
  <li> **Collections.emptyList().stream()**  &rarr;  **Stream.empty()** </li>
  <li> **stream.filter().findFirst().isPresent()**  &rarr;  **stream.anyMatch()** </li>
  <li> **stream.collect(counting())**  &rarr;  **stream.count()** </li>
  <li> **stream.collect(maxBy())**  &rarr;  **stream.max()** </li>
  <li> **stream.collect(mapping())**  &rarr;  **stream.map().collect()** </li>
  <li> **stream.collect(reducing())**  &rarr;  **stream.reduce()** </li>
  <li> **stream.collect(summingInt())**  &rarr;  **stream.mapToInt().sum()** </li>
  <li> **stream.mapToObj(x -> x)**  &rarr;  **stream.boxed()** </li>
  <li> **stream.map(x -> {...; return x;})**  &rarr;  **stream.peek(x -> ...)** </li>
  <li> **!stream.anyMatch()**  &rarr;  **stream.noneMatch()** </li>
  <li> **!stream.anyMatch(x -> !(...))**  &rarr;  **stream.allMatch()** </li>
  <li> **stream.map().anyMatch(Boolean::booleanValue)**  &rarr;  **stream.anyMatch()** </li>
  <li> **IntStream.range(expr1, expr2).mapToObj(x -> array[x])**  &rarr;  **Arrays.stream(array, expr1, expr2)** </li>
  <li> **Collection.nCopies(count, ...)**  &rarr;  **Stream.generate().limit(count)** </li>
  <li> **stream.sorted(comparator).findFirst()**  &rarr;  **Stream.min(comparator)** </li>
  <li> **optional.orElseGet(() -> { throw new ...; })**  &rarr;  **optional.orElseThrow()** </li>
</ul>

  Note that the replacements semantic may have minor difference in some cases. For example,
   **Collections.synchronizedList(...).stream().forEach()**  is not synchronized while
   **Collections.synchronizedList(...).forEach()**  is synchronized.
  Also,  **collect(Collectors.maxBy())**  returns an empty  **Optional**  if the resulting element is
   **null**  while  **Stream.max()**  throws  **NullPointerException**  in this case.
</p>
" ></outline><outline text="Too weak variable type leads to unnecessary cast" _note="
Reports type casts that can be removed if the variable type is narrowed to the cast type.
Example:</p>
<pre> **
  Object x = '  string  ';
  System.out.println(((String)x).trim());
** </pre>

Here, changing the type of  **x**  to  **String**  makes the cast redundant. The suggested quick-fix updates the variable type and
removes all redundant casts on that variable:
</p>
<pre> **
  String x = '  string  ';
  System.out.println(x.trim());
** </pre>
<!-- tooltip end -->
<small>New in 2018.2</small></p>

" ></outline><outline text="Unnecessarily escaped character" _note="
Reports unnecessarily escaped characters in  **String**  and optionally  **char**  literals.
The escaped tab character  **\t**  is not reported, because otherwise it will be invisible.</p>
Examples:</p>
<pre> **
  String s = '\'Scare\' quotes';
  String t = '''
    All you need is\n\tLove\n''';
** </pre>
After the quick-fix is applied:</p>
<pre> **
  String s = ''Scare' quotes';
  String t = '''
    All you need is
    \tLove
  ''';
** </pre>
<!-- tooltip end -->
<small>New in 2019.3</small>
" ></outline><outline text="Unnecessary 'break' statement" _note="
Reports any unnecessary  **break**  statements.
An  **break**  statement is unnecessary if no other statements are executed after it has been removed.</p>
 **Example:** </p>
<pre> **
  switch (e) {
    case A -&gt; {
        System.out.println('A');
        break; // reports 'break' statement is unnecessary
    }
    default -&gt; {
        System.out.println('Default');
        break; // reports 'break' statement is unnecessary
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Unnecessary 'continue' statement" _note="
Reports  **continue**  statements if they are the last reachable statements in the loop.
These  **continue**  statements are unnecessary and can be safely removed.
Example:</p>
<pre> **
  for (String element: elements) {
    System.out.println();
    continue;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  for (String element: elements) {
    System.out.println();
  }
** </pre>
The inspection doesn't analyze JSP files.</p>
<!-- tooltip end -->

  Use the  **Ignore in then branch of 'if' statement with 'else' branch**  option to ignore
   **continue**  statements when they are placed in a  **then**  branch of a complete
   **if** - **else**  statement.
</p>
Example:</p>
<pre> **
  for (String element: elements) {
    if(element.isEmpty()) {
      continue;
    } else {
      //...
    }
  }
** </pre>
" ></outline><outline text="Unnecessary 'default' for enum 'switch' statement" _note="
Reports enum  **switch**  statements or expression with  **default**  branches which can never be taken,
because all possible values are covered by a  **case**  branch.
Such elements are redundant, especially for  **switch**  expressions, because they don't compile when all
  enum constants are not covered by a  **case**  branch.</p>

  The language level needs to be configured to 14 to report  **switch**  expressions.
</p>
The provided quick-fix removes  **default**  branches.</p>
Example:</p>
<pre> **
  enum E { A, B }
  int foo(E e) {
    return switch (e) {
      case A -&gt; 1;
      case B -&gt; 2;
      default -&gt; 3;
    };
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  enum E { A, B }
  int foo(E e) {
    return switch (e) {
      case A -&gt; 1;
      case B -&gt; 2;
    };
  }
** </pre>
<!-- tooltip end -->
Use the  **Only report switch expressions**  option to report only redundant  **default**  branches in switch expressions.</p>

" ></outline><outline text="Unnecessary 'return' statement" _note="
Reports  **return**  statements at the end of constructors and methods returning
 **void** . These statements are redundant and may be safely removed.
This inspection does not report in JSP files.
Example:</p>
<pre> **
   **void**  message() {
    System.out.println('Hello World');
     **return** ;
  }
** </pre>
After the quick-fix is applied:
<pre> **
   **void**  message() {
    System.out.println('Hello World');
  }
** </pre>
<!-- tooltip end -->

Use the  **Ignore in then branch of 'if' statement with 'else' branch**  option to ignore  **return**  statements in the then branch of  **if**  statements
which also have an  **else**  branch.
" ></outline><outline text="Unnecessary label on 'break' statement" _note="
Reports  **break**  statements with unnecessary labels. Such labels do not change the
control flow but make the code difficult to follow.
 **Example:** </p>
<pre> **
  label:
  for(int i = 0; i &lt; 10; i++) {
    if (shouldBreak()) break label;
    //doSmth
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  label:
  for(int i = 0; i &lt; 10; i++) {
    if (shouldBreak()) break;
    //doSmth
  }
** </pre>
<!-- tooltip end -->

" ></outline><outline text="Unnecessary label on 'continue' statement" _note="
Reports  **continue**  statements with unnecessary
labels.
Example:</p>
<pre> **
  LABEL:
  while (a &gt; b) {
    System.out.println('Hello');
    //the code below is the last statement in a loop,
    //so unnecessary label and continue can be removed
    continue LABEL;
  }
** </pre>
<!-- tooltip end -->

" ></outline></outline><outline text="Visibility" ><outline text="'public' constructor in non-public class" _note="
Reports all  **public**  constructors in non- **public**  classes.
Usually, there is no reason for creating a  **public**  constructor in a class with a lower access level.
  Please note, however, that this inspection changes the behavior of some reflection calls. In particular,
   **Class.getConstructor()**  won't be able to find the updated constructor
  ( **Class.getDeclaredConstructor()**  should be used instead). Do not use the inspection if your code
  or code of some used frameworks relies on constructor accessibility via  **getConstructor()** .
</p>
<!-- tooltip end -->
" ></outline><outline text="Access to inherited field looks like access to element from surrounding code" _note="
Reports access to a superclass field from an anonymous, inner or local class,
if a local variable, parameter, or field with the same name is available in the code surrounding the class.
In this case it may seem that an element from the surrounding code is accessed,
when in fact it is an access to a field from the superclass.

  To clarify the intent of the code, it is recommended to add an explicit
   **super**  qualifier to the field access.
</p>
 **Example:** </p>
<pre> **
    class First {
      protected String ambiguous;
    }
    class Second {
      void foo(String ambiguous) {
        new First() {
          {
            System.out.println(ambiguous); // the field is accessed, not the parameter
          }
        };
      }
    }
** </pre>
After the quick-fix is applied:</p>
<pre> **
    class First {
      protected String ambiguous;
    }
    class Second {
      void foo(String ambiguous) {
        new First() {
          {
            System.out.println(super.ambiguous);
          }
        };
      }
    }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Anonymous class variable hides variable in containing method" _note="
Reports fields in an anonymous class that are named identically to local variables or parameters of
the containing method or lambda expression.

  As a result of such naming, you may accidentally use the anonymous class field where
  the identically named variable or parameter from the containing method is intended.
</p>
A quick-fix is suggested to rename the field.</p>
 **Example:** </p>
<pre> **
  class Test {
    public Test(String value) {
      Object foo = new Object() {
        private String value = 'TEST';
        public void foo() {
          System.out.println(value); //the field is accessed, not the parameter
        }
      };
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Call to inherited method looks like call to local method" _note="
Reports calls to a superclass method from an anonymous, inner or local class,
if a method with the same signature exists in the code surrounding the class.
In this case it may seem that a method from the surrounding code is called,
when in fact it is a call to a method from the superclass.

  To clarify the intent of the code, it is recommended to add an explicit
   **super**  qualifier to the method call.
</p>
 **Example:** </p>
<pre> **
  class Parent {
    void ambiguous(){}
  }
  class Example {
    void ambiguous(){}
    class Inner extends Parent {
      void example(){
        ambiguous(); //warning
      }
    }
  }
  ** </pre>
After the quick-fix is applied:</p>
<pre> **
  class Parent {
    void ambiguous(){}
  }
  class Example {
    void ambiguous(){}
    class Inner extends Parent {
      void example(){
        super.ambiguous();
      }
    }
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Inner class field hides outer class field" _note="
Reports inner class fields named identically to a field of a surrounding class.
As a result of such naming, you may accidentally use the field from the inner class
when using the identically named field of a surrounding class is intended.
A quick-fix is suggested to rename the inner class field.</p>
 **Example:** </p>
<pre> **
  class Outer {
    private String name;
    class Inner {
      private String name;
    }
  }
** </pre>
<!-- tooltip end -->

  Use the option to choose whether this inspection should report all name clashes,
  or only clashes with fields that are visible from the inner class.
</p>

" ></outline><outline text="Lambda parameter hides field" _note="
Reports lambda parameters named identically to a field of a surrounding class.
As a result of such naming, you may accidentally use the lambda parameter when using the identically named field is intended.
A quick-fix is suggested to rename the lambda parameter.</p>
 **Example:** </p>
<pre> **
  public class MyClass {
    public Object foo;
    void sort(List&lt;Integer&gt; list) {
      list.sort((foo, bar) -> foo - bar);
    }
  }
** </pre>
<!-- tooltip end -->

  Use the option to choose whether to ignore fields that are not visible from the lambda expression.
  For example, private fields of a superclass.

" ></outline><outline text="Local variable hides field" _note="
Reports local variables named identically a field of a surrounding class.
As a result of such naming, you may accidentally use the variable where the identically named field is intended.
A quick-fix is suggested to rename the variable.</p>
 **Example:** </p>
<pre> **
  public class Foo {
    public Object foo;
    void bar() {
      Object o = new Object() {
        void baz() {
          Object foo; // Local variable 'foo' hides field in class 'Foo'
        }
      };
    }
  }
** </pre>
<!-- tooltip end -->

  You can configure the following options for this inspection:
</p>
<ol>
  <li><strong>Ignore non-accessible fields</strong> - ignore local variables named identically to superclass fields
    that are not visible (for example, because they are private).</li>
  <li><strong>Ignore local variables in a static context hiding non-static fields</strong> -
    for example when the local variable is inside a static method or inside a method which is inside a static inner class.
  </li>
</ol>
" ></outline><outline text="Method overrides inaccessible method of superclass" _note="
Reports methods with the same signature as an inaccessible method of a superclass,
for example, a private method, or a package-private method of a superclass in another package.

  Such method names may be confusing because the method in the subclass may look like an override when in fact
  it hides the inaccessible method of the superclass.
  Moreover, if the visibility of the method in the superclass changes later,
  it may either silently change the semantics of the subclass or cause a compilation error.
</p>
A quick-fix is suggested to rename the method.</p>
 **Example:** </p>
<pre> **
  public class Super {
    private void test() {
    }
  }
  public class Sub extends Super {
    void test() { // making 'Super.test()' public causes a compilation error
                  // making 'Super.test()' package-private makes 'Sub.test()' an override
    }
  }** </pre>
<!-- tooltip end -->

" ></outline><outline text="Method tries to override static method of superclass" _note="
Reports  **static**  methods with a signature identical to a  **static**  method of a superclass.
Such a method may look like an override when in fact it hides the method from the superclass because
 **static**  methods in Java cannot be overridden.
 **Example:** </p>
<pre> **
  class Parent {
    static void method(){}
  }
  class Example extends Parent {
    static void method(){} //warning
  }
** </pre>
<!-- tooltip end -->
" ></outline><outline text="Module exports/opens package to itself" _note="
Reports packages that are exported to, or opened in the same Java 9 module in which they are defined.
The quick-fix removes such directives from  **module-info.java** .
Example:</p>
<pre> **
  module com.mycomp {
    exports com.mycomp.main to com.mycomp;
  }
** </pre>
After the quick-fix is applied:</p>
<pre> **
  module main {
  }
** </pre>
<!-- tooltip end -->
This inspection only reports if the language level of the project or module is 9 or higher.</p>
" ></outline><outline text="Non-accessible 'class' is exposed" _note="
Reports usages of classes in a field or method signature when a class in a signature is less visible than the member itself.
While legal Java, such members are useless outside of the visibility scope.
Example:</p>
<ul>
  <li> **public**  method which returns a  **private**  inner  **class** .</li>
  <li> **protected**  field whose type is a package-local  **class** .</li>
</ul>

In Java 9, a module may hide some of its classes by excluding their packages from export.
So, if the signature of exported API contains a non-exported class, such an API is useless outside of the module.
<!-- tooltip end -->
Configure the inspection:</p>
<ul>
  <li>Use the  **Module's API exposes not exported classes (Java 9+)**  option to report about the module API
    that exposes unexported classes.
Note that the option works if the language level of the project or module is 9 or higher.</li>
  <li>Use the  **Public API exposes non-accessible classes**  option to report about a public API
    that exposes non-accessible classes.</li>
  <li>Use the  **Package-local API exposes private classes**  option to report about package-local API
    that exposes  **private**  classes.</li>
</ul>
" ></outline><outline text="Parameter hides field" _note="
Reports method parameters named identically to a field of a surrounding class.
As a result of such naming, you may accidentally use the parameter when using the identically named field is intended.
A quick-fix is suggested to rename the parameter.</p>
 **Example:** </p>
<pre> **
  class Main {
    private String value;
    public Main(String value) {
      value = value.toUpperCase();
    }
  }
  ** </pre>
<!-- tooltip end -->

  You can configure the following options for this inspection:
</p>
<ol>
  <li>
    <strong>Ignore for property setters</strong> - ignore parameters of simple setters.
  </li>
  <li>
    <strong>Ignore superclass fields not visible from subclass</strong> - ignore  **private** 
    fields in a superclass, which are not visible from the method.
  </li>
  <li>
    <strong>Ignore for constructors</strong> - ignore parameters of constructors.
  </li>
  <li>
    <strong>Ignore for abstract methods</strong> - ignore parameters of abstract methods.
  </li>
  <li>
    <strong>Ignore for static method parameters hiding instance fields</strong> - ignore parameters
    of  **static**  methods hiding an instance field and to ignore parameters of instance methods in static inner
    classes hiding an instance field of an outer class. While not strictly hiding, such parameters can still be confusing.
  </li>
</ol>

" ></outline><outline text="Possibly unintended overload of method from superclass" _note="
Reports instance methods with the same name and the same number of parameters as a method in a superclass,
but where at least one of the parameters is of a different incompatible type.

  In this case, the method in a subclass will be overloading the method from the superclass
  instead of overriding it. If it is unintended, it may result in latent bugs.
</p>
 **Example:** </p>
<pre> **
  public class Foo {
    void foo(int x) {}
  }
  public class Bar extends Foo {
    void foo(Number x) {} // Method 'foo()' overloads a compatible method of a superclass,
                          // when overriding might have been intended
  }
** </pre>
<!-- tooltip end -->

  Use the option to choose whether the inspection should also report cases where parameter types are not compatible.

" ></outline><outline text="Subclass field hides superclass field" _note="
Reports fields in a derived class that are named identically a field of a superclass.
Java fields cannot be overridden in derived classes,
so the field in the derived class will hide the field from the superclass.

  As a result of such naming, you may accidentally use the field of the derived class
  where the identically named field of a base class is intended.
</p>
A quick-fix is suggested to rename the field in the derived class.</p>
 **Example:** </p>
<pre> **class Parent {
  Parent parent;
}
class Child extends Parent {
  Child parent;
}
** </pre>
<!-- tooltip end -->

  You can configure the following options for this inspection:
</p>
<ol>
  <li>
    <strong>Ignore non-accessible fields</strong> - indicates whether this inspection should report all name clashes,
    or only clashes with fields which are visible from the subclass.
  </li>
  <li>
    <strong>Ignore static fields hiding static fields</strong> - ignore  **static**  fields
    which hide  **static**  fields in base classes.
  </li>
</ol>

" ></outline><outline text="Type parameter hides visible type" _note="
Reports type parameters that have the same names as the visible types in the current scope. Such parameter names may be confusing.
<!-- tooltip end -->
Example:</p>
<pre> **
  abstract class MyList&lt;T&gt; extends AbstractList&lt;T&gt; {
    private List&lt;T&gt; elements;
    // type parameter 'T' hides type parameter 'T'
    public &lt;T&gt; T[] toArray(T[] array) {
        return elements.toArray(array);
    }
}
** </pre>
" ></outline><outline text="Usage of service not declared in 'module-info'" _note="
Reports situations in which a service is loaded with  **java.util.ServiceLoader**  but it isn't declared with the
 **uses**  clause in the  **module-info.java**  file and suggests inserting it.
<!-- tooltip end -->
<small>New in 2018.1</small></p>
" ></outline></outline></outline></outline>
</body></opml>